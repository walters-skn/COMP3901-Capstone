openapi: 3.0.3
info:
  version: '2.1.0'
  title: 'LogMeal v2 Documentation'
  description: "This document is intended to provide all the needed knowledge to communicate with LogMeal's API as well
  as the description of all the available endpoints.


  To <strong>get started and see code examples</strong> please visit our <a href='https://api.logmeal.es/tutorial/' target='_blank'>tutorial</a>.


  For <strong>logging in to your APICompany user account</strong> visit our <a href='https://www.logmeal.es' target='_blank'>web page</a>.


  To view the documentation for an older API version click any of the following links: <a href='https://api.logmeal.es/v1/docs/'>v1</a>, <a href='https://api.logmeal.es/v0/docs/'>v0</a>.


  <strong>Depending on the LogMeal plan you are subscribed to a different set of endpoints will be accessible for you. Check our <a href='https://logmeal.es/api/pricing/' target='_blank'>pricing</a> page to see a list of the features we have available for each plan.</strong>


  The endpoints described in this document might only be accessible by specific types of users (based on the token used). Each endpoint has an icon representing which types of users are allowed to use it, among the following:

    - ⚫ <strong>APICompany</strong>: global manager users that are in charge of creating other users among other things (only one is available per account).

    - 🔴 <strong>APIUser</strong>: specific final users for the application that you are building. Thus, a different APIUser must be created for each final user that accesses LogMeal’s services through your application/software.

    - 🔵 <strong>APIUserManager</strong>: user capable of visualizing the intake history for multiple APIUsers (could be assigned to a nutritionist/clinician/manager).


  Some of our endpoints have some call limitations in place. The endpoints with limitations will have the ⏱ icon next to their summary, meaning that they will have at least one of the following limitations:

  * <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> Endpoints with a <strong>limited amount of monthly calls</strong> based on your LogMeal Plan, <strong>shared among all of your users</strong>. Calls that exceed your monthly limit will be charged as extra credits. The endpoints with this limitation will also be labeled with a ⭐ icon.

  * <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> Endpoints with a <strong>limited amount of daily calls</strong> based on your LogMeal Plan, <strong>applied to each user separately</strong>. Calls that exceed the daily limit won't be processed (error code **429**).

  * <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> Endpoints with a <strong>limited amount of calls per second</strong> based on your LogMeal Plan, <strong>applied to each user separately</strong>. Calls that exceed the request rate limit won't be processed (error code **429**).


  You will be able to find the specific limitations inside the description of each endpoint with the ⏱ icon.


  *<strong>Note:</strong> You can check your current account limitations by using one of the <strong>Informative endpoints</strong>.*


  "
# ALL AVAILABLE COLOUR SYMBOLS: ⚫ ⚪ 🔵🔴🟠🟡🟢🟣🟤🟦🟥🟧🟨🟩🟪🟫🛑🔶🔷🔸🔹🔺🔻
#    ⚫🔴⚪⏱⭐
  contact:
    email: "contact@logmeal.es"
servers:
  - url: https://api.logmeal.es
  #- url: https://staging.logmeal.es
  #- url: http://localhost:8080
  #  description: staging server
#schemes:
# - http
#consumes:
#  - "application/json"
#produces:
#  - "application/json"
tags:
#- name: "Authentication"
#  description: ""

- name: "Informative Endpoints"
  description: "Endpoints that provide useful information about the LogMeal API"
  externalDocs:
    description: ""

- name: "APIUsers Management"
  description: "Endpoints that allow APICompanies to manage their APIUsers"
  externalDocs:
    description: "These endpoints are all limited to APICompany ⚫ tokens"

- name: "APIUsers Profile Management"
  description: "Endpoints that allow APIUsers to get and modify their profiles"
  externalDocs:
    description: "These endpoints are all limited to APIUser 🔴 tokens"


- name: "API and Models Versioning Functions"
  description: "Endpoints that provide information about the available versions of the API and our Models"
  externalDocs:
    description: "Available to both APICompany ⚫ and APIUser 🔴 tokens"

- name: "Dataset Information, Recognized Dishes and Others"
  description: "Endpoints that provide information about our datasets"
  externalDocs:
#    description: "Available to both APIUserManager 🔵 and APIUser 🔴 tokens"

- name: "Image-based Food Recognition"
  description: "Endpoints related to applying food recognition on images"
  externalDocs:
    description: "These endpoints are all limited to APIUser 🔴 tokens"

- name: "Nutritional Information"
  description: "Endpoints related to the nutritional information services"
  externalDocs:
    description: "⚡ Endpoints limited to Analyse plan or higher ⚡"

- name: "Measures and Easy Modulation"
  description: "Endpoints with information about cooking measures and easy modulation"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "APIUserManager Endpoints"
  description: "Endpoints that allow managing the APIUserManagers"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Intake History"
  description: "Endpoints related to the APIUser's intake history management and visualization"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Custom Occasions"
  description: "Endpoints related to managing custom occasions"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Nutritional Goals"
  description: "Endpoints related to the APIUser's nutritional goals management"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Custom Nutritional Indicators"
  description: "Endpoints related to managing custom nutritional indicators"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Custom Recipes"
  description: "Create and assign custom recipes accessible by all the users in the company"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "APIUser Favorite Meals"
  description: "Endpoints related to the APIUser's favorite meals"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Body Measures"
  description: "Endpoints to manage body measures"
  externalDocs:
    description: "⚡ Endpoints limited to Monitor plan or higher ⚡"

- name: "Intake Variety Score and Nutri-Scores"
  description: "Endpoints related to the APIUser's intake variety and Nutri-Score services"
  externalDocs:
    description: "⚡ Endpoints limited to Recommend plan or higher ⚡"

- name: "Recipe and Dish Recommendations"
  description: "Endpoints related to the APIUser's recipe and dish recommendations services"
  externalDocs:
    description: "⚡ Endpoints limited to Recommend plan or higher ⚡"

- name: "Food Quantity Estimation"
  description: "Endpoints related to applying food segmentation and quantity estimation on images"
  externalDocs:
    description: "⚡ Endpoints limited to Recommend plan or higher ⚡"

- name: "Food Waste Estimation"
  description: "Food waste estimation for dish leftovers and stored food waste disposal"
  externalDocs:
    description: "⚡ Endpoints limited to Custom plans ⚡"

paths:
  ################################################
  ##  Informative Endpoints
  ################################################
  /v2/info/limitations:
    get:
      tags:
        - "Informative Endpoints"
      summary: "⚫ Get information about your current account limitations ⏱"
      description: "
                      Summary of limitations:


                      <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>


                      <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>


                      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      Use this endpoint to retrieve the current limitations of your LogMeal Plan.
                      "
      responses:
        200:
          description: "Limitations retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  D:
                    type: string
                    example: "___ calls per day per user. (On D limited endpoints)"
                  M:
                    type: string
                    example: "___ queries per month among all your users. (On M limited endpoints)"
                  S:
                    type: string
                    example: "___ allowed calls per second per user. (On S limited endpoints)"
        401:
          description: "Unauthorized, invalid token"
      security:
        - Bearer: [ ]

  /v2/info/services:
    get:
      tags:
        - "Informative Endpoints"
      summary: "⚫🔴🔵 Get list of accessible services (endpoints) ⏱"
      description: "
                        Returns the list of services available by the requesting user's APICompany. 
                        The services returned depend on the LogMeal Plan the company is subscribed.
                        "
      responses:
        200:
          description: "Services retrieved"
          content:
            application/json:
              schema:
                type: object
                properties:
                  users/signUp:
                    type: object
                    properties:
                      description:
                        type: string
                        example: "Create a new APIUser"
                      extra_calls_paid:
                        type: boolean
                        example: false
                  image/segmentation/complete:
                    type: object
                    properties:
                      description:
                        type: string
                        example: "Food Segmentation"
                      extra_calls_paid:
                        type: boolean
                        example: true
        401:
          description: "Unauthorized, invalid token"
      security:
        - Bearer: [ ]

  /v2/info/availableNutrients:
    get:
      tags:
        - "Informative Endpoints"
      summary: "⚫🔴🔵 Get information about the available nutritional indicators"
      description: "
                      This endpoint returns information about the nutritional indicators available in our API.
                      The response contains an object for each nutrient, with the <strong>nutritional code</strong> as a key.


                      &nbsp;


                      Most of our endpoints that provide responses containing information about nutritional indicators
                      will use this nutritional code as a reference.


                      &nbsp;


                      It will also return custom nutritional indicators. Only if they have been defined.
                      "
      responses:
        200:
          description: "Available nutrients retrieved."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailableNutrientsResponse"
        401:
          description: "Unauthorized, invalid token"
      security:
        - Bearer: [ ]

  ################################################
  ##  APICompany-related endpoints
  ################################################
  /v2/users/signUp:
    post:
      tags:
      - "APIUsers Management"
      summary: "⚫ Sign Up new APIUser"
      description: "
                    Create a new APIUser which will have access to our API, an APIUser should only be assigned to a unique user.


                    &nbsp;


                    Each APIUser will have a token assigned to it which can be used in our endpoints, granting access to the services.


                    &nbsp;


                    Any call that is made by each of your APIUsers will be taken into consideration based on your current LogMeal Plan.

                    Also, each APIUser counts towards the device limit so you won't be able to create one if your current LogMeal Plan's limit is reached.
                    "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignup"
        description: "List of user object"
        required: true
      responses:
        '201':
          description: "token is valid, company user is created, token is generated and sent in response (JSON format)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'The new APIUser has been successfully created!'
                  token:
                    type: string
                    example: '731ccfa35745110aabb32ed'
                  id:
                    type: integer
                    example: 435
        409:
          description: "The given username already exists in the LogMeal database."
        403:
          description: 'Your company has reached the maximum amount of APIUsers based on your current LogMeal Plan. Upgrade your plan, remove unused users or contact us for more information.'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            examples:
              Not allowed to this method:
                message: 'You are not allowed to this method.'

        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/info/languages:
    get:
      tags:
        - "Informative Endpoints"
      summary: "⚫🔴🔵 Returns the available languages to be assigned to APIUsers."
      description: "Endpoint that returns a JSON containing the languages that can be associated to each of the APIUsers.

            By using the language parameters, all image recognition predictions and any other information returned to the APIUser will be translated into that language.


            &nbsp;


            Each language will always be identified by a 3 character ISO 639-2/T code, which corresponds to the key of the JSON provided by this endpoint.
      "
      responses:
        '200':
          description: "token is valid and list of available languages is returned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguagesResponse"
        403:
          description: 'You are not allowed to this method.'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            examples:
              Not allowed to this method:
                $ref: '#/components/schemas/Error403'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: [ ]

  /v2/users/APIUsers:
    get:
      tags:
      - "APIUsers Management"
      summary: "⚫ Returns the list of existing APIUsers for a given company"
      description: "This endpoint returns a list of the APIUsers that are associated to your APICompany, with some basic information about each APIUser."
      responses:
        '200':
          description: "APIUsers successfully obtained"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        403:
          description: 'You are not allowed to this method.'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            examples:
              Not allowed to this method:
                $ref: '#/components/schemas/Error403'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/users/deleteAPIUser/{userId}:
    delete:
      tags:
      - "APIUsers Management"
      summary: "⚫ Deletes an APIUser from your APICompany."
      description: "This endpoint deletes/disables a user from your APICompany.


                    &nbsp;


                    If the APIUser you want to delete has already used our API (has processed images through our endpoints), a soft delete will be applied (the user will be disabled but it's data will be kept for your future analysis through our intake history endpoints).


                    &nbsp;


                    If the APIUser has never used any of our image processing endpoints, the user will be completely removed from our system.
                    "
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: "The APIUser was successfully deleted."
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

# TODO create endpoint to reset token for APIUsers and another one for APICompanies by using user/email and password.
#  /v2/users/resetToken:
#    post:
#      tags:
#        - "APIUsers Management"
#      summary: "⚫ Reset your APICompany Token."
#      description: "This endpoint allows you, as an APICompany, to reset your current Token and obtain a new one.
#
#
#                    &nbsp;
#
#
#                    You must take into consideration that resetting your current token will revoke access to our API anywhere the old token was being used.
#
#                    "
#      responses:
#        '200':
#          description: "Token was successfully reset."
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  new_token:
#                    type: string
#        401:
#          description: "Unauthorized, invalid token"
#        404:
#          description: "The specified URL was not found or couldn’t be retrieved"
#      security:
#        - Bearer: []

  /v2/users/modifyUserProfileInfo/{userId}:
    post:
      tags:
        - "APIUsers Management"
      summary: "⚫ Modify a user's profile information."
      description: "This endpoint allows you to modify the information from APIUsers created by the APICompany. This information will be used, for instance, to calculate the /getRecommendedDailyIntake endpoint based on the user data, among others.

                    &nbsp;


                    Read the specification of the request body to see the available fields with their descriptions.


                    &nbsp;


                    This endpoint is the same as '/v2/profile/modifyUserProfileInfo'."
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileObject"
        description: "Parameters to be modified, all fields are optional except 'user_id'. Null values will be ignored."
        required: true
      responses:
        '200':
          description: "The profile information has been successfully modified!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "The profile information has been successfully modified!"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Sex is not valid:
              message: "The provided sex value is not valid."
              code: 1205
            Lifestyle is not valid:
              message: "The provided lifestlye value is not valid."
              code: 1214
            Salt level is not valid:
              message: "The provided salt level value is not valid."
              code: 1215
            Sugar level is not valid:
              message: "The provided sugar level value is not valid."
              code: 1216
            Portion size is not valid:
              message: "The provided portion size value is not valid."
              code: 1217
            Birth format not valid:
              message: "The provided birth value is wrong. Follow the format 'YYYY-MM-DD'"
              code: 1218
            diet label not valid:
              message: "The provided diet label value is not valid"
              code: 1607
            food restriction not valid:
              message: "The provided food restriction value is not valid'"
              code: 1608

        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: []

  /v2/users/getUserProfileInfo/{userId}:
    get:
      tags:
        - "APIUsers Management"
      summary: "⚫ Get a user's profile information."
      description: "This endpoint returns the information from the specified APIUser owned by the APICompany.


                    &nbsp;


                    Read the specification of the response body to see the available fields with their descriptions.


                    &nbsp;


                    This endpoint is the same as '/v2/profile/getUserProfileInfo'."
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        200:
          description: "The profile information has been successfully obtained"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileObject'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: []

  /v2/users/toggleEnabled/{userId}:
    post:
      tags:
        - "APIUsers Management"
      summary: "⚫ Toggles the 'enabled' attribute for an APIUser."
      description: "By changing the state of the 'enabled' attribute you can grant or prevent a user to gain access to the main intake endpoints.
                    Furthermore, you can preventing them to consume monthly credits or account for the total Monthly Active Users (MAUs).


                    &nbsp;

                    
                    Alternatively, you can change the 'enabled' attribute through the 'Users' page after logging in to your account at LogMeal's web page.
                    

                    &nbsp;
                    

                    If an APIUser is DISABLED and tries to make an API call to a privileged endpoint an HTTP error will be received with status code 403 and custom error code 116.


                    &nbsp;
                    

                    You can check the status of the 'enable' attribute calling the endpoint GET '/v2/users/APIUsers'."
      parameters:
        - $ref: '#/components/parameters/UserIdParam'

      responses:
        '200':
          description: "The profile information has been successfully modified!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                    example: false
                    description: 'Either if the APIUser has access to the intake report endpoints and consume monthly credits.'
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  ################################################
  ##  Image recognition services
  ################################################

  /v2/image/recognition/type/{model_version}:
    post:
      tags:
        - "Image-based Food Recognition"
      summary: "🔴 Food Type recognition ⏱⭐"
      description: "
          <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>


          <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>


          <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


          &nbsp;


          Applies food type recognition to the provided image. The available food types as well as their corresponding IDs are 1: 'food', 2: 'ingredients', 3: 'sauces', 4: 'non food', 5: 'drinks', 6: 'combination dish'.


          Note that any image not belonging to any of the aforementioned groups will be recognized as ‘non food’."
      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/SkipTypes'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Image sent in files"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: "token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecognitionTypeResponse'
          examples:
            Recognition type response example:
              $ref: '#/components/examples/RecognitionTypeResponseExample'
        400:
          description: "Bad request. Invalid Image/File, problems saving sent image"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Saved:
              message: "Image couldn't be saved."
              code: 701
        403:
          description: 'You are not allowed to this method.'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: []

#  /v2/image/recognition/dish/{model_version}:
#    post:
#      tags:
#        - "Image-based Food Recognition"
#      summary: "🔴 Food Dish recognition ⏱⭐"
#      description: |
#        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>
#
#
#        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>
#
#
#        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>
#
#
#        &nbsp;
#
#
#        **We recommend always using the endpoint /v2/image/recognition/complete instead for optimal recognition results.**
#
#
#        &nbsp;
#
#
#        Given an image, provides the main food groups recognized and the list of most probable dishes. These dishes come with their names, the corresponding ids and the associated probabilities in three separated lists (see the response example below).
#
#        The returned information also includes the image id and the dish type (see /v2/image/recognition/type).
#
#        Note that:
#
#        - The food type ‘ingredients’ corresponds to raw food (like ‘carrot’, ‘pepper’, etc).
#
#
#        - If the dish type recognized is ‘no food’, the endpoint will not return more information
#                    about recognition.
#
#
#        - If the dish type recognized is ‘food’, the endpoint will return the top 3 food groups. The list of possible food groups can be retrieved with a call to /foodGroups.
#      parameters:
#        - $ref: '#/components/parameters/ModelVersion'
#        - $ref: '#/components/parameters/SkipTypes'
#        - $ref: '#/components/parameters/Language'
#      requestBody:
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                image:
#                  type: string
#                  format: binary
#                  description: 'Image sent in files'
#              required:
#                - image
#        required: true
#      responses:
#        200:
#          description: "token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RecognitionDishResponse'
#          examples:
#            Recognition dish response example:
#              $ref: '#/components/examples/RecognitionDishResponseExample'
#        400:
#          description: "Bad request: Invalid Image/File, problems saving sent image"
#          $ref: ''
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#          examples:
#              Image Not Saved:
#                message: "Image couldn't be saved."
#                code: 701
#        403:
#          description: 'You are not allowed to this method.'
#        401:
#          description: "Unauthorized, invalid token"
#        404:
#          description: "The specified URL was not found or couldn’t be retrieved"
#        429:
#          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
#      security:
#        - Bearer: []
#
#  /v2/image/recognition/combo/{model_version}:
#    post:
#      tags:
#        - "Image-based Food Recognition"
#      summary: "🔴 Combination dish recognition ⏱⭐"
#      description: |
#        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>
#
#
#        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>
#
#
#        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>
#
#
#        &nbsp;
#
#
#        **We recommend always using the endpoint /v2/image/recognition/complete instead for optimal recognition results.**
#
#
#        &nbsp;
#
#
#        Applies combination dish recognition, which consist of a set of independent dishes/foods. Thus, it provides as
#        output the complete set of foods/dishes that are present in the image.
#
#        Opposed to the enpoint /recognition/dish, which provides the set of most probable dishes present in the
#        image but only one of them is correct, in this endpoint the whole set of provided foods are detected
#        to be present in the image.
#      parameters:
#        - $ref: '#/components/parameters/ModelVersion'
#        - $ref: '#/components/parameters/Language'
#      requestBody:
#        description: "Image sent in files"
#        required: true
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                image:
#                  type: string
#                  format: binary
#              required:
#                - image
#      responses:
#        200:
#          description: "token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/RecognitionComboResponse'
#          examples:
#            Recognition combo response example:
#              $ref: '#/components/examples/RecognitionComboResponseExample'
#        400:
#          description: "Bad request. Invalid Image/File, problems saving sent image"
#          $ref: ''
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#          examples:
#            Image Not Saved:
#              message: "Image couldn't be saved."
#              code: 701
#        401:
#          description: "Unauthorized, invalid token"
#        403:
#          description: 'You are not allowed to this method.'
#        404:
#          description: "The specified URL was not found or couldn’t be retrieved"
#        429:
#          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
#      security:
#        - Bearer: []

  /v2/image/segmentation/complete/{model_version}:
    post:
      tags:
        - "Image-based Food Recognition"
      summary: "🔴 Multiple Food Dishes Segmentation ⏱⭐ Detects every food item on the image and recognises it."
      description: |
        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>
        
        
        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>
        
        
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>
        
        
        &nbsp;
        
        
        Given an image, it segments and detects each food item or food region appearing on it. Then the most probable dishes are recognized for each of the regions separately. These dishes come with their names, the corresponding ids and the associated probabilities (confidence).
        
        Note that the segmentation_results, which contain the bounding boxes and segments detected, might not be directly applicable to the uploaded 
        image size. The segmentation pixel values are scaled depending on the 'processed_image_size' values provided 
        for each of the images (the images might be sometimes resized depending on the needs of the food recognition 
        algorithms used).
        
        
        &nbsp;
        
        
        If you have a LogMeal Recommend plan or higher we recommend using the /segmentation/complete/quantity endpoint, instead. It provides the same information in the current endpoint and furthermore it automatically estimates the food quantity present on the picture.
      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Image sent in files"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: "Token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentationCompleteResponse'
          examples:
            Recognition complete response example:
              $ref: '#/components/examples/SegmentationCompleteResponseExample'
        400:
          description: "Bad request. Invalid Image/File, problems saving sent image"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Saved:
              message: "Image couldn't be saved."
              code: 701
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: [ ]

  /v2/image/recognition/complete/{model_version}:
    post:
      deprecated: true
      tags:
        - Image-based Food Recognition
      summary: 🔴 Food Dishes recognition ⏱⭐
      description: |
        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>


        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>


        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;
        
        
        **[NOTE] This endpoint is DEPRECATED. We recommend using the endpoint /image/segmentation/complete instead.**


        &nbsp;
        

        Given an image, provides the main food groups recognized and the list of most probable dishes. These dishes come with their names, the corresponding ids and the associated probabilities in three separated lists (see the response example below).
      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/SkipTypes'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Image sent in files"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: "token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecognitionCompleteResponse'
          examples:
            Recognition complete response example:
              $ref: '#/components/examples/RecognitionCompleteResponseExample'
        400:
          description: "Bad request. Invalid Image/File, problems saving sent image"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Saved:
              message: "Image couldn't be saved."
              code: 701
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: []

  ################################################
  ##  Dishes confirmation and feedback
  ################################################

  /v2/image/confirm/type/{model_version}:
    post:
      tags:
        - "Image-based Food Recognition"
      summary: "🔴 Food recognition only on a manually-specified food type ⏱⭐"
      description: |
        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>*


        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>


        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        **Note:** <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> will only take effect if a recognition process is triggered by choosing a food type recognition that was not previously applied on the same image.


        &nbsp;

        Depending on the detected food type, specific recognition algorithms are applied. This endpoint allows to
        correct the provided food type (if wrong) and thus, apply a new food recognition.

        This correction is intended to be performed by the final user when receiving the result.
      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Foodtype'
        description: "Parameters sent in data, in json format (type is an id of a food type)"
        required: true
      responses:
        200:
          description: "token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmTypeResponse'
          examples:
            Confirm type response example:
              $ref: '#/components/examples/ConfirmTypeResponseExample'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Type Value Error:
              message: "Wrong type value, it must be one of food, non_food, drinks or ingredients."
              code: 703
            Image Not Predicted:
              message: "The provided imageId does not have a prediction yet."
              code: 700
            Image Not Exists:
              message: "Image with id={} does not exist."
              code: 710
        403:
          description: 'You are not allowed to this method.'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified image id does not exist"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: []

  /v2/image/confirm/food_group/{model_version}:
    post:
      tags:
        - "Image-based Food Recognition"
      summary: "🔴 Confirm food group after applying image recognition."
      description: |

        With this endpoint, the user has the option to confirm which of the predicted food groups in the image are the correct ones. Please see endpoint '/v2/image/recognition/complete' for more information on food groups predictions.

        The user can provide a list of food groups for all the dishes present in the image. These food groups must be from the logmeal database. The complete list of available food groups can be obtained by calling the endpoint '/v2/dataset/foodGroups'.

        &nbsp;

      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Parameters sent in data, in json format"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmFoodGroup'
            example:
              {
                "imageId": 1268462,
                "confirmedFoodGroup": [ 2, 6 ],
              }
      responses:
        200:
          description: "token is valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmFoodGroupResponse'
          examples:
            Confirm dish response example:
              $ref: '#/components/examples/ConfirmFoodGroupResponseExample'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Predicted:
              message: 'The provided imageId does not have a prediction yet.'
              code: 700
            Confirmed food group Error:
              message: "The provided food group name does not belong to the currently available food groups."
              code: 726
        403:
          description: 'You are not allowed to this method.'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: [ ]

  /v2/image/confirm/dish/{model_version}:
    post:
      tags:
        - "Image-based Food Recognition"
      summary: "🔴 Confirm dish name after applying image recognition."
      description: |
        When using our recognition endpoints the most probable classes are returned concerning dish, drinks, sauces or ingredients (depending on the type).

        &nbsp;

        With this endpoint, the user has the option to confirm which one of the returned food classes is the correct one.


        &nbsp;


        By default, the source is set to 'logmeal' and an ID corresponding to an existent dish is expected. The 'source' can also take the value 'other' for specifying a free-text feedback for any dish that is not included in LogMeal's API. 
        Do note that if you confirm a dish with a free-text feedback (source 'other') it won't be taken into consideration
        when doing any calculation that is based on the dish (e.g. generating ingredients or nutritional information).
        

        &nbsp;


        If a food segmentation endpoint has been used then you have to provide a food item identifier for each of the confirmed dishes. This implies adding the extra parameter 'food_item_position'.
        This parameter consists of a list of elements, one per each confirmed dish, and it must include an integer identifying the segmented region it corresponds to (see 'food_item_position' in returned json for /segmentation endpoints).
        If you desire to confirm a dish that does not belong to any of the detected regions then a string has to be provided that will act as an unique identifier for that extra confirmed dish.

#        &nbsp;
#
#        From our point of view, a dish consists on one or more components that can be represented by a recipe. Whenever
#        a user is confirming multiple dishes from the same picture, we will always be considering it as if the user is
#        confirming classes for a single dish. This means that any information related to portion sizes will be evenly
#        weighted for each confirmed class. Here is an example (note that this examples are just for explanation purposes):
#        - A picture containing 'chicken breast' could have a portion size of 70g for 1 person.
#        - If the user confirms that the previously defined picture contains 'chicken breast' and 'french fries' the portion size won't
#        be calculated as 70g from the chicken breast plus 100g of the french fries. Instead it will be an average from both confirmed dishes,
#        resulting in a portion size of 85g of Chicken breast and French fries, with all the information related to this dish recalculated following the same logic (average instead of sum).


      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Parameters sent in data, in json format"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmFoodDish'
            example:
              {
                "imageId": 1268462,
                "confirmedClass": [110, "Red velvet donut"],
                "source": ["logmeal", "other"],
                "food_item_position": [ 1, 'extra_dish_1' ]
              }
      responses:
        200:
          description: "token is valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmDishResponse'
          examples:
            Confirm dish response example:
              $ref: '#/components/examples/ConfirmDishResponseExample'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Feedback Source Is Not Valid:
              message: "Parameter source is not valid. It must be one of: logmeal, google, other"
              code: 707
            Image Not Predicted:
              message: 'The provided imageId does not have a prediction yet.'
              code: 700
            Confirmed Class Error:
              message:  "The provided dish name does not belong to the current food type."
              code: 702
        403:
          description: 'You are not allowed to this method.'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

################################################
##  Ingredients and nutritional information
################################################

  /v2/nutrition/recipe/ingredients/{model_version}:
    $ref: './api/paths/nutrition/recipeIngredients.yaml'

  /v2/nutrition/recipe/nutritionalInfo/{model_version}:
    post:
      tags:
        - "Nutritional Information"
      summary: "🔴🔵 Identifies the nutritional information for the dishes on the image. ⏱"
      description: |
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint provides all the nutritional information of the provided imageId or class_id. Make sure you first 
        confirm the correct food items with the /confirm/dish endpoint before calling this. Otherwise, the top 1 predictions
        for each of the detected food item positions will be considered the correct ones and will be returned in this endpoint.

        &nbsp;
        
        If a food segmentation has been applied on the image (see /segmentation endpoints), then an extra attribute 
        named 'nutritional_info_per_item' will be returned in the response. This contains the detailed nutritional 
        information for each of the food segments/regions that have been detected or confirmed on the image.
        
        &nbsp;

        Some extra information related to the daily intake reference is also provided, which serves as a fast and simple way to
        compare the nutritional information of the intake with what is the global average intake expected from people (note that these are just approximations).

        The way the 'dailyIntakeReference' levels are generated is the following:
          - LOW - If the intake represents less than 20% of the daily reference value
          - MEDIUM - If the intake represents more than 20% and less than 35% of the daily reference value
          - HIGH - If the intake represents equal or more than 35% of the daily reference value
          - NONE - If the reference value could not be calculated or the nutritional indicator has the levels disabled.


        &nbsp;


        Unless an automated quantity recognition is done on the image or the /confirm/quantity endpoint has been used, all the information provided is scaled to the standard/average portion for a single person.


        &nbsp;


        Be aware that not all the entries of this response will contain nutritional information. If the images have not been confirmed or don't have any prediction on a dish level, the nutritional information won't be generated. If the element from the intake list has the flag 'hasNutritionalInfo' set to False, 'nutritional_info' won't be present in the object. Also, confirmed dishes that are not in the 'logmeal' database won't contribute to the nutritional information. They will still be returned in the 'foodNames' field, and will be represented with a null value in the 'ids' field.
      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Parameters sent in data, in json format. You can chose imageId or class_id parameter."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe_Nutri_Params'
      responses:
        200:
          description: |
            token is valid, recipe information is sent in response (JSON format).

            - "nutritional_info" will be empty if "hasNutritionaInfo" == False
            - "foodName" and "ids" will become a list if several dishes where recognized/confirmed (e.g. "foodName": [324, 435])

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NutritionalInfo'
          examples:
            Nutritional Info Example:
              $ref: '#/components/examples/NutritionalInfoResponseExample'

        400:
          description: "Bad request."
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/nutrition/confirm/ingredients:
    $ref: './api/paths/nutrition/confirmIngredients.yaml'
  /v2/nutrition/confirm/quantity:
    $ref: './api/paths/nutrition/confirmQuantity.yaml'

  ################################################
  ##  Recognized dishes and food groups
  ################################################

  /v2/dataset/dishes/{model_version}:
    $ref: './api/paths/dataset/dishes.yaml'

  /v2/dataset/foodGroups:
    get:
      tags:
        - "Dataset Information, Recognized Dishes and Others"
      summary: "⚫🔴🔵 Retrieve the complete list of available food groups ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


      &nbsp;


      This endpoint results a list of all the available food groups (also named food families). See /v2/image/recognition endpoints for more information."
      responses:
        200:
          description: "token is valid, food groups information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: integer
                    example: [1, 2, 3]
                  names:
                    type: array
                    items:
                      type: string
                    example: ['meat', 'dessert', 'dairy products']
        400:
          description: "Invalid syntax"
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/dataset/ingredients:
    get:
      tags:
        - "Dataset Information, Recognized Dishes and Others"
      summary: "⚫🔴🔵 Retrieve the complete list of ingredients that could appear in the recipes. ⏱"
      description: |
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint returns a complete list of the ingredients that could appear in our recipes. Take into account that to obtain recipe information
        from image predictions, you must have access to the Nutritional Information.
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: './api/parameters/query/cooking_measures.yaml'

      responses:
        200:
          description: "token is valid, ingredients list is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientsList"
        400:
          description: "Invalid syntax"
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/dataset/referenceIngredients:
    get:
      tags:
        - "Measures and Easy Modulation"
      summary: ⚫🔴🔵 Returns a list of ingredients that can be used as salt, sugar and oil for a dish.
      description:
        This endpoint returns a complete list of the ingredients that can be used as the user's choice of salt, sugar and oil. When calculating 
        recipe information we'll check if the user has defined any of these reference ingredients and use them instead of any other types of 
        salt, sugar & oil present in the recipe.
      parameters:
        - $ref: '#/components/parameters/Language'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceIngredientsResponse'
        '400':
          description: "Invalid syntax"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: "Unauthorized, invalid token"
        '403':
          description: 'You are not allowed to this method.'
        '404':
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: [ ]

  /v2/dataset/weightMeasures/dishes:
    $ref: './api/paths/dataset/dishWeightMeasures.yaml'
  /v2/dataset/weightMeasures/ingredients:
    $ref: './api/paths/dataset/ingredientWeightMeasures.yaml'

  /v2/dataset/foodGroupsFromDish:
    post:
      tags:
        - "Dataset Information, Recognized Dishes and Others"
      summary: "⚫🔴🔵 Get the list of food groups more commonly associated to a manually-specified dish id. ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


      &nbsp;


      Given a dish class_id, this endpoint returns the food groups associated to it. Deprecated name '/foodGroupFromDish'."
      parameters:
        - $ref: '#/components/parameters/Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                class_id:
                  type: integer
                  example: 241
#                dish:
#                  type: string
#                  example: 'spaghetti bolognese'
              required:
                - class_id
        description: "Parameters sent in data, in json format"
        required: true

      responses:
        200:
          description: "token is valid, food groups list is sent in response (JSON format)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: integer
                    example: [1, 2, 3]
                  names:
                    type: array
                    items:
                      type: string
                    example: ['meat', 'dessert', 'dairy products']
        400:
          description: "Invalid syntax"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Food Group Not Available:
              message: "The provided dish does not have a food group."
              code: 712
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []


  ################################################
  ##  APIUsers Profile Management
  ################################################
  /v2/profile/changeLanguage:
    post:
      deprecated: true
      tags:
      - APIUsers Profile Management
      summary: 🔴 Changes current user language
      description: >
        **[NOTE] This endpoint is DEPRECATED. We recommend using the endpoint POST /modifyuserProfileInfo instead.**
        
        
        &nbsp;
      

        This endpoint allows an APIUser to modify their assigned language, which will modify the language of the responses generated by our endpoints.
      requestBody:
        content:
          application/json:
            schema:
                type: object
                properties:
                  language:
                    type: string
                    example: 'eng'
                    enum: [spa, cat, eng, ita, nld, fre, ger, tur, gre]
        description: "Changes the APIUser's current default language. It must be a three-letter ISO 639-2/T code."
        required: true
      responses:
        '200':
          description: "Language has been successfully changed"
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: 'OK'
        403:
          description: 'You are not allowed to this method.'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            examples:
              Not allowed to this method:
                $ref: '#/components/schemas/Error403'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []
  /v2/profile/modifyUserProfileInfo:
    post:
      tags:
        - "APIUsers Profile Management"
      summary: "🔴 Modify the profile information."
      description: "This endpoint allows the APIUser to modify their profile information.

                     &nbsp;


                     Read the specification of the request body to see the available fields with their descriptions.


                     &nbsp;


                     This endpoint is the same as '/v2/users/modifyUserProfileInfo'."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileObject"
        description: "Parameters to be modified, all fields are optional. Null values will be ignored."
        required: true
      responses:
        '200':
          description: "The profile information has been successfully modified!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "The profile information has been successfully modified!"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Sex is not valid:
              message: "The provided sex value is not valid."
              code: 1205
            Lifestyle is not valid:
              message: "The provided lifestyle value is not valid."
              code: 1214
            Salt level is not valid:
              message: "The provided salt level value is not valid."
              code: 1215
            Sugar level is not valid:
              message: "The provided sugar level value is not valid."
              code: 1216
            Portion size is not valid:
              message: "The provided portion size value is not valid."
              code: 1217
            Birth format not valid:
              message: "The provided birth value is wrong. Follow the format 'YYYY-MM-DD'"
              code: 1218
            diet label not valid:
              message: "The provided diet label value is not valid"
              code: 1607
            food restriction not valid:
              message: "The provided food restriction value is not valid'"
              code: 1608


        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
      security:
        - Bearer: []

  /v2/profile/getUserProfileInfo:
    get:
      tags:
        - "APIUsers Profile Management"
      summary: "🔴 Get the user's profile information."
      description: "This endpoint returns the information from the APIUser performing the request.


                   &nbsp;


                   Read the specification of the response body to see the available fields with their descriptions.


                   &nbsp;


                   This endpoint is the same as '/v2/users/getUserProfileInfo'."
      responses:
        200:
          description: "The profile information has been successfully obtained"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileObject'
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
      security:
        - Bearer: []

  /v2/nutrition/getRecommendedDailyIntake:
    get:
      tags:
        - "Nutritional Information"
      summary: "🔴 Get a recommendation about the daily macronutrient intake based on the user information. ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


       &nbsp;


       Returns a daily intake recommendation for calories and the main macronutrients. The recommendations are
       based on the user's profile information. If any user profile information is missing, the results will be based on the average worldwide.
       If the user has nutritional goals created, they will be returned with the recommendation. Check the documentation on '/v2/nutritionalGoals' for more information.
              
       
       &nbsp;
       
       
      It also returns two ranges. range and warning_range.
      range is where the ideal intake is, ok range. warning_range is where there is still room for improvement, fairly ok range.
      If the nutrient range only has a minimum value, above the minimum, ok range. All the values below the warning_range will be considered bad.
      If the nutrient range only has a maximum value, under the maximum, ok range. All the values above the warning_range will be considered bad.
      If the nutrient has minimum and maximum values, between them, ok range. All the values under the lower warning_range and values above the bigger warning_range will be considered bad.
       
       
       &nbsp;
       
       
       If the company has a Monitor or higher plan, they will also get recommendation values for the rest of available nutrients.
       Just like in /v2/nutritionalGoals/autocompute, some nutrients do not give out and automatic calculation. They will be in the response as null. See /v2/nutritionalGoals/autocompute's documentation for more information.


       &nbsp;


       If the user does not have a 'sex' assigned or has one which is not 'male' nor 'female' an average between these two will be used for all the calculations.


       &nbsp;


       Note that the output of this endpoint is based on a personalized but automated recommendation based on the <a href='https://en.wikipedia.org/wiki/Harris%E2%80%93Benedict_equation' target='_blank'>Harris-Benedict formula</a>. A professional dietist should be consulted by the customer in order to assure it fits the user's needs."
      parameters:
        - $ref: '#/components/parameters/Language'
      responses:
        200:
          description: "The recommendation has been successfully obtained"
          content:
            application/json:
              schema:
                type: object
                properties:
                  daily_recommendation:
                    $ref: "#/components/schemas/NutrientCodeSample"
                description: 'JSON containing the recommended daily intake of each of the main nutrients (calories, and the amount of fat/protein/carbs that the user should ingest to reach that goal), as well as the Nutritional Goals the user has assigned. If the company has access to /nutritionalGoals/autocompute it will also return the values for the rest of nutrient recommendations.   '
                example: {
                  "daily_recommendation": {
                    "CHOCDF": {
                      "average_value": 231.55751953125,
                      "label": "Carbs",
                      "range": [
                        219.97964355468747,
                        243.13539550781252
                      ],
                      "unit": "g"
                    },
                    "ENERC_KCAL": {
                      "average_value": 2058.2890625,
                      "label": "Energy",
                      "range": [
                        1955.3746093749999,
                        2161.203515625
                      ],
                      "unit": "kcal"
                    },
                    "FAT": {
                      "average_value": 57.17469618055556,
                      "label": "Fat",
                      "range": [
                        54.31596137152778,
                        60.03343098958334
                      ],
                      "unit": "g"
                    },
                    "PROCNT": {
                      "average_value": 154.3716796875,
                      "label": "Protein",
                      "range": [
                        146.653095703125,
                        162.09026367187502
                      ],
                      "unit": "g"
                    }
                  }
                }

        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
      security:
        - Bearer: []


  ################################################
  ##  API and Models Versioning Functions
  ################################################

  /v2/version/activeModels:
    get:
      tags:
        - "API and Models Versioning Functions"
      summary: "⚫🔴 Retrieves the list of active Models/Algorithms versions. ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


      &nbsp;


      This endpoint returns a list containing the versions of the recognition models that are currently active. The versions provided are sorted, meaning that the first one is the most recent and the last one is the least recent.


      &nbsp;


      You can fix the version in our recognition endpoints in order to always receive the same list of classes,
      although <b>WE RECOMMEND NOT FIXING THE VERSION</b> in order to obtain the best results possible as we update our models.
      "
      responses:
        200:
          description: "token is valid, model versions list is sent in response (JSON format)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                example:
                  names: [
                    "v1.0",
                    #"v0.9"
                  ]
        400:
          description: "Invalid syntax"
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []


  /v2/version/activeAPIs:
    get:
      tags:
        - "API and Models Versioning Functions"
      summary: "⚫🔴 Retrieves the list of active API versions. ⏱"
      description: |
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint returns a list containing the API versions that are currently active.

        Changing the version of an endpoint could change its inputs/outputs. Using the most recent API version is always recommended, as the latest
        versions will provide more and better functionalities.
      responses:
        200:
          description: "token is valid, API versions list is sent in response (JSON format)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                example:
                  names: [
                    "v2",
                    "v1",
                    "v0"
                  ]
        400:
          description: "Invalid syntax"
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/version/allModels:
    get:
      tags:
        - "API and Models Versioning Functions"
      summary: "⚫🔴 Retrieves all available models grouped by version. ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


      &nbsp;


      This endpoint returns a list of the available models with their available versions."
      responses:
        200:
          description: "token is valid, classes information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllModelsResponse'
          examples:
            Get all models response example:
              $ref: '#/components/examples/AllModelsResponseExample'
        400:
          description: "Invalid syntax"
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: []

  /v2/intake/{imageId}:
    delete:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Remove an uploaded intake."
      description: "
            Given an image id, this endpoint allows to remove its existent upload and all the information related to it (nutritional information).
            "
      parameters:
        - in: path
          name: imageId
          schema:
            type: integer
          required: true
          description: ID of the image to be removed. The image ID is obtained in the recognition response. It can be obtained through the nutritional information history endpoint too. The user must have access to the image in order to delete it.
      responses:
        200:
          description: "Intake successfully deleted!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/716'
                  - $ref: '#/components/schemas/1208'
          examples:
            UserIsNotImageOwner:
              $ref: '#/components/examples/example_716'
            NotAllowedToRemoveImage:
              $ref: '#/components/examples/example_1208'
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/710'
          examples:
            ImageDoesNotExist:
              $ref: '#/components/examples/example_710'
      security:
        - Bearer: [ ]

  /v2/intake/manualInput:
    post:
      deprecated: true
      tags:
        - "Intake History"
      summary: "🔴 Create a manual intake (without image-based prediction)"
      description: >
        **[NOTE] This endpoint is DEPRECATED. We recommend using the endpoint POST /intake/manualInput/{userId} instead.**
        
        
        &nbsp;
        
        
        Endpoint callable by APIUser only.
          

        &nbsp;


        Creates a manual intake consisting of a consumed dish or a list of consumed food groups, without using an image-based prediction. This is an alternative to the /recognition endpoints.


        &nbsp;


        This endpoint can be used to add an intake without the need of an image nor applying the recognition process.


        &nbsp;


        You must provide either the parameter 'class_ids' or the parameter 'food_group_ids', but never both.

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputManualDishBody"
        description: "Parameters to create a manual dish."
        required: true
      responses:
        200:
          description: "Manual input successfully created!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseManualInput'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/100-ManualInput-required'
                  - $ref: '#/components/schemas/100-date'
                  - $ref: '#/components/schemas/100-ManualInput-list'
                  - $ref: '#/components/schemas/100-ManualInput-empty'
                  - $ref: '#/components/schemas/100-ManualInput-integers'
          examples:
            FormIsNotValid - Field required:
              $ref: '#/components/examples/example_100-ManualInput-required'
            FormIsNotValid - Timestamp format:
              $ref: '#/components/examples/example_100-date'
            FormIsNotValid - Field must be a list:
              $ref: '#/components/examples/example_100-ManualInput-list'
            FormIsNotValid - List must not be empty:
              $ref: '#/components/examples/example_100-ManualInput-empty'
            FormIsNotValid - List values must be integers:
              $ref: '#/components/examples/example_100-ManualInput-integers'

        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/717'
          examples:
            FoodClassIdNotValid:
              $ref: '#/components/examples/example_717'
      security:
        - Bearer: [ ]

  /v2/intake/manualInput/assign:
    post:
      deprecated: true
      tags:
        - "Intake History"
      summary: "🔵 Create a manual intake (without image-based prediction) and assign it to a set of specific APIUsers."
      description: "
        **[NOTE] This endpoint is DEPRECATED. We recommend using the endpoint POST /intake/manualInput/bulkAssign instead.**


        &nbsp;


        Endpoint callable by APIUserManager only.


        &nbsp;


        Creates a manual intake consisting of a consumed dish or a list of consumed food groups, without using an image-based prediction. This is an alternative to the /recognition endpoints. This endpoint can be used to add an intake without the need of an image nor applying the recognition process. The manual intake can be assigned simultaneously to multiple APIUsers.


        &nbsp;


        You must provide either the parameter 'class_ids' or the parameter 'food_group_ids', but never both.
        "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputManualAssignDishBody"
        description: "Parameters to create a manual dish."
        required: true
      responses:
        200:
          description: "Manual input successfully created!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseManualInputAssigned'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/100-ManualInput-required'
                  - $ref: '#/components/schemas/100-date'
                  - $ref: '#/components/schemas/100-ManualInput-list'
                  - $ref: '#/components/schemas/100-ManualInput-empty'
                  - $ref: '#/components/schemas/100-ManualInput-integers'
          examples:
            FormIsNotValid - Field required:
              $ref: '#/components/examples/example_100-ManualInput-required'
            FormIsNotValid - Timestamp format:
              $ref: '#/components/examples/example_100-date'
            FormIsNotValid - Field must be a list:
              $ref: '#/components/examples/example_100-ManualInput-list'
            FormIsNotValid - List must not be empty:
              $ref: '#/components/examples/example_100-ManualInput-empty'
            FormIsNotValid - List values must be integers:
              $ref: '#/components/examples/example_100-ManualInput-integers'

        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/717'
                  - $ref: '#/components/schemas/1201'
          examples:
            FoodClassIdNotValid:
              $ref: '#/components/examples/example_717'
            APIUserDoesNotExist:
              $ref: '#/components/examples/example_1201'
      security:
        - Bearer: [ ]

  /v2/intake/manualInput/{userId}:
    $ref: './api/paths/intakes/manualInput.yaml'
  /v2/intake/manualInput/bulkAssign:
    $ref: './api/paths/intakes/manualInputBulk.yaml'

  /v2/intake/modifyNutritionalInfo:
    post:
      tags:
        - Intake History
      summary: 🔴🔵 Modify the nutritional info of an uploaded intake
      description: >
          Modify the nutritional information indicators of a previously uploaded intake (image). The changes will take 
          place on the /history/getIntakesList endpoint or any other endpoint that retrieves the nutritional 
          information for an image.

          &nbsp;
          
          A different format has to be provided for the submitted nutritional information depending on whether the
          image has a prediction of type food recognition or of type food segmentation. 
          
          - In case the image at hand has a **prediction of type segmentation**, then you have to provide the 
          parameter 'nutritional_indicators_per_item' containing an object where keys are food item identifiers
          and values are lists of nutritional codes and values.
          
          - In case the image at hand has a **prediction of type recognition**, then you have to provide the 
          parameter 'nutritional_indicators' containing a list of nutritional codes and values.
          
          
          Check the provided examples for additional information.

          &nbsp;

          Note that if you confirm a new list of dishes for this intake or you apply any ingredient modification, 
          the nutritional information will be re-calculated based on the new list of dishes or ingredients. 
      requestBody:
        $ref: "#/components/requestBodies/ModifyNutritionBody"
      responses:
        200:
          description: Nutritional information modified successfully!
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseModifyNutritionalInfo'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/716'
                  - $ref: '#/components/schemas/1223'
          examples:
            UserIsNotImageOwner:
              $ref: '#/components/examples/example_716'
            NotAllowedToUpdateImage:
              $ref: '#/components/examples/example_1223'
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/710'
          examples:
            Image does not exist:
              $ref: '#/components/examples/example_710'

      security:
        - Bearer: [ ]

  /v2/intake/modifyTimestamp:
    post:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Modify the timestamp of an uploaded intake"
      description: "
        Modify the timestamp of a previously uploaded intake (image). By default the images are created with the moment of the
        request as the timestamp (taking into consideration the user's assigned timezone).


        &nbsp;


        This endpoint can be used to move intakes to a moment of your choice, so it can be taken into account properly
        in the nutritional intake history.
        "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyImageTimestampBody"
        description: "Parameters to update an intake timestamp."
        required: true
      responses:
        200:
          description: "Image timestamp successfully updated!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/100-date'

          examples:
            FormIsNotValid - Timestamp format:
              $ref: '#/components/examples/example_100-date'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/716'
                  - $ref: '#/components/schemas/1223'
          examples:
            UserIsNotImageOwner:
              $ref: '#/components/examples/example_716'
            NotAllowedToUpdateImage:
              $ref: '#/components/examples/example_1223'
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/710'
          examples:
            Image does not exist:
              $ref: '#/components/examples/example_710'

      security:
        - Bearer: [ ]

  /v2/intake/modifyOccasion:
    post:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Modify the occasion of an uploaded intake"
      description: "
          Modify the occasion of a previously uploaded intake (image). By default the images have an occasion assigned based on the moment of the
          request as the timestamp (taking into consideration the user's assigned timezone and if the user belongs to a company, in this case,
          if the company has defined occasions).


          &nbsp;


          This endpoint can be used to group the intakes for each occasion of the day, so it can be taken into account,
          for example, for displaying purposes.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyImageOccasionBody"
        description: "Parameters to update an intake occasion."
        required: true
      responses:
        200:
          description: "Image occasion successfully updated!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1011'
                  - $ref: '#/components/schemas/1639'
          examples:
            InvalidDefaultOccasion:
              $ref: '#/components/examples/example_1011'
            InvalidCompanyOccasion:
              $ref: '#/components/examples/example_1639'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/716'
                  - $ref: '#/components/schemas/1223'
          examples:
            UserIsNotImageOwner:
              $ref: '#/components/examples/example_716'
            NotAllowedToUpdateImage:
              $ref: '#/components/examples/example_1223'
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/710'
          examples:
            Image does not exist:
              $ref: '#/components/examples/example_710'

      security:
        - Bearer: [ ]


  /v2/intake/createOccasionGroup:
    post:
      tags:
        - "Custom Occasions"
      summary: "⚫🔵 Create a new occasion group"
      description: "
          Create an occasion group. Update the company occasions by blocks of occasions (occasion group). Assign a 
          custom name and time range to each of the new occasions.


          &nbsp;


          In every block, there must be one default occasion with no time range defined.


          &nbsp;


          maps_to_occasion will contain a direct mapping between the default system occasions and the one that is being
          created. It is necessary in order to give recommendations using the company occasions. 


          &nbsp;


          Everytime this endpoint is called with a valid occasion group, it gets set as the active group and if there 
          already was an active one it gets set to inactive.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOccasionGroupBody"
        description: "Parameters to create an occasion group."
        required: true
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_occasions_and_ids:
                    type: object
                    additionalProperties:
                      type: integer
                      example: 14
                    example: morningmeal

              example:
                new_occasions_and_ids:
                  morningmeal: 13
                  middaymeal: 14
                  lastmeal: 15
                  snack: 16

        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/100_Invalid_Occasions'
                  - $ref: '#/components/schemas/100_Invalid_Occasion'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Name'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Default'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Mapping'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Attribute'
                  - $ref: '#/components/schemas/100_Repeated_Occasion_Name'
                  - $ref: '#/components/schemas/100_Name_Not_Provided'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Times'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Times_Order'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Default_True'
                  - $ref: '#/components/schemas/100_Missing_Default_Occasion'
                  - $ref: '#/components/schemas/100_Multiple_Default_Occasions'
                  - $ref: '#/components/schemas/100_Overlapping_Occasions'
                  - $ref: '#/components/schemas/100-time-only'

        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:

          examples:

        404:
          description: "Not found"

      security:
        - Bearer: [ ]


  /v2/intake/getOccasionGroups:
    get:
      tags:
        - "Custom Occasions"
      summary: "⚫🔵🔴 Get existing occasion groups"
      description: |
        Get all the occasion groups for the company in the request. It will return the active and inactive occasion groups and the system's default occasions, containing information about each occasion group and each occasion.

        A time range can be specified as query parameters (init_time and end_time), and it will only return the occasion groups that fall within the specified time range. This applies only to the inactive occasions. Active occasions will always be included in the response. If no time range is specified, all occasion groups will be returned.

        If no occasion groups have been defined, it will only return the system's default occasions.

      parameters:
        - in: query
          name: init_time
          schema:
            type: string
            format: date
            example: "2023-03-20"
          description: "Start date of the time range to filter occasion groups."
        - in: query
          name: end_time
          schema:
            type: string
            format: date
            example: "2023-03-24"
          description: "End date of the time range to filter occasion groups."

      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOccasionGroupsResponse'
          examples:
            $ref: '#/components/examples/GetOccasionGroupsResponseExample'

        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/100-date-only'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_Times_Order'
                  - $ref: '#/components/schemas/1100_init_time/end_time_Required'

        401:
          description: "Unauthorized, invalid token."

        403:
          description: "Forbidden"

        404:
          description: "Not found"

      security:
        - Bearer: [ ]


  /v2/intake/createOccasionTranslation:
    post:
      tags:
        - "Custom Occasions"
      summary: "⚫🔵 Create a new occasion translation"
      description: "
          Create an occasion translation for a defined occasion in a given language. Translations will belong
          to a occasion. If a new occasion group is created the translations will be stored but not active
          anymore.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOccasionTranslationBody"
        description: "Parameters to create an occasion group."
        required: true
      responses:
        200:
          description: "Occasion translation created/updated successfully!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/708'
                  - $ref: '#/components/schemas/100_No_Occasions_Defined_For_Company'
                  - $ref: '#/components/schemas/100_Invalid_Occasion_id'

        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
          $ref: ''
          content:
            application/json:
              schema:
                oneOf:

          examples:

        404:
          description: "Not found"

      security:
        - Bearer: [ ]


  /v2/history/getTotalIntakeByDay/{date}:
    get:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Get the total nutrient intake computed from the images uploaded on a given date (in a span of 24h). ⏱"
      description: "
      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


       &nbsp;


       Returns the sum of the nutrient intakes, obtained from the images uploaded to our API during the timespan of the day provided.
       This timespan takes into account the user's timezone, so the results will always contain all the information for
       the given day based on the user's current timezone (UTC by default).


       &nbsp;


       Note that the output of this endpoint is based on approximations obtained from the user's images and should always be supervised by an expert."
      parameters:
        - in: path
          name: date
          schema:
            type: date
          required: false
          description: Optional. Date to retrieve the information from. Using the format 'YYYY-MM-DD'. If this is not provided it will return the information for the current day.
        - $ref: '#/components/parameters/UserIdOptional'
        - $ref: '#/components/parameters/Language'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_intake_day:
                    $ref: "#/components/schemas/NutrientCodeSample"
                description: 'JSON containing the total intake of calories, and the amount of fat/protein/carbs that the user has obtained from the images it provided during the day. The responses will use the nutrient codes as keys.'
                example: {
                    "total_intake_day": {
                      "CHOCDF": {
                        "amount": 23.45,
                        "label": "Carbohydrates",
                        "unit": "g"
                      },
                      "ENERC_KCAL": {
                        "amount": 213.4,
                        "label": "Energy",
                        "unit": "kcal"
                      },
                      "FAT": {
                        "amount": 2.3,
                        "label": "Fats",
                        "unit": "g"
                      },
                      "PROCNT": {
                        "amount": 3.56,
                        "label": "Protein",
                        "unit": "g"
                      }
                    }
                  }
        400:
          description: "Bad request."
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
      security:
        - Bearer: []

  /v2/history/getIntakesList:
    get:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 List all user intakes with their nutritional information and ingredients between two dates. ⏱"
      description: "
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint provides a history of the user's intakes between two dates based on the content of the images the
        user has uploaded during that period of time.


        &nbsp;


        The response contains a list with information about every single intake uploaded by the user (containing the
        timestamp, occasion, nutritional information, ingredients list and the URL to the image*), as well as the total intake of the main
        nutrients obtained from the images (calories, carbohydrates, fat and protein). All elements in the intakes list 
        are sorted from older to newer.


        &nbsp;
        
        
        If a food segmentation has been applied on one of the images (see /segmentation endpoints), then three extra 
        attributes will be returned in the response. The attribute 'nutritional_info_per_item', which contains the 
        detailed nutritional information for each of the food segments/regions that have been detected or confirmed 
        on the image; 'recipe_per_item', which contains the list of ingredients for each segment/region detected;
        and 'segmentation_data', which contains the list of food segments/regions that have been detected 
        automatically on the image. Note that the segmentation_data might not be directly applicable to the uploaded 
        image size. The segmentation pixel values are scaled depending on the 'processed_image_size' values provided 
        for each of the images (the images might be sometimes resized depending on the needs of the food recognition 
        algorithms used).


        &nbsp;


        Be aware that not all the entries of this response will contain nutritional information and ingredients list. 
        If the images have not been confirmed or don't have any prediction on a dish level, the nutritional information won't be generated.
        If the element from the intake list has the flag 'hasNutritionalInfo' set to False, 'nutritional_info' won't be
        present in the object. Also, confirmed dishes that are not in the 'logmeal' database won't contribute to the nutritional information. They
        will still be returned in the 'foodNames' field, and will be represented with a null value in the 'ids' field.


        &nbsp;
        
        
        If Food Waste Detection services are included in your LogMeal Subscription, an extra field named 'food_waste' 
        will be included for each of the intakes or images returned by this endpoint. If there is currently no waste
        image assigned to a specific intake, then the field 'food_waste' will take the value None/null. Otherwise,
        the full information included for each intake will be also provided for the corresponding food waste image.
        The 'food_waste' contains an additional attribute named 'matches_mapping_pre_to_waste', which provides a mapping
        between the preconsumption image 'food_item_position's to the waste image original 'food_item_position's 
        predictions provided inside 'segmentation_data'. This allows to reference the predicted items positions in the image.
        If some element is mapped to null means that the food item is not present in the waste image, thus it was completely consumed.
        
        
        &nbsp;


        <span style='font-weight: bold'> Note: </span> for security purposes, the URLs provided to load the images have
        an expiration time of 1h since their creation. If they get expired you will have to request a new url.
        "
      parameters:
        - $ref: '#/components/parameters/DateFromRequired'
        - $ref: '#/components/parameters/DateToRequired'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/UserIdOptional'
      responses:
        200:
          description: "Intakes list successfully retrieved!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetIntakesList'
          examples:
            Intakes List Example:
              $ref: '#/components/examples/GetIntakesListExample'

        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Date format is not valid:
              message: "The date must be formatted as '%Y/%m/%d, %H:%M:%S'."
              code: 100
            Date range is not valid:
              message: "'date_to' must be greater (in time) than 'date_from'"
              code: 100
      security:
        - Bearer: [ ]

  /v2/history/getDailySummary:
    get:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Obtain a daily intake summary. ⏱"
      description: "
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint provides a daily summary of a user given a date. For each day it informs of: 
        
        &nbsp;
        
          - Daily calorie distribution: How many calories were eaten throughout the day by occasions. Grams and % of the total.
          
        &nbsp;
        
          - Daily energy: For calories, carbs, fat and protein the amount reported and recommended amount.
          
        &nbsp;
        
          - Daily portions: Recommended daily portions for dairy products, grains and tubers, vegetables and fruit. For each one it returns a variable whether the goal was achieved, the number of eaten portions and the recommended portion range.
        "
      parameters:
        - $ref: '#/components/parameters/DateRequired'
        - $ref: '#/components/parameters/UserIdOptional'
      responses:
        200:
          description: "OK"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDailySummary'
          examples:
            Intakes List Example:
              $ref: '#/components/examples/DailySummaryExample'

        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Date format is not valid:
              message: "The date must be formatted as '%Y/%m/%d"
              code: 100
      security:
        - Bearer: [ ]

  /v2/history/getWeeklySummary:
    get:
      tags:
        - "Intake History"
      summary: "⚫🔴🔵 Obtain a weekly intake summary. ⏱"
      description: "
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint provides a weekly summary of a user given a date. Any date can be passed. The information returned will be of the week that day belongs to. 
        For every week it informs of:

        &nbsp;

          - Day by day summary: Summary of a specific day (very similar to the response of /v2/history/getDailySummary).

        &nbsp;

          - Week: Returns the monday and sunday date of the week the passed date belongs to.
        
        &nbsp;
        
          - Week averages: For every macronutrient and the energy (carbs, fat, protein and calories) the daily average reported along with the recommended value and the achieved percentage.
        
        &nbsp;
        
          - Weekly occasion distribution: For every reported occasion it returns the total calories reported along with the percentage they represent of the total week calories.

        &nbsp;

          - Weekly portions: Recommended weekly portions for legumes, fish, eggs, nuts, meat and red meat. For each one it returns a variable with a color whether the goal was achieved, the number of eaten portions and the recommended portion range. Transparent color means there is a minium defined but it has not been achieved. Green means the eaten portions matches the recommendation. Red the rest of cases.
        "
      parameters:
        - $ref: '#/components/parameters/DateRequired'
        - $ref: '#/components/parameters/UserIdOptional'
      responses:
        200:
          description: "OK"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWeeklySummary'
          examples:
            Intakes List Example:
              $ref: '#/components/examples/WeeklySummaryExample'

        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Date format is not valid:
              message: "The date must be formatted as '%Y/%m/%d"
              code: 100
      security:
        - Bearer: [ ]

  /v2/nutritionalGoals:
    get:
      tags:
        - "Nutritional Goals"
      summary: "⚫🔴🔵 Get all the existent daily goals from a user."
      description: "
              Retrieve the previously created intake goals. If this endpoint is called by an APIUser it will return its
              current nutritional goals.

              If this endpoint is called by an APICompany/APIUserManager an extra parameter with the ID of the user to
              get the information from is required.
              "
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          required: false
          description: Parameter only required to APICompanies and APIUserManagers. ID of the user ID to get the goals from.
        - $ref: '#/components/parameters/Language'
      responses:
        200:
          description: "Nutritional goal successfully deleted!"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNutritionalGoalsResponse'
#            examples:
#              Recognition type response example:
#                $ref: '#/components/examples/RecognitionTypeResponseExample'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1201'
          examples:
            APIUserDoesNotExist:
              $ref: '#/components/examples/example_1201'
      security:
        - Bearer: [ ]
    post:
      tags:
        - "Nutritional Goals"
      summary: "⚫🔴🔵 Create a daily goal for a specific nutrient."
      description: "
        Create a daily intake goal for an specific nutritional indicator. The nutritional goals a user has will be taken
        into consideration to generate the intake recommendation (/v2/nutrition/getRecommendedDailyIntake). If a goal for the
        given nutrient already exists, it will be updated.


        &nbsp;


        Note that creating a goal for the daily calorie intake ('ENERC_KCAL') will modify the amount of the recommended
        main nutrients the user should ingest, but the creation of goals for the main nutrients won't effect the total
        calories the user should ingest. Be careful when creating goals, make sure the goals match properly the relationship
        between all the nutritional indicators (e.g. An increment of calorie intake, implies an increment of carbohydrates, fats and protein).


        &nbsp;


        A nutritional goal consists on two values that determine the quantity range the users should ingest through
        their meals.


        &nbsp;


        The available indicators with their respective units can be found by using the endpoint '/v2/info/availableNutrients'.


        &nbsp;


        Any custom nutritional indicator defined can also be set as a goal.
        "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NutritionalGoalsBody"
        description: "Parameters to create the nutritional goal. Managers/APICompanies can provide an APIUser ID to modify a specific user's goals."
        required: true
      responses:
        200:
          description: "Nutritional goal successfully created!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNutritionalIndicator'
      security:
        - Bearer: [ ]
    delete:
      tags:
        - "Nutritional Goals"
      summary: "⚫🔴🔵 Delete an existent daily goal for a specific nutrient."
      description: "
          Delete a previously created intake goal, for a specific nutrient.
          "
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          required: false
          description: Parameter only required to APICompanies and APIUserManagers. ID of the user ID to get the goals from.
        - in: query
          name: nutrient_code
          schema:
            type: string
            enum: [ "CA", "CHOCDF", "CHOLE", "ENERC_KCAL", "FAMS", "FAPU", "FASAT", "FAT", "FATRN", "FE", "FIBTG", "FOLAC", "FOLDFE", "FOLFD", "K", "MG", "NA", "NIA", "P", "PROCNT", "RIBF", "SUGAR", "SUGAR.added", "THIA", "TOCPHA", "VITA_RAE", "VITB12", "VITB6A", "VITC", "VITD", "VITK1", "ZN", 'F20D5', 'F22D6', 'F18D3CN3']
          required: true
          example: "VITC"
          description: Code of the nutritional indicator. Read the endpoint description to find all the options with their related unit.

      responses:
        200:
          description: "Nutritional goal successfully deleted!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Nutrient code does not exist:
              $ref: '#/components/schemas/ErrorNutritionalIndicator'
            Nutritional goal does not exist:
              $ref: '#/components/schemas/ErrorNutritionalGoalDoesNotExist'
      security:
        - Bearer: [ ]

  /v2/nutritionalGoals/autocompute:
    post:
      tags:
        - "Nutritional Goals"
      summary: "🔵⚫ Autocompute a daily goal for a specific list of nutrients."
      description: "
        Automatically computes and posts a daily intake goal given a list of nutrients and a user. There is an optional 
        force parameter that will not take into consideration if the user had previous goals for the nutrients in the 
        list and will recompute and update them. Otherwise the nutritional goals a user has will be taken into 
        consideration and won't be updated. If force is not true only the nutrients in the nutrient list that don't have
        a goal defined for the user will be calculated.


        &nbsp;


        The new calculations will be based on the information the user has provided. If the user has 'sex' and 'birth'
        defined, they will be more accurate. Otherwise, the new nutritional goals will be calculated using averages with
        the provided information.
        

        &nbsp;


        If the nutrient list is empty or it isn't passed all nutrient goals will be recalculated if force is true. 
        Otherwise only the ones missing in the user's goals.
        If force is not passed it will be false by default.
        
        
        &nbsp;


        The available indicators with their respective units can be found by using the endpoint 
        '/v2/info/availableNutrients'.
        
        
        &nbsp;


        The following nutrients do not give an autocalculation. They will appear as null in the response (manual goal can still be set):
        F20D5, F22D6, FOLAC, FOLFD.
        "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutocomputeNutrientsBody"
        description: "Parameters to autocompute the nutritional goals"
        required: true
      responses:
        200:
          description: "Nutritional goals successfully calculated!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNutritionalIndicator'
      security:
        - Bearer: [ ]

  /v2/measure:
    get:
      tags:
        - "Body Measures"
      summary: "⚫🔴🔵 Get all the existent body measures from a company."
      description: "
                Retrieve the previously created body measures.
                "
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBodyMeasuresResponse'
          examples:
            GetBodyMeasureExampleResponse:
              $ref: '#/components/examples/GetBodyMeasureExampleResponse'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

    post:
      tags:
        - "Body Measures"
      summary: "⚫🔵 Create a body measure for a company."
      description: "
          Create a body measure for a company.


          &nbsp;


          A body measure consists of a name and its unit.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBodyMeasure"
        description: "Parameters to create the body measure."
        required: true
      responses:
        200:
          description: "Body measure created successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/1645_exists'
      security:
        - Bearer: [ ]

    delete:
      tags:
        - "Body Measures"
      summary: "⚫🔵 Delete an existent body measure."
      description: "
            Delete a previously created body measure.
            "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBodyMeasureBody"
        description: "Parameters to delete the body measure."
        required: true
      responses:
        200:
          description: "Body measure deleted successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/1645_not_exists'
      security:
        - Bearer: [ ]

  /v2/user_measure:
    get:
      tags:
        - "Body Measures"
      summary: "🔴🔵 Get user body measures values."
      description: "
                Retrieve the previously created user body measures.
                "
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          required: false
          description: Parameter only required to APIUserManagers.
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserBodyMeasuresResponse'
          examples:
            GetUserBodyMeasuresExampleResponse:
              $ref: '#/components/examples/GetUserBodyMeasuresExampleResponse'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

    post:
      tags:
        - "Body Measures"
      summary: "🔴🔵 Insert a value for a user measurement."
      description: "
          Insert a body measure for a user.


          &nbsp;


          A user body measure consists of a name for the measure, a value and a timestamp (optional). If the timestamp 
          is not provided the actual timestamp will be used.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUserBodyMeasure"
        description: "Parameters to insert the user body measure."
        required: true
      responses:
        200:
          description: "User body measure inserted successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/100-date'
                  - $ref: '#/components/schemas/1645_not_exists'
      security:
        - Bearer: [ ]

    delete:
      tags:
        - "Body Measures"
      summary: "🔴🔵 Delete an existent user body measure."
      description: "
            Delete a previously created user body measure.


            &nbsp;
  
  
            If timestamp is not provided all the measures with the passed name will be deleted.
            "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserBodyMeasureBody"
        description: "Parameters to delete the user body measure."
        required: true
      responses:
        200:
          description: "User body measure deleted successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/100-date'
                  - $ref: '#/components/schemas/1645_not_exists'
      security:
        - Bearer: [ ]

  /v2/custom_nutritional_indicator:
    get:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Get all the existent custom nutritional indicators."
      description: "
                Retrieve the previously created custom nutritional indicators.
                
                Get all of them or just the one passed as a parameter.
                "
      parameters:
        - in: body
          name: code
          schema:
            type: string
            example: "RSPBRRY_KET"
          required: false
          description: Parameter only required to get a specific indicator. If not provided all the available ones will
                       be retrieved.
        - $ref: '#/components/parameters/Language'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNutritionalCustomIndicatorsResponse'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_defined_indicators'
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
                  - $ref: '#/components/schemas/1641_default_indicator'
                  - $ref: '#/components/schemas/708'
      security:
        - Bearer: [ ]

    post:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Create a custom nutritional indicator."
      description: "
          Create a custom nutritional indicator. They will be added to the available indicators and can be used, for example, to set goals or to be present in a custom recipe's nutritional information. 


          &nbsp;


          The available indicators with their respective units can be found by using the endpoint '/v2/info/availableNutrients'.
          "
      parameters:
        - in: body
          name: body
          required: false
          description: JSON object containing the attributes of the new custom nutritional indicator.
          schema:
            type: object
            properties:
              code:
                type: string
                example: "RSPBRRY_KET"
              unit:
                type: string
                example: "mg"
              default_label:
                type: string
                example: "Raspberry Keatons"

      responses:
        200:
          description: "Nutritional indicator successfully created"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_defined_indicators'
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
                  - $ref: '#/components/schemas/1641_default_indicator'
      security:
        - Bearer: [ ]

    delete:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Delete an existent custom nutritional indicator."
      description: "Delete a previously created custom nutritional indicator.


          &nbsp;


          If there is any nutritional goal defined for that custom indicator it will be deleted"
      parameters:
        - in: query
          name: code
          schema:
            type: string
            example: "RSPBRRY_KET"
          required: true
          description: Code of the custom nutritional indicator to be deleted.
      responses:
        200:
          description: "Nutritional indicator successfully deleted"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
      security:
        - Bearer: [ ]

    patch:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Patch an existent custom nutritional indicator."
      description: "Patch a previously created custom nutritional indicator."
      parameters:
        - in: query
          name: code
          schema:
            type: string
            example: "RSPBRRY_KET"
          required: true
          description: Code of the custom nutritional indicator to be patched.
        - in: body
          name: body
          description: The request body contains the parameters to be updated.
          required: true
          schema:
            type: object
            properties:
              code:
                type: string
                example: "RSPBRRY_KET"
                description: The new code for the custom nutritional indicator. Optional.
              unit:
                type: string
                example: "mg"
                description: The new unit for the custom nutritional indicator. Optional.
              default_label:
                type: string
                example: "Raspberry Keatons"
                description: The new default label for the custom nutritional indicator. Optional.

      responses:
        200:
          description: "Nutritional indicator successfully updated"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_defined_indicators'
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
                  - $ref: '#/components/schemas/100_provide_values_patch'
      security:
        - Bearer: [ ]

  /v2/custom_nutritional_indicator_translation:
    post:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Create a custom nutritional indicator translation."
      description: "
          Create a translation for an specific custom nutritional indicator. 
          

          &nbsp;


          All the available indicators with their respective units can be found by using the endpoint '/v2/info/availableNutrients'.
          

          &nbsp;


          The defined translations can be retrieved by using the endpoint 'GET /v2/info/custom_nutritional_indicator'.
          "
      parameters:
        - in: body
          name: body
          required: false
          description: JSON object containing the attributes of the new custom nutritional indicator translation.
          schema:
            type: object
            properties:
              code:
                type: string
                example: "RSPBRRY_KET"
              translation:
                type: string
                example: "Keatons de Frambuesa"
              language:
                type: string
                example: "spa"

      responses:
        200:
          description: "Nutritional indicator translation successfully created"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_defined_indicators'
                  - $ref: '#/components/schemas/708'
                  - $ref: '#/components/schemas/100_existing_language_translation'
      security:
        - Bearer: [ ]

    delete:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Delete an existent custom nutritional indicator translation."
      description: "Delete a previously created custom nutritional indicator translation."
      parameters:
        - in: body
          name: body
          description: The request body contains the parameters to indentify the translation to be deleted.
          required: true
          schema:
            type: object
            properties:
              code:
                type: string
                example: "RSPBRRY_KET"
                description: The translation code to be deleted.
              language:
                type: string
                example: "spa"
                description: The translation language to be deleted.
      responses:
        200:
          description: "Nutritional indicator translation successfully deleted"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
                  - $ref: '#/components/schemas/1642_delete_default_label_indicator_translation'
                  - $ref: '#/components/schemas/1642_no_translations_in_lang_indicator_translation'
                  - $ref: '#/components/schemas/1642_no_translations_defined_indicator_translation'
      security:
        - Bearer: [ ]

    patch:
      tags:
        - "Custom Nutritional Indicators"
      summary: "⚫🔵 Patch an existent custom nutritional indicator translation."
      description: "Patch a previously created custom nutritional indicator translation."
      parameters:
        - in: query
          name: code
          schema:
            type: string
            example: "RSPBRRY_KET"
            description: Code of the custom nutritional indicator translation to be patched.
          required: true
          description: The code of the custom nutritional indicator translation to be updated.
        - in: query
          name: base_language
          schema:
            type: string
            example: "spa"
            description: Language of the custom nutritional indicator translation to be patched.
          required: true
          description: The base language of the custom nutritional indicator translation to be updated.
        - in: body
          name: body
          description: The request body contains the parameters to be updated.
          required: true
          schema:
            type: object
            properties:
              language:
                type: string
                example: "spa"
                description: The new language for the custom nutritional indicator translation. Optional.
              translation:
                type: string
                example: "Keatons de Frambuesa"
                description: The new translation for the custom nutritional indicator translation. Optional.

      responses:
        200:
          description: "Nutritional indicator translation successfully updated"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1641_defined_indicators'
                  - $ref: '#/components/schemas/1641_no_defined_indicators'
                  - $ref: '#/components/schemas/1641_existing_indicator'
                  - $ref: '#/components/schemas/100_provide_values_patch'
                  - $ref: '#/components/schemas/708'
      security:
        - Bearer: [ ]

  /v2/custom_recipe:
    post:
      tags:
        - "Custom Recipes"
      summary: "🔵⚫ Create a custom recipe."
      description: "
          Allows creating a custom recipe that will only be visible by your company. You can create recipes that will 
          be consumed exclusively by your users. You can provide a default dish name, ingredient_list and 
          nutritional_indicators for each custom recipe. Note that all ingredients and nutrients quantities must
          be introduced for the standard serving size of the recipe.
          
          
          &nbsp;
          
          
          Furthermore, you can optionally provide a set of translations for your dish to all the available languages 
          (see endpoint /v2/info/languages to know which is the set of valid languages). The users will visualize 
          the translation corresponding to his/her language. **IMPORTANT: note that at least the language 'eng' MUST
          be provided if you want the recognition algorithms to automatically detect the custom recipes.**


          &nbsp;


          To identify an ingredient it can be done in two different ways. Either passing an 'ingredientId' (it must be
          a valid ingredient id from the LogMeal system) or an 'ingredientName'. When passing a Name, the ingredient, 
          will be present in the recipe and will be usable but it will not have some functionalities since it is not in 
          the system and there is no data associated to it. It could be anything.


          &nbsp;


          Refer to GET '/v2/info/availableNutrients' to see a list of valid nutrient codes. Where you can find the 
          'indicatorCode' and unit for the 'indicatorAmount' for all the available nutrients. Refer to GET 
          '/v2/dataset/ingredients', it will return all the valid ingredients names and their ids. All values for 
          'ingredientAmount' must be reported in grams and all values for 'indicatorAmount' must be reported in 
          the indicator-specific unit reported in '/v2/info/availableNutrients'.


          &nbsp;


          This endpoint has an 'image' parameter in the request body which is in the 'multipart/form-data', and other 
          parameters are in 'application/json'. You can check it from the dropdown from the right corner.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCustomRecipes"
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: "Custom recipe successfully created!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Custom recipe successfully created!"
                  custom_recipe_id:
                    type: integer
                    example: 1
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

    get:
      tags:
        - "Custom Recipes"
      summary: "🔵⚫🔴 Get some basic information about all the active custom recipes."
      description: "
          This endpoint is used to get all active custom recipes."
      parameters:
        - $ref: '#/components/parameters/Language'
      responses:
        200:
          description: "Custom recipes retrieved successfully."
          $ref: ''
          content:
            application/json:
             schema:
              $ref: "#/components/schemas/ResponseGetAllRecipes"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

  /v2/custom_recipe/{custom_recipe_id}:
    get:
      tags:
        - "Custom Recipes"
      summary: "🔵⚫🔴 Get the complete information for a specific custom recipe."
      description: "
        This endpoint is used to get a single custom recipe referred by the provided 'custom_recipe_id' parameter. It returns all the information associated to that specific recipe (dish name, image url, ingredients list, nutritional indicators, etc.).
        "
      parameters:
        - in: path
          name: custom_recipe_id
          schema:
            type: integer
          required: true
          description: "ID of the custom recipe to get the information from."
        - $ref: '#/components/parameters/Language'
      responses:
        200:
          description: "Custom recipe retrieved successfully."
          $ref: ''
          content:
            application/json:
             schema:
              $ref: "#/components/schemas/ResponseGetCustomRecipe"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

    delete:
      tags:
        - "Custom Recipes"
      summary: "🔵⚫ Deactivate an existing custom recipe."
      description: "
              This endpoint is used to deactivate an existing custom recipe created by APICompany and APIUserManager. This means that all the food intakes attached to this custom recipe will remain untouched but the recipe will not be available anymore for future intake assignments.
              "
      parameters:
        - in: path
          name: custom_recipe_id
          schema:
            type: integer
          required: true
          description: "Custom recipe ID to delete an existing custom recipe."
      responses:
        200:
          description: "Custom recipe deleted successfully."
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

    patch:
      tags:
        - "Custom Recipes"
      summary: "🔵⚫ Edit an existing custom recipe."
      description: "
              This endpoint is used when the user wants to update the details of a custom recipe referred by the provided 'custom_recipe_id' parameter.
              The parameters that can be edited are image, dish_name, translations, ingredient_list and nutritional_indicators. If any of the parameters are provided in the request body then it will update the respective recipe with the new values. 
              The attributes ingredient_list and nutritional_indicators will only be updated if both are provided on the same query.


              &nbsp;


              Refer to POST '/v2/custom_recipe' in order to understand the required format for each of the optional parameters.


              &nbsp;


              This endpoint has an 'image' parameter in the request body which is in the 'multipart/form-data', and other parameters are in 'application/json'. You can check it from the dropdown from the right corner.
              "
      parameters:
        - in: path
          name: custom_recipe_id
          schema:
            type: integer
            example: 123
          required: true
          description: "ID of the custom recipe."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditCustomRecipes"
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: "Custom recipe edited successfully."
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      security:
        - Bearer: [ ]

#  /v2/custom_recipe/assign:
#    post:
#      tags:
#        - "Custom Recipes"
#      summary: "🔵 Assign a custom recipe to one or more APIUsers at once."
#      description: "
#        This endpoint is used by APIUserManager to assign custom recipes to multiple APIUsers.
#
#
#        &nbsp;
#
#
#        APIUserManager can choose the custom recipes and also choose the specific date and time for that custom recipes and assign it to the list of users.
#
#
#        &nbsp;
#
#
#        When APIUserManager assigns the custom recipe to the users it will make a copy of all the information of that custom recipe and assign it to the users separately."
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/AssignCustomRecipes"
#      responses:
#        200:
#          description: "Custom recipe successfully assigned."
#        400:
#          description: "Bad request"
#          $ref: ''
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#        401:
#          description: "Unauthorized, invalid token."
#        403:
#          description: "Forbidden"
#        404:
#          description: "Not found"
#      security:
#        - Bearer: [ ]

#  /v2/custom_recipe/intake:
#    post:
#      tags:
#        - "Custom Recipes"
#      summary: "🔴 Assign a custom recipe to an existing imageId intake."
#      description: "
#        This endpoint will assign an existing custom recipe instance to the APIUser.
#
#
#        &nbsp;
#
#
#        This endpoint is similar to '/v2/custom_recipe/assign'. The main difference between the two of these is '/v2/custom_recipe/assign' endpoint is callable by APIUserManagers instead and the assignment can be done to multiple users at a time. Also, in this endpoint the assignment must be linked to an already existing 'imageId'."
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                custom_recipe_id:
#                  type: integer
#                  description: "Custom recipe ID."
#                  example: 123
#                imageId:
#                  type: integer
#                  description: "Image ID."
#                  example: 45
#              required:
#                - custom_recipe_id
#                - imageId
#      responses:
#        200:
#          description: "Custom recipe successfully assigned."
#        400:
#          description: "Bad request"
#          $ref: ''
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#        401:
#          description: "Unauthorized, invalid token."
#        403:
#          description: "Forbidden"
#        404:
#          description: "Not found"
#      security:
#        - Bearer: [ ]

  /v2/managers:
    get:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫ Retrieve all the APIUserManager your company has."
      description: "
        This endpoint provides information about the APIUserManagers your company has created.


        &nbsp;


        The response contains the IDs, email, username and token of each APIUserManager returned.
        "
      responses:
        200:
          description: "APIUserManagers retrieved successfully!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetAPIUserManagers'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"

      security:
        - Bearer: [ ]
  /v2/managers/createAPIUserManager:
    post:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫ Create a new APIUserManager for your company."
      description: "
          This endpoint is used to create a new APIUserManager.


          &nbsp;


          To create a new APIUserManager a username, an email and a password must be provided. Ensure that the passwords
          you use are securely provided to the physical person that will use the account.
          "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAPIUserManagerBody"
        description: "Parameters to create a new APIUserManager."
        required: true
      responses:
        200:
          description: "APIUserManager created successfully!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCreateAPIUserManagers'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/808'
                  - $ref: '#/components/schemas/811'
          examples:
            UsernameAlreadyExists:
              $ref: '#/components/examples/example_808'
            EmailAlreadyExists:
              $ref: '#/components/examples/example_811'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"

      security:
        - Bearer: [ ]

  /v2/managers/deleteAPIUserManager/{manager_id}:
    delete:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫ Delete an existent APIUserManager from your company."
      description: "
          This endpoint is used to delete an existent APIUserManager.


          &nbsp;


          To delete an APIUserManager you must provide its user ID through the endpoint path. Make sure you obtain the
          APIUserManager ID properly by using the '/v2/managers' GET endpoint.
          "
      parameters:
        - in: path
          name: manager_id
          schema:
            type: integer
          required: true
          description: ID of the APIUserManager to be deleted. The user manager ID can be obtained in the '/v2/managers' GET endpoint.

      responses:
        200:
          description: "APIUserManager deleted successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1222'
          examples:
            APIUserManagerDoesNotExist:
              $ref: '#/components/examples/example_1222'
        500:
          description: "Internal Server Error"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1219'
          examples:
            APIUserManagerDeleteError:
              $ref: '#/components/examples/example_1219'

      security:
        - Bearer: [ ]
  /v2/managers/userAccess:
    post:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫ Create a new Access Entry for one of your APIUserManagers."
      description: "
            This endpoint is used to create a new Access Entry for one of your APIUserManagers. An access entry consists
            in a relationship between an APIUserManager and an APIUser. Creating this entry will give the APIUserManager
            access to the provided APIUser information, with the ability to modify some of the information/nutritional
            goals of the APIUser.


            &nbsp;


            To create an access entry, both the user ID of the APIUserManager and the APIUser are required. Ensure that
            you are giving access to the proper users, as sensitive information of the APIUser might be shared with the
            APIUserManager.
            "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIUserManagerAccessBody"
        description: "Parameters to create a new APIUserManager Access Entry."
        required: true
      responses:
        200:
          description: "APIUser manager access created successfully!"
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1220'
          examples:
            APIUserManagerAccessEntryAlreadyExists:
              $ref: '#/components/examples/example_1220'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1201'
                  - $ref: '#/components/schemas/1222'
          examples:
            APIUserDoesNotExist:
              $ref: '#/components/examples/example_1201'
            APIUserManagerDoesNotExist:
              $ref: '#/components/examples/example_1222'

      security:
        - Bearer: [ ]
    delete:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫ Delete an existent Access Entry from one of your APIUserManagers."
      description: "
                This endpoint is used to delete an Access Entry from one of your APIUserManagers. An access entry consists
                in a relationship between an APIUserManager and an APIUser. Deleting the existent entry will revoke the APIUserManager
                access to the provided APIUser information, as well as the ability to modify some of the information/nutritional
                goals of the APIUser.


                &nbsp;


                To delete an access entry, both the user ID of the APIUserManager and the APIUser are required. Ensure that
                you are revoking access to the proper users.
                "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIUserManagerAccessBody"
        description: "Parameters to delete an existent APIUserManager Access Entry."
        required: true
      responses:
        200:
          description: "APIUser manager access deleted successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1201'
                  - $ref: '#/components/schemas/1221'
                  - $ref: '#/components/schemas/1222'
          examples:
            APIUserDoesNotExist:
              $ref: '#/components/examples/example_1201'
            APIUserManagerAccessDoesNotExist:
              $ref: '#/components/examples/example_1221'
            APIUserManagerDoesNotExist:
              $ref: '#/components/examples/example_1222'
      security:
        - Bearer: [ ]
    get:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫🔵 Retrieve all the APIUsers an APIUserManager has access to."
      description: "
            This endpoint provides a list with all the IDs of the APIUsers an APIUserManager has access to.
            "
      parameters:
        - in: query
          name: manager_id
          example: 123
          required: false
          schema:
            type: integer
          description: Required field only for APICompanies. ID of the APIUserManager to get the information from.
      responses:
        200:
          description: "APIUserManagerAccess entries successfully obtained!"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetAPIUserManagerAccess'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/1222'
          examples:
            APIUserManagerDoesNotExist:
              $ref: '#/components/examples/example_1222'
      security:
        - Bearer: [ ]

  /v2/managers/getUserProfileInfo/{userId}:
    get:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫🔵 Get a user's profile information."
      description: "This endpoint returns the information from the specified APIUser which is accessible by the APIUserManager/company.


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions.


                      &nbsp;


                      This endpoint is the same as '/v2/profile/getUserProfileInfo'."
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        200:
          description: "The profile information has been successfully obtained"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileObject'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  /v2/managers/modifyUserProfileInfo/{userId}:
    post:
      tags:
        - "APIUserManager Endpoints"
      summary: "⚫🔵 Modify a user's profile information."
      description: "This endpoint allows you to modify the information from APIUsers that the APIUserManager has access to. This information will be used, for instance, to calculate the /getRecommendedDailyIntake endpoint based on the user data, among others.

                      &nbsp;


                      Read the specification of the request body to see the available fields with their descriptions.


                      &nbsp;


                      This endpoint is the same as '/v2/profile/modifyUserProfileInfo'."
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileObject"
        description: "Parameters to be modified, all fields are optional except 'user_id'. Null values will be ignored."
        required: true
      responses:
        '200':
          description: "The profile information has been successfully modified!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "The profile information has been successfully modified!"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Sex is not valid:
              message: "The provided sex value is not valid."
              code: 1205
            Lifestyle is not valid:
              message: "The provided lifestlye value is not valid."
              code: 1214
            Salt level is not valid:
              message: "The provided salt level value is not valid."
              code: 1215
            Sugar level is not valid:
              message: "The provided sugar level value is not valid."
              code: 1216
            Portion size is not valid:
              message: "The provided portion size value is not valid."
              code: 1217
            Birth format not valid:
              message: "The provided birth value is wrong. Follow the format 'YYYY-MM-DD'"
              code: 1218
            diet label not valid:
              message: "The provided diet label value is not valid"
              code: 1607
            food restriction not valid:
              message: "The provided food restriction value is not valid'"
              code: 1608


        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  /v2/managers/login:
    post:
      tags:
        - "APIUserManager Endpoints"
      summary: "🔵 Login validation credentials for APIUserManagers."
      description: "
            This endpoint is used to validate a pair of user and password values assigned to a user of type APIUserManager.
            After the pair validation is performed the token of the user is returned together with a set of useful profile information.
            
            
            &nbsp;
            
            
            Note that this endpoint does NOT require a token to be called. 
            "
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIUserManagerLogin"
        description: "Credentials to validate an APIUserManager."
        required: true
      responses:
        200:
          description: "APIUserManager login successful!"
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/200_login_apiusermanager'
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/821'
          examples:
            APIUserManagerAccessEntryAlreadyExists:
              $ref: '#/components/examples/example_821'

#  /auth/app:
#    post:
#      tags:
#        - "Informative Endpoints"
#      summary: "Access the app through social authentication"
#      description: "This is an specific endpoint for the LogMeal App. This endpoint allows the users to register and
#      Log In to the LogMeal App through an integration with social networks like google.
#
#
#                      &nbsp;
#
#
#                      Note that if a user with the same email already exists with a social login set up, it will be assigned to the new one too (e.g. mail a@mail.com is registered with google, if connecting through facebook the email is the same, both will access the same user).
#
#
#                      &nbsp;
#
#
#                      For now this endpoint only allows authentication with the 'google' type of identification_token.
#                      "
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                identification_token:
#                  type: string
#                  example: "321XYZ"
#                  description: "Identification token generated by the social network API. This token will be checked through the proper API to ensure the user's identity. The email information must be stored in the identification token in order to identify the user."
#                token_type:
#                  type: string
#                  example: "google"
#                  description: "Type of authentication the user is providing. One of ['google']."
#
#        description: "Parameters for the user identification verification."
#        required: true
#      responses:
#        '200':
#          description: "The profile information has been successfully modified!"
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  msg:
#                    type: string
#                    example: "The user has been successfully identified!"
#                  token:
#                    type: string
#                    example: "446228fe40bc180c09854dc24f52e9040e2f0"
#        400:
#          description: "Bad request."
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#          examples:
#            Sex is not valid:
#              message: "The provided sex value is not valid."
#              code: 1205
#            Lifestyle is not valid:
#              message: "The provided lifestlye value is not valid."
#              code: 1214
#            Salt level is not valid:
#              message: "The provided salt level value is not valid."
#              code: 1215
#            Sugar level is not valid:
#              message: "The provided sugar level value is not valid."
#              code: 1216
#            Portion size is not valid:
#              message: "The provided portion size value is not valid."
#              code: 1217
#            Birth format not valid:
#              message: "The provided birth value is wrong. Follow the format 'YYYY-MM-DD'"
#              code: 1218
#
#        401:
#          description: "Unauthorized, invalid token"
#        404:
#          description: "Not found."
#          $ref: ''
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'
#          examples:
#            User does not exist:
#              message: "This User does not exist."
#              code: 1210
#      security:
#        - Bearer: [ ]

  /v2/score/{imageId}/nutriScore:
    get:
      tags:
        - "Intake Variety Score and Nutri-Scores"
      summary: "🔴 Get Nutri-Score for an image."
      description:

                     'This endpoint returns the total Nutri-Score for an image corresponding to the provided image id. The image id should be for one of the images that the APIUser has already uploaded to the LogMeal API as part of any queries related to food recognition or nutritional information analysis. The score calculation takes into consideration all dishes appearing in the image and gets the average of the Nutri-Scores per 100g of each dish.


                      &nbsp;


                      The range of values for the standardized Nutri-Score is between 0 and 100 with 100 being the best score possible. This is a rescaled and standardized version of the original Nutri-Score where the values are between -15 to 40. Like the original score scale, this rescaled score range can be represented as 5 categories namely A,B,C,D,E.



                         Values    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Category


                           &nbsp;&nbsp; 0 - 36      &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;   E


                           &nbsp;&nbsp; 37 - 52     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; D


                           &nbsp;&nbsp; 53 - 67     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  C


                           &nbsp;&nbsp; 68 - 72     &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B


                           &nbsp;&nbsp; 73 - 100    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   A



                      &nbsp;
                      
                      The Nutri-Score values provided can be null in case a dish name was confirmed in the endpoint /confirm/dish that does not belong to the logmeal source, thus we do not have nutritional information for it.
                      
                      
                      &nbsp;


                      For more information about the Nutri-Score [visit this link](https://nutriscore.colruytgroup.com/colruytgroup/en/about-nutri-score).


                      &nbsp;

                      Read the specification of the response body to see the available fields with their descriptions.'



      parameters:
        - in: path
          name: imageId
          schema:
            type: integer
          required: True
          description: "Id of the image"

      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  dish_nutriScore_category:
                    type: string
                    example : A
                    enum : [A,B,C,D,E]
                    description: 'Nutri-Score category of the dishes present in the provided image. Possible categories are A,B,C,D,E. A represents the highest range of Nutri-Score whereas E represents the lowest.'
                  dish_nutriScore_standardized:
                    type: integer
                    example: 70
                    description: 'Standardized Nutri-Score value for the dishes present in the provided image. The range of value is between 0 and 100 with 100 being the best and 0 the worst score possible.'

        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  /v2/score/{date}/meal/{occasion}/nutriScore:
    get:
      tags:
        - "Intake Variety Score and Nutri-Scores"
      summary: "🔴 Get total Nutri-Score for specific date and occasion. ⏱"
      description:
                      "<span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      This endpoint returns the information about the Nutri-Score for a provided date and occasion based on the APIUser's food intake on that day. This score is the average Nutri-Score of all the images for the given day and occasion. For more information about Nutri-Score of images, see endpoint '/v2/score/{imageId}/nutriScore'.


                      &nbsp;


                      For more information about the Nutri-Score [visit this link](https://nutriscore.colruytgroup.com/colruytgroup/en/about-nutri-score)


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions."




      parameters:
        - in: path
          name: occasion
          schema:
            type: string
          required: True
          example: "breakfast"
          description: 'Occasion for which the Nutri-Score needs to be calculated. Possible values are "breakfast", "lunch", "dinner" or "snack".'
        - in: path
          name: date
          schema:
            type: string
          required: True
          example: '2021-10-01'
          description: 'Date for which the Nutri-Score needs to be calculated. following the format "YYYY-MM-DD"'

      responses:
        '200':
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  occasion_nutriScore_category:
                    type: string
                    example: B
                    enum : [A,B,C,D,E]
                    description: 'Nutri-Score category for the day and occasion. Possible categories are A,B,C,D,E. A represents the highest range of Nutri-Score whereas E represents the lowest.'
                  occasion_nutriScore_standardized:
                    type: integer
                    example: 50
                    description: 'Standardized Nutri-Score value for the day and occasion. The range of value is between 0 and 100 with 100 being the best and 0 the worst score possible.'


        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]


  /v2/score/{date}/meal/nutriScore:
    get:
      tags:
        - "Intake Variety Score and Nutri-Scores"
      summary: "🔴 Get total Nutri-Score for a specific date. ⏱"
      description:
                    "<span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      This endpoint returns the information about the Nutri-Score for a provided date based on the APIUser's food intake on that day. This score is the average Nutri-Score of all the images for the given day. For more information about Nutri-Score of images, see endpoint '/v2/score/{imageId}/nutriScore'.


                      &nbsp;


                      For more information about the Nutri-Score [visit this link](https://nutriscore.colruytgroup.com/colruytgroup/en/about-nutri-score)


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions."




      parameters:
        - in: path
          name: date
          schema:
            type: string
          required: True
          example: '2021-10-01'
          description: 'Date for which the Nutri-Score needs to be calculated. following the format "YYYY-MM-DD"'

      responses:
        '200':
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:

                  day_nutriScore_category:
                    type: string
                    example: A
                    enum : [A,B,C,D,E]
                    description: 'Nutri-Score category for the provided day. Possible categories are A,B,C,D,E. A represents the highest range of Nutri-Score whereas E represents the lowest.'

                  day_nutriScore_standardized:
                    type: integer
                    example: 70
                    description: 'Standardized Nutri-Score value for the day and occasion. The range of value is between 0 and 100 with 100 being the best and 0 the worst score possible.'


        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]



  /v2/score/variety:
    get:
      tags:
        - "Intake Variety Score and Nutri-Scores"
      summary: "🔴 Get Variety Score for a provided time period and an occasion (optional). ⏱"
      description:    "<span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      This endpoint returns the information about the 'Variety Score' for a duration of time and occasion (if provided) based on the APIUser's food intake over that time.


                      &nbsp;


                      The 'Variety Score' is a method of intake analysis for a measurement of how varied a user's diet is. This score considers two main aspects of the user diet. First one is the variety element (e.g. how many different types of food groups the user diet has covered) and the second one is the nutritional scoring of dishes belonging to these food groups. The nutritional scoring is optional and only considered on user requests. The more varied the diet for certain user is, the higher this score will be. If the nutritional scoring is considered, it works as a weighing term for the variety of food groups consumed. The range of the value for the variety score is between 0-100 with 100 being the best score possible.


                      
                      <!-- &nbsp;-->


                      <!-- For instance, if a user consumed a dish from the food group 'dairy_products' and the standardized Nutri-Score(between 0 and 100) (Given nutritional scoring needs to be considered) of that dish is 60, then final weight of that food group in the variety calculation will be 1*60 = 60.-->
                      

                      &nbsp;


                      For more information about the Nutri-Score [visit this link](https://nutriscore.colruytgroup.com/colruytgroup/en/about-nutri-score)


                      &nbsp;


                      Our customized 'Variety Score' is also inspired by the 'Dietary Variety Score' that was proposed and clinically tested in this scientific study: Drewnowski A, Renderson SA, Driscoll A, Rolls BJ. The Dietary Variety Score: assessing diet quality in healthy young and older adults. Journal of the American Dietetic Association. 1997 Mar 1;97(3):266-71.


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions."

      parameters:
        - in: path
          name: date_from
          schema:
            type: string
          required: True
          example: '2021-10-01'
          description: 'Start date of the period of time for which the user data needs to be considered for the score calculation, following the format "YYYY-MM-DD"'

        - in: path
          name: date_to
          schema:
            type: string
          required: True
          example: '2021-10-06'
          description: 'Finish date of the period of time for which the user data needs to be considered for the score calculation, following the format "YYYY-MM-DD"'

        - in: path
          name: occasion
          schema:
            type: string
          example: "breakfast"
          description: 'Occasion for which the recipes need to be recommended. Possible values are "breakfast", "lunch", "dinner"  or "snack". If not provided, all occasions available are used.'

        - in: path
          name: score_type
          schema:
            type: string
          example: "Nutri-Score"
          description: 'The nutritional scoring method that needs to be considered along with the food groups variety aspect for the final score. Currently available type is "Nutri-Score". if not provided, the final score will only consider the food group varities. If choosing "None" then only the variety of the consumed dishes will be considered for generating recommendations.'
          enum: ["Nutri-Score", "None"]

        - in: path
          name : foodGroups
          schema:
            type:  array
            items:
              type: integer
          example: [6, 4]
          description: "Food group ids used for variety score calculation. If not provided, all available food groups in the database are used. If 'occasion' is provided a subset of food groups usually consumed for the selected occasion will be used instead. Available food groups in the LogMeal database can be found in endpoint '/v2/dataset/foodgroups'. "



 #     requestBody:
 #       content:
 #         application/json:
 #           schema:
 #             $ref: "#/components/schemas/VarietyScore"
 #       required: true

 #       description: "Parameters to get the 'Variety Score', all fields are optional except date_to and date_from. Null values will be ignored."


      responses:
        '200':
          description: "The profile information has been successfully obtained"
          content:
            application/json:
              schema:
                type: object
                properties:
                  variety_score:
                    type: float
                    example : 62.5
                    description: 'Average Variety Score for the provided time range and occasion.'

                  score_per_food_group:
                    type: object
                    example: {"1": 100.0, "3": 100.0, "6": 100.0, "8": 0, "10": 100.0, "12": 0, "15": 100.0, "16": 0}
                    properties:
                      food_group_id:
                        description: "Food group id as key and score as value."
                        type: float
                        example: 40.0
                    description: 'Standardized score value for each food group.'

        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]


  /v2/recommend/dish:
    get:
      tags:
        - "Recipe and Dish Recommendations"
      summary: "🔴 Get dish recommendation for an APIUser. ⏱⭐"
      description: "  <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>*


                      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      This endpoint returns a list of dish ids as a recommendation after analysing the APIUser's intakes over the last days. The returned dishes belong to the LogMeal database, see endpoint '/v2/dataset/dishes'.


                      &nbsp;


                      The recommendation process first analyses the nutritional information of the APIUser's intakes over the last days and calculates a measurement named 'Variety Score'. For more information about this score, check endpoint '/v2/score/variety'. After this step, a list of food groups is calculated that should optimize this score and finally optimal dishes belonging to these food groups are recommended as the final output.


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions."

      parameters:
        - in: path
          name: score_type
          schema:
            type: string
          example: "Nutri-Score"
          description: 'The nutritional scoring method that needs to be considered along with the food groups variety aspect for the final score. Currently available type is "Nutri-Score". if not provided, the final score will only consider the food group varities. If choosing "None" then only the variety of the consumed dishes will be considered for generating recommendations.'
          enum: ["Nutri-Score", "None"]

        - in: path
          name: date_from
          schema:
            type: string
          example: '2021-10-01'
          description: 'Start date of the period of time for which the user data needs to be considered for the recommendation, following the format "YYYY-MM-DD". If this parameter is not provided, then a default value of 10 days to the past will be used.'

        - in: path
          name: occasion
          schema:
            type: string
          example: "breakfast"
          description: 'Occasion for which the dishes need to be recommended. Possible values are "breakfast", "lunch", "dinner"  or "snack". If not provided, all available occasions in the database are used.'

        - in: path
          name: foodGroups
          schema:
            type:  array
            items:
              type: integer
          example: [6, 4]
          description: "Food group ids used for variety score analysis for optimal recommendation. If this parameter is not provided, a pre fixed list of food groups for the given occasion is used. If occasion is not provided, all available food groups in the database are used. If 'occasion' is provided a subset of food groups usually consumed for the selected occasion will be used instead. Available food groups in the LogMeal database can be queried by the endpoint '/v2/dataset/foodgroups'. "


      #requestBody:
      #  content:
      #    application/json:
      #      schema:
      #        $ref: "#/components/schemas/DishRecommendation"
      #  description: "Parameters to get the recommended dishes, all fields are optional. Null values will be ignored."
      #  required: false

      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  recommended_foodClass_ids:
                    type: array
                    items:
                      type: integer
                    example: [2,3,5]
                    description: 'Food class ids of the recommended dishes.'

        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  /v2/recommend/recipe:
    get:
      tags:
        - "Recipe and Dish Recommendations"
      summary: "🔴 Get recipes recommendation for an APIUser. ⏱⭐"
      description: " <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>*


                      <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                      &nbsp;


                      This endpoint returns a set of recommended recipes for an APIUser based on the intakes reported. The recipes recommended contain all the detailed information for cooking the dish with a similar format of a food recipe book.


                      &nbsp;


                      The recommendation process consists of three main steps:

                      1. First, it tries to get the suitable dishes that the users should eat to improve the 'Variety Score' of their diet. For more information about this score, check endpoint '/v2/score/variety' (alternatively, a list of preferred dishes can be provided as a parameter to this endpoint). If not provided, the 'v2/recommend/dish' endpoint is used internally to get the recommended dishes.

                      2. Once the dishes are obtained, a list of pre-stored recipes for these dishes are gathered.

                      3. In order to improve the personalisation of this recommendation process, a final filtering method is carried out where APIUser's diet preferences and food restrictions are taken into consideration. So for better results, it is advised to add these user attributes to the API via the '/v2/profile/modifyUserProfileInfo' endpoint.


                      &nbsp;


                      Read the specification of the response body to see the available fields with their descriptions."

      #requestBody:
      #  content:
      #    application/json:
      #      schema:#
      #        $ref: "#/components/schemas/RecipeRecommendation"
      #  description: "Parameters to get the recommended recipes, all fields are optional. Null values will be ignored."
      #  required: false

      parameters:
        - in: path
          name: score_type
          schema:
            type: string
          example: "Nutri-Score"
          description: 'The nutritional scoring method that needs to be considered along with the food groups variety aspect for the final score. Currently available type is "Nutri-Score". if not provided, the final score will only consider the food group varities. If choosing "None" then only the variety of the consumed dishes will be considered for generating recommendations.'
          enum: ["Nutri-Score", "None"]

        - in: path
          name: num_of_recipes
          schema:
            type: integer
          example: 5
          description: 'Number of recipes to be recommended. If not provided, a default value of 5 is used.'

        - in: path
          name: occasion
          schema:
            type: string
          example: "breakfast"
          description: 'Occasion for which the recipes need to be recommended. Possible values are "breakfast", "lunch", "dinner"  or "snack". If not provided, all available occasions in the database are used.'

        - in: path
          name: date_from
          schema:
            type: string
          example: '2021-10-01'
          description: 'Start date of the period of time for which the user data needs to be considered for the recommendation, following the format "YYYY-MM-DD". If this parameter is not provided, then a default value of 10 days to the past will be used.'

        - in: path
          name: food_class_ids
          schema:
            type:  array
            items:
              type: integer
          example: [6, 4]
          description: 'Food class ids of the dishes for which the recipes need to be recommended. If not provided, these are obtained internally by calling the /v2/recommend/dish endpoint.'

        - in: path
          name: foodGroups
          schema:
            type:  array
            items:
              type: integer
          example: [6, 4]
          description: "Food group ids used for variety score analysis for optimal recommendation. If this parameter is not provided, a pre fixed list of food groups for the given occasion is used. If occasion is not provided, all available food groups in the database are used. If 'occasion' is provided a subset of food groups usually consumed for the selected occasion will be used instead. Available food groups in the LogMeal database can be queried by the endpoint '/v2/dataset/foodgroups'. "


      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeRecommendationResponse'

        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "Not found."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            User does not exist:
              message: "This User does not exist."
              code: 1210
      security:
        - Bearer: [ ]

  /v2/favorites:
    post:
      tags:
        - "APIUser Favorite Meals"
      summary: "🔴 Create a favorite instance for a user. ⏱"
      description: "

                   <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                   &nbsp;


                   This endpoint creates a favorite instance for a user using an existent image id and all confirmed dishes in the image together with their quantities. This way users can store their more preferred dishes and meals as their favorites and use them to introduce food intakes in the future in an easier way. Furthermore, this information will be internally used to better customize the user experience.


                    &nbsp;

                    "
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                imageId:
                  type: integer
                  example: 3
                  description: id of the image
                name:
                  type: string
                  example: "new name"
                  description: Name of the favorite (defaults to the list of dishes confirmed in the image).
              required:
                - imageId

        description: "Parameters to create the favorite for an user."
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorite_image_id:
                    type: integer
                    example: 135766
                    description: id of the favorite instance created
        400:
          description: "Bad request"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"

      security:
        - Bearer: [ ]

    get:
      tags:
        - "APIUser Favorite Meals"
      summary: "🔴 Get all favorites of a user. ⏱"
      description: "

                             <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                            &nbsp;


                            This endpoint returns all previously created favorites for a user.
                            "
      responses:
          200:
            content:
              application/json:
                schema:
                  type: object
                  properties:
                      user_favorites:
                        type: array
                        items:
                            description: "Object containing the information of the each favorite associated to the user."
                            type: object
                            properties:
                              favorite_image_id:
                                description: "Id of the favorite instance. This is equivalent to an image_id."
                                type: integer
                                example: 45
                              name:
                                description: "Name of the favorite"
                                type: string
                                example: "breakfast meal"
                              image_url:
                                description: "URL to access the image. This URL has an expiration time of 1 day. This value will be null in case it corresponds to a manualInput (see endpoint /intake/manualInput)"
                                type: string
                                example: "https://www.edamam.com/food-img/205/205e6bf2399b85d34741892ef91cc603.jpg"



          400:
            description: "Bad request"
          401:
            description: "Unauthorized, invalid token."
          403:
            description: "Forbidden"
          404:
            description: "Not found"

      security:
          - Bearer: [ ]



    delete:
      tags:
        - "APIUser Favorite Meals"
      summary: "🔴 Delete an existent favorite of a user."
      description: "
                  This endpoint deletes a previously created favorite instance for an APIUser.
                  "
      parameters:
          - in: query
            name: favorite_image_id
            schema:
              type: integer
            required: True
            description: Id of the favorite instance that needs to be deleted.

      responses:
          200:
            description: "User favorite successfully deleted!"
          400:
            description: "Bad request"
          401:
            description: "Unauthorized, invalid token."
          403:
            description: "Forbidden"
          404:
            description: "Not found"
            $ref: ''
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
            examples:
              Nutrient code does not exist:
                $ref: '#/components/schemas/ErrorNutritionalIndicator'
              Nutritional goal does not exist:
                $ref: '#/components/schemas/ErrorNutritionalGoalDoesNotExist'
      security:
          - Bearer: [ ]

    patch:
      tags:
        - "APIUser Favorite Meals"
      summary: "🔴 Edits the name for an existent favorite of a user."
      description: "
                      This endpoint can be used to edit the name of a previously created favorite instance for an APIUser.
                      "

      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorite_image_id:
                    type: integer
                    example: 3
                    description: id of the favorite
                  name:
                    type: string
                    example: "new name"
                    description: New name of the favorite
                required:
                  - favorite_image_id
                  - name


      responses:
          200:
            description: "User favorite successfully edited!"
          400:
            description: "Bad request"
          401:
            description: "Unauthorized, invalid token."
          403:
            description: "Forbidden"
          404:
            description: "Not found"
      security:
          - Bearer: [ ]


  /v2/favorites/intake:
    post:
      tags:
        - "APIUser Favorite Meals"
      summary: "🔴 Assign a favorite instance to user intake. ⏱"
      description: "

                  <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


                  &nbsp;


                  This endpoint assigns an existing favorite instance (favorite_id) to either a manual intake or the recognition results for an image uploaded by the user(imageId). This allows reusing all the information stored in the favorite instance without requiring a re-introduction by the user.


                  &nbsp;


                  For more information on manual input, see endpoint '/v2/intake/manualInput'.
                "
      parameters:
        - in: query
          name: favorite_image_id
          schema:
            type: integer
          required: True
          description: Id of the favorite instance that needs to be assigned.
        - in: query
          name: imageId
          schema:
            type: integer
          required: True
          description: Id of the image. This image can either be an API image or manual input image.

      responses:
        200:
          description: "User favorite assigned successfully!"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized, invalid token."
        403:
          description: "Forbidden"
        404:
          description: "Not found"

      security:
        - Bearer: [ ]

  #####################################################
  #####  FOOD QUANTITY ESTIMATION
  #####################################################


  /v2/image/segmentation/complete/quantity/{model_version}:
    post:
      tags:
        - "Food Quantity Estimation"
      summary: "🔴 Multiple Food Dishes Segmentation ⏱⭐ Detects every food item on the image, recognises it and then automatically estimates the food quantity present in it."
      description: |
        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>
        
        
        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>
        
        
        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>
        
        
        &nbsp;
        
        
        It applies the same food segmentation procedure as in /image/segmentation/complete and additionally it automatically calculates the food quantity for each of the detected regions. 
        The only output difference in this endpoint is that an additional attribute named 'serving_size' is provided for each of the elements inside the 'segmentation_results' list. 
        Additionally, any endpoint and internal procedure that is based on food quantity uses by default the automatically estimated food quantity (e.g. ingredients definition or nutritional information estimation).
        Note that the segmentation_results might not be directly applicable to the uploaded 
        image size. The segmentation pixel values are scaled depending on the 'processed_image_size' values provided 
        for each of the images (the images might be sometimes resized depending on the needs of the food recognition 
        algorithms used).
        
        
        &nbsp;
        
        
        In order to compute the food quantity a depth image has to be provided. The depth image must be extracted using the LogMeal Depth SDK, that you will have to integrate into your App accordingly. Two SDKs are available, the [iOS Depth SDK](https://gitlab.com/logmeal/logmeal-depth-sdk-ios) and the [Android Depth SDK](https://gitlab.com/logmeal/logmeal-depth-sdk-android).
        
        
        &nbsp;
        
        
        **IMPORTANT**: Note that this endpoint has two parameters in the request body ('image' and 'depth') which are in the 'multipart/form-data', and the remaining parameters are in 'application/json'. You can check it from the dropdown from the right corner.

      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Image sent in files"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SegmentationQuantityInputs"
          multipart/form-data:
#            schema:
              type: object
              properties:
                image:
                  description: "Regular RGB color image."
                  type: string
                  format: binary
                depth:
                  description: "Depth image extracted either with iOS or Android Depth SDKs (see endpoint description above)."
                  type: string
                  format: binary
              required:
                - image
                - depth
      responses:
        200:
          description: "Token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentationCompleteQuantityResponse'
          examples:
            Recognition complete response example:
              $ref: '#/components/examples/SegmentationCompleteQuantityResponseExample'
        400:
          description: "Bad request. Invalid Image/File, problems saving sent image"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Saved:
              message: "Image couldn't be saved."
              code: 701
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: [ ]


  #####################################################
  #####  FOOD WASTE ESTIMATION
  #####################################################


  /v2/waste/detection/intake/{model_version}:
    post:
      tags:
        - "Food Waste Estimation"
      summary: "🔴 Food Waste Intake Estimation ⏱⭐ Detects the leftovers or remaining food on a dish/intake."
      description: |
        <span style='color:red; font-size: 1.2em; font-weight: bold;'>(M)</span> <strong>Limited amount of monthly calls. Exceeding calls will be charged as extras.</strong>


        <span style='color:orange; font-size: 1.2em; font-weight: bold;'>(D)</span> <strong>Limited amount of daily calls per user.</strong>


        <span style='color:purple; font-size: 1.2em; font-weight: bold;'>(S)</span> <strong>Limited amount of calls per second.</strong>


        &nbsp;


        This endpoint must be called attached to an already existent food segmentation prediction (Pre-consumption image).
        It applies the same food segmentation procedure as in /image/segmentation/complete but on an image that contains leftovers.
        For all the waste food item positions that were estimated to be matched to an item in the preconsumption image, the parameter 'serving_size' will be returned with the estimated food quantity.


        &nbsp;


        Optionally, the endpoint allows providing a depth image in the same format as /image/segmentation/complete/quantity to increase the leftovers estimation precision. The depth image must be extracted using the LogMeal Depth SDK, that you will have to integrate into your App accordingly. Two SDKs are available, the [iOS Depth SDK](https://gitlab.com/logmeal/logmeal-depth-sdk-ios) and the [Android Depth SDK](https://gitlab.com/logmeal/logmeal-depth-sdk-android).
        If a depth image is provided an additional attribute named 'serving_size' is provided for each and every one of the elements inside the 'segmentation_results' list.
        Note that the segmentation_results might not be directly applicable to the uploaded 
        image size. The segmentation pixel values are scaled depending on the 'processed_image_size' values provided 
        for each of the images (the images might be sometimes resized depending on the needs of the food recognition 
        algorithms used).


        &nbsp;


        **IMPORTANT**: Note that this endpoint has two parameters in the request body ('image' and 'depth') which are in the 'multipart/form-data', and the remaining parameters are in 'application/json'. You can check it from the dropdown from the right corner.

      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Image sent in files"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WasteIntakeInputs"
          multipart/form-data:
#            schema:
              type: object
              properties:
                image:
                  description: "Regular RGB color image."
                  type: string
                  format: binary
                depth:
                  description: "Depth image extracted either with iOS or Android Depth SDKs (see endpoint description above)."
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: "Token is valid and image is received and recognized. Recognition information is sent in response (JSON format)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WasteIntakeResponse'
          examples:
            Recognition complete response example:
              $ref: '#/components/examples/WasteIntakeResponseExample'
        400:
          description: "Bad request. Invalid Image/File, problems saving sent image"
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Image Not Saved:
              message: "Image couldn't be saved."
              code: 701
        401:
          description: "Unauthorized, invalid token"
        403:
          description: 'You are not allowed to this method.'
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
        429:
          description: "Too Many Requests. (limited per daily calls per user or overall calls per second)"
      security:
        - Bearer: [ ]

  /v2/waste/confirm/{model_version}:
    post:
      tags:
        - "Food Waste Estimation"
      summary: "🔴 Confirm dishes and quantities after applying food waste intake detection."
      description: |

        With this endpoint, the user has the option to confirm which of the recognized leftover dishes are correct and
        which are the quantities left.


        &nbsp;


        By default, the source must be set to 'logmeal' and an ID corresponding to an existent dish is expected.
        You also have to provide a food item identifier for each of the confirmed dishes. This implies adding the extra parameter 'food_item_position'.
        This parameter consists of a list of elements, one per each confirmed dish, and it must include an integer identifying the segmented region it corresponds to (see 'food_item_position' in returned json for /waste/detection endpoints).


      parameters:
        - $ref: '#/components/parameters/ModelVersion'
        - $ref: '#/components/parameters/Language'
      requestBody:
        description: "Parameters sent in data, in json format"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WasteConfirmFood'
#            example:
#              {
#                "imageId": 1268462,
#                "confirmedClass": [ 110, "Red velvet donut" ],
#                "source": [ "logmeal", "other" ],
#                "food_item_position": [ 1, 'extra_dish_1' ]
#
#              }
      responses:
        200:
          description: "token is valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmDishResponse'
          examples:
            Confirm dish response example:
              $ref: '#/components/examples/ConfirmDishResponseExample'
        400:
          description: "Bad request."
          $ref: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          examples:
            Feedback Source Is Not Valid:
              message: "Parameter source is not valid. It must be one of: logmeal, google, other"
              code: 707
            Image Not Predicted:
              message: 'The provided imageId does not have a prediction yet.'
              code: 700
            Confirmed Class Error:
              message: "The provided dish name does not belong to the current food type."
              code: 702
        403:
          description: 'You are not allowed to this method.'
        401:
          description: "Unauthorized, invalid token"
        404:
          description: "The specified URL was not found or couldn’t be retrieved"
      security:
        - Bearer: [ ]


components:
  securitySchemes:
    Bearer:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ModelVersion:
      in: path
      name: model_version
      schema:
        type: string
        enum: [ v1.0 ] #, v0.9 ]
      description: "String containing the version of the recognition algorithm/model. If not provided, the endpoint will default to the first version listed in /version/activeModels"
      required: false

    SkipTypes:
      in: query
      name: skip_types
      schema:
        type: string
      required: false
      example: '[1,3]'
      description: "String containing a list of food type ids to be excluded from the image's foodType prediction."

    Language:
      in: query
      name: language
      schema:
        type: string
        enum: [ spa, cat, eng, ita, nld, fre, ger, tur, gre ]
      description: Desired language for the response. It must be a three-letter ISO 639-2/T code. Defaults to the APIUser's assigned language or english.
      required: false

    UserIdParam:
      in: path
      name: userId
      schema:
        type: integer
      required: true
      description: "ID of the APIUser."

    DateRequired:
      in: path
      name: date
      schema:
        type: string
      required: true
      description: Date wanted for the summary. Following the format "%Y/%m/%d".

    DateFromRequired:
      in: query
      name: date_from
      schema:
        type: string
      required: true
      description: Datetime the data will be filtered FROM (date_from <= imageDate). Following the format "%Y/%m/%d, %H:%M:%S".

    DateToRequired:
      in: query
      name: date_to
      schema:
        type: string
      required: true
      description: Datetime the data will be filtered TO (imageDate <= date_to). Following the format "%Y/%m/%d, %H:%M:%S"

    UserIdOptional:
      in: query
      name: user_id
      schema:
        type: integer
      required: false
      description: Optional parameter. Required for APIUserManagers/APICompanies. ID of the user to retrieve the information from.

  schemas:
    Recipe_Nutri_Params:
      type: object
      properties:
        imageId:
          type: integer
          example: 3
        #foodName:
        #  type: string
        #  example: 'spring rolls'
        class_id:
          type: integer
          example: 481
        #source:
        #  type: string
        #  example: 'logmeal'
      #required:
      #  - source

    Login:
      type: object
      properties:
        username:
          type: string
          example: 'exampleusername'
        password:
          type: string
          example: 'mypassword'
      required:
        - username
        - password

    Token:
      type: object
      properties:
        message:
          type: string
          example: 'Successfully logged in.'
        status:
          type: string
          example: 'success'
        token:
          type: string
          example: '410b152be7f'

    UserSignup:
      type: object
      properties:
        username:
          type: string
          example: 'exampleusername'
        language:
          type: string
          default: 'eng'
          example: 'eng'
          enum: [spa, cat, eng, ita, nld, fre, ger, tur, gre]
          description: 'Default language assigned to the created APIUser. Applicable to food names. It must be a three-letter ISO 639-2/T code'
      required:
        - username

    UserProfileObject:
      type: object
      properties:
        name:
          type: string
          example: 'John'
          description: 'Name of the user (min length=2, max length=30)'
        surname:
          type: string
          example: 'Smith'
          description: 'Surname of the user (min length=2, max length=50)'
        language:
          type: string
          example: 'eng'
          enum: [ spa, cat, eng, ita, nld, fre, ger, tur, gre ]
          description: "APIUser's default language. It must be a three-letter ISO 639-2/T code."
        sex:
          type: integer
          example: 2
          enum: [0, 1, 2, 9]
          description: 'Sex of the user. It must be a number, following ISO/IEC 5218.'
        weight:
          type: number
          example: 72.3
          description: 'Weight of the user in Kilograms.'
        height:
          type: number
          example: 180.6
          description: 'Height of the user in Centimeters.'
        birth:
          type: string
          example: '1980-01-01'
          description: 'Date of birth of the user, following the format "YYYY-MM-DD"'
        lifestyle:
          type: string
          example: 'sedentary'
          enum: ['sedentary', 'light', 'moderate', 'high', 'very high']
          description: 'Lifestyle of the user. Possible values are ["sedentary", "light", "moderate", "high", "very high"].'
        default_portion_size:
          type: string
          example: 'large'
          enum: ['small', 'medium', 'large']
          description: 'Default portion size for the user. Possible values are ["small", "medium", "large"]'
        default_salt_level:
          type: string
          example: 'low'
          enum: ['none', 'low', 'medium', 'high']
          description: 'Default salt level for the user. Possible values are ["none", "low", "medium", "high"]'
        default_sugar_level:
          type: string
          example: 'medium'
          enum: ['none', 'low', 'medium', 'high']
        default_oil_level:
          type: string
          example: 'high'
          enum: ['none', 'low', 'medium', 'high']
          description: 'Default oil level for the user. Possible values are ["none", "low", "medium", "high"]'
        reference_sugar:
          type: integer
          example: 47
          description: 'ID of the sugar ingredient the user usually uses. A list of all possible oil modifiers can be retrieved by calling /dataset/referenceIngredients.'
        reference_oil:
          type: integer
          example: 562
          description: 'ID of the oil ingredient the user usually uses. A list of all possible oil modifiers can be retrieved by calling /dataset/referenceIngredients.'
        timezone:
          type: string
          example: 'Europe/Madrid'
          description: 'Timezone the user is located at. This requires a TZ database name , you can find them here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'
        user_id:
          type: integer
          example: 123
          description: 'ID of the user to be modified. You must be the owner of the user in order to do any modification.'
        diet_labels:
          type: array
          items:
            type: string
            enum: ["Balanced", "High-Fiber", "High-Protein", "Low-Carb", "Low-Fat", "High-Sodium", "Low-Sodium"]
          example: ['Balanced', 'Low-Carb']
          description: 'This attribute is optional.  These are the diet labels of the user. Possible values are ["Balanced", "High-Fiber", "High-Protein", "Low-Carb", "Low-Fat", "High-Sodium", "Low-Sodium"]. The information is used for personalising the recipe recommendation for user.'
        food_restrictions:
          type: array
          items:
            type: string
            enum: ['Alcohol-Free','Immuno-Supportive','Celery-Free','Crustacean-Free','Dairy-Free','Egg-Free','Fish-Free','Fodmap-Free','Gluten-Free','Keto-Friendly','Kidney-Friendly','Kosher','Low-Potassium','Lupine-Free','Mustard-Free','Low-Fat-Abs','No-oil-added', 'Low-Sugar','Paleo','Peanut-Free','Pescatarian', 'Pork-Free','Red-Meat-Free','Sesame-Free','shellfish-Free','Soy-Free','Sugar-Conscious','Tree-Nut-Free','Vegan','Vegetarian','Wheat-Free']
          example: ['Alcohol-Free', 'Dairy-Free']
          description: 'This attribute is optional. These are food restrictions and allergies of the user. The information is used for personalising the recipe recommendation for user'
        weight_system:
          type: string
          enum: [metric, imperial]
          description: Set the user's preferred system for measuring weights.
        preferred_measure:
          type: string
          enum: [weight, cooking_measures, portions]
          description: Set the user's preferred way to see food quantity information.
      required:
        - user_id

    AutocomputeNutrientsBody:
      type: object
      properties:
        user_id:
          type: integer
          example: 1238
          description: 'ID of the user to add a goal to. You must be the owner have access to the user in order to do 
                        any modification.'
        nutrient_list:
          type: array
          example: ["MG", "FAT"]
          description: 'Nutrients you want compute automatically taking into account the force parameter. If empty or
                        not passed all the available nutrients will be computed'
        force:
          type: boolean
          example: true
          description: 'If true, every nutrient in nutrient_list will be recalculated. If false, only the ones with no 
                        previous goal. If not passed, it is false by default'
      required:
        - user_id

    NutritionalGoalsBody:
      type: object
      properties:
        nutrient_code:
          type: string
          example: "VITC"
          enum: ["CA", "CHOCDF", "CHOLE", "ENERC_KCAL", "FAMS", "FAPU", "FASAT", "FAT", "FATRN", "FE", "FIBTG", "FOLAC", "FOLDFE", "FOLFD", "K", "MG", "NA", "NIA", "P", "PROCNT", "RIBF", "SUGAR", "SUGAR.added", "THIA", "TOCPHA", "VITA_RAE", "VITB12", "VITB6A", "VITC", "VITD", "VITK1", "ZN", 'F20D5', 'F22D6', 'F18D3CN3']
          description: 'Code of the nutritional indicator. Read the endpoint description to find all the options with their related unit.'
        min_amount:
          type: float
          example: 1650.00
          description: 'Minimum value of the goal range.'
        max_amount:
          type: float
          example: 1890.00
          description: 'Maximum value of the goal range.'
        user_id:
          type: integer
          example: 123
          description: 'Optional for user managers/companies. ID of the user to add a goal to. You must be the owner of / have access to the user in order to do any modification.'
      required:
        - nutrient_code
        - min_amount
        - max_amount

    PostBodyMeasure:
      type: object
      properties:
        name:
          type: string
          example: "height"
          description: 'Name of the body measure to be created'
        unit:
          type: string
          example: "cm"
          description: 'Unit of the body measure to be created'
      required:
        - name
        - unit

    PostUserBodyMeasure:
      type: object
      properties:
        measure_name:
          type: string
          example: "height"
          description: 'Name of the user body measure to be inserted'
        value:
          type: float
          example: 185
          description: 'Value of the user body measure to be inserted'
        timestamp:
          type: string
          example: "2023/01/20, 00:00:00"
          description: "Timestamp of the user body measurement being inserted"
      required:
        - measure_name
        - value

    DeleteBodyMeasureBody:
      type: object
      properties:
        name:
          type: string
          example: "height"
          description: 'Name of the body measure to be deleted'
      required:
        - name

    DeleteUserBodyMeasureBody:
      type: object
      properties:
        measure_name:
          type: string
          example: "weight"
          description: 'Name of the user body measure to be deleted'
        timestamp:
          type: string
          example: "2023/01/20, 00:00:00"
          description: "Timestamp of the user body measurement being deleted"
      required:
        - measure_name

    ModifyNutritionSchema:
      type: object
      description: the parameter 'nutritional_indicators_per_item' has to be provided if the image has a prediction of type segmentation, otherwise the parameter 'nutritional_indicators' has to be provided if the image has a prediction of type recognition.
      properties:
        imageId:
          type: integer
          description: ID of the image to be modified. The image ID is obtained in the recognition response. It can be obtained through the nutritional information history endpoint too. The user must have access to the image in order to modify it.
          example: 123456
        nutritional_indicators:
          type: array
          description: a list with all the nutritional codes can be provided. Any non-specified nutritional code will be set to 0.
          items:
            type: object
            properties:
              indicatorCode:
                type: string
                example: FE
              indicatorAmount:
                type: float
                example: 6.7
          example: [ { 'indicatorCode': 'FE', 'indicatorAmount': 6.7 }, { 'indicatorCode': 'CA', 'indicatorAmount': 2.8 } ]
        nutritional_indicators_per_item:
          type: object
          description: an object with food item identifiers as keys and lists as values has to be provided. Each list can include all nutritional codes. Any non-specified nutritional code will be set to 0.
          properties:
            food_item_id_1:
              type: array
              items:
                type: object
                properties:
                  indicatorCode:
                    type: string
                    example: FE
                  indicatorAmount:
                    type: float
                    example: 6.7
            food_item_id_2:
              type: array
              items:
                type: object
                properties:
                  indicatorCode:
                    type: string
                    example: FE
                  indicatorAmount:
                    type: float
                    example: 6.7
      required:
        - imageId

    ModifyNutritionBulkSchema:
      type: object
      properties:
        intakes:
          type: array
          items:
            $ref: '#/components/schemas/ModifyNutritionSchema'
      required:
        - intakes

    ModifyImageTimestampBody:
      type: object
      properties:
        timestamp:
          type: string
          description: "Timestamp that will be assigned to the image. It will take into account the user's (owner of the image) timezone. Following the format '%Y/%m/%d, %H:%M:%S'."
          example: "2021/06/02, 21:19:15"
        imageId:
          type: integer
          description: ID of the image to be modified. The image ID is obtained in the recognition response. It can be obtained through the nutritional information history endpoint too. The user must have access to the image in order to modify it.
          example: 123456
      required:
        - timestamp
        - imageId

    ModifyImageOccasionBody:
      type: object
      properties:
        occasion:
          type: string
          description: "Occasion that will be assigned to the image. The company occasions or the default ones (breakfast, lunch, dinner, snack)."
          example: "lunch"
        imageId:
          type: integer
          description: "ID of the image to be modified. The image ID is obtained in the recognition response. It can be obtained through the nutritional information history endpoint too. The user must have access to the image in order to modify it."
          example: 123456
      required:
        - occasion
        - imageId

    CreateOccasionGroupBody:
      type: object
      properties:
        occasions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "morningmeal"
              init_time:
                type: string
                format: time
                example: "07:00:00"
              end_time:
                type: string
                format: time
                example: "08:00:00"
              default:
                type: boolean
                example: false
              maps_to_occasion:
                type: string
                example: "breakfast"
            required:
              - name
              - default
              - maps_to_occasion
          example: [
            {
              "name": "morningmeal",
              "init_time": "07:00:00",
              "end_time": "08:00:00",
              "default": false,
              "maps_to_occasion": "breakfast"
            },
            {
              "name": "middaymeal",
              "init_time": "09:00:00",
              "end_time": "15:00:00",
              "default": false,
              "maps_to_occasion": "lunch"
            },
            {
              "name": "lastmeal",
              "init_time": "20:00:00",
              "end_time": "22:00:00",
              "default": false,
              "maps_to_occasion": "dinner"
            },
            {
              "name": "Picar",
              "default": true,
              "maps_to_occasion": "snack"
            }
          ]

    CreateOccasionTranslationBody:
      type: object
      properties:
        occasion_id:
          type: integer
          description: "Occasion id. Use /getOccasionGroups to obtain them"
          example: 6
        translation:
          type: string
          description: "Translation to the specified language"
          example: "Desayuno"
        language:
          type: string
          description: "Language of the translation"
          example: "spa"

    InputManualDishBody:
      type: object
      properties:
        timestamp:
          type: string
          description: "Timestamp that will be assigned to the image. It will take into account the user's timezone. Following the format '%Y/%m/%d, %H:%M:%S'. If this is not provided it will be set to the current time as default."
          example: "2021/06/02, 21:19:15"
        class_ids:
          type: array
          items:
            type: integer
          example: [ 52, 53 ]
          description: "A list of general class ids provided by /getAllClasses. If a list has multiple elements then it will be considered that it is a combo dish."
        food_group_ids:
          type: array
          items:
            type: integer
          example: [ 2, 5 ]
          description: "A list of food group ids."

    InputManualAssignDishBody:
      type: object
      properties:
        api_user_ids:
          type: array
          items:
            type: integer
            description: "API user IDs."
          example: [ 12, 13, 14 ]
        timestamp:
          type: string
          description: "Timestamp that will be assigned to the image. It will take into account the user's timezone. Following the format '%Y/%m/%d, %H:%M:%S'. If this is not provided it will be set to the current time as default."
          example: "2021/06/02, 21:19:15"
        class_ids:
          type: array
          items:
            type: integer
          example: [52, 53]
          description: "A list of general class ids provided by /getAllClasses. If a list has multiple elements then it will be considered that it is a combo dish."
        food_group_ids:
          type: array
          items:
            type: integer
          example: [2, 5]
          description: "A list of food group ids."
      required:
        - api_user_ids

    CreateAPIUserManagerBody:
      type: object
      properties:
        username:
          type: string
          description: "Username that will be assigned to the APIUserManager account"
          example: "sampleusername"
        email:
          type: string
          description: "Email that will be assigned to the APIUserManager account."
          example: "sampleemail@email.com"
        password:
          type: string
          description: "Password that will be assigned to the APIUserManager account."
          example: "securepassword"
        language:
          type: string
          default: 'eng'
          example: 'eng'
          enum: [spa, cat, eng, ita, nld, fre, ger, tur, gre]
          description: 'Default language assigned to the APIUserManager. It must be a three-letter ISO 639-2/T code'
      required:
        - username
        - email
        - password

    APIUserManagerAccessBody:
      type: object
      properties:
        manager_id:
          type: integer
          description: "User ID of the APIUserManager."
          example: 123
        user_id:
          type: integer
          description: "User ID of the APIUser."
          example: 321

      required:
        - manager_id
        - user_id

    APIUserManagerLogin:
      type: object
      properties:
        username:
          type: string
          description: "Unique username or email associated to the APIUserManager."
          example: myemail@gmail.com
        password:
          type: string
          description: "Password associated to the APIUserManager."
          example: pass321

      required:
        - manager_id
        - user_id

    User:
      type: object
      properties:
        user:
          type: string
          example: 'exampleusername'
        token:
          type: string
          example: '410b152be7f'
        id:
          type: integer
          example: 342
        enabled:
          type: boolean
          example: true
          description: 'Either if the APIUser has access to the intake report endpoints and consume monthly credits.'
        language:
          type: string
          default: 'eng'
          example: 'eng'
          enum: [spa, cat, eng, ita, nld, fre, ger, tur, gre]
          description: 'Default language assigned to the created APIUser. Applicable to food names. It must be a three-letter ISO 639-2/T code'
      required:
        - username
        - email
        - password

    LanguagesResponse:
      type: object
      properties:
        spa:
          type: string
          example: 'spanish'
        cat:
          type: string
          example: 'catalan'
        eng:
          type: string
          example: 'english'
        ita:
          type: string
          example: 'italian'
        nld:
          type: string
          example: 'dutch'
        fre:
          type: string
          example: 'french'
        ger:
          type: string
          example: 'german'
        tur:
          type: string
          example: 'turkish'
        gre:
          type: string
          example: 'greek'
      description: "JSON containing each language available in our API. The key of the object corresponds to the ISO 639-2/T code that corresponds to each available language."

    ImageRecognition:
      type: object
      properties:
        files:
          type: string
          format: binary
          description: 'Image sent in files'
        language:
          type: string
          default: 'eng'
          enum: [spa, cat, eng, ita, nld, fre, ger, tur, gre]
          description: "Desired language for the response. It must be a three-letter ISO 639-2/T code. Defaults to the APIUser's assigned language or english."
      required:
        - image



    IngredientConfirmSchema:
      type: object
      description: Nutritional information related to one of the food segments/regions detected or confirmed on the image.
      properties:
        ingredientId:
          description: A valid ingredient ID from the logmeal dataset. Call /dataset/ingredients for the list of available ingredients.
          type: integer
          example: 140
        ingredientAmount:
          description: (Optional) Weight in grams for this ingredient. If not provided we'll use the average quantity for this ingredient instead.
          type: integer | float
          example: 75
      required:
        - ingredientId

    ConfirmFoodDish:
      type: object
      properties:
        imageId:
          type: integer
          example: 1268462
          description: "ID of the image which will have it's dishes confirmed."
        confirmedClass:
          type: array
          items:
            type: integer
            example: [110, 'free text label']
          description: "Classes to be confirmed for the provided imageId. This variable is a list of integers containing all the confirmed classes. Note that whenever the source is set to 'logmeal' an integer corresponding to an existent dish must be provided in the list. If the source is other than 'logmeal', than a string can be provided in the list along with the integer ids as the name of that particular confirmed class."
        source:
          type: array
          items:
            type: integer
            example: [ 'logmeal', 'other' ]
          description: "Source of the 'confirmedClass' being confirmed. If a list of 'confirmedClass' are provided, the source provided can also be a list containing each source relative to the 'confirmedClass' list."
        food_item_position:
          type: array
          items:
            type: integer
            example: [ 1, 'extra_dish_1' ]
          description: "Integer identifiers pointing to one of the detected regions in /segmentation endpoints or string unique identifier if the confirmed dish does not correspond to any of the detected food regions/segments."
      required:
        - imageId
        - confirmedClass
        - source

    WasteConfirmFood:
      type: object
      properties:
        image_id_waste:
          type: integer
          example: 1268462
          description: "ID of the waste image which will have it's dishes confirmed."
        confirmedClass:
          type: array
          items:
            type: integer
            example: [ 110, 435 ]
          description: "Classes to be confirmed for the provided imageId. This variable is a list of integers containing all the confirmed classes. Note that whenever the source is set to 'logmeal' an integer corresponding to an existent dish must be provided in the list. If the source is other than 'logmeal', than a string can be provided in the list along with the integer ids as the name of that particular confirmed class."
        source:
          type: array
          items:
            type: integer
            example: [ 'logmeal', 'logmeal' ]
          description: "Source of the 'confirmedClass' being confirmed. If a list of 'confirmedClass' are provided, the source provided can also be a list containing each source relative to the 'confirmedClass' list."
        food_item_position:
          type: array
          properties:
          items:
            type: integer
            example: [ 1, 'extra_dish_1' ]
          description: "Integer identifiers pointing to one of the detected regions in /segmentation endpoints or string unique identifier if the confirmed dish does not correspond to any of the detected food regions/segments."
        quantity:
          type: object
          example: {"1": 63.2, "extra_dish_1": 80.0}
          description: "Object with the quantity of the intake for any regions defined as key-value pairs."
      required:
        - imageId
        - confirmedClass
        - source
        - food_item_position
        - quantity

    ConfirmFoodGroup:
      type: object
      properties:
        imageId:
          type: integer
          example: 1268462
          description: "ID of the image which will have it's food groups confirmed."
        confirmedFoodGroups:
          type: array
          items:
            type: integer
            example: [8,2]
          description: "Food group ids to be confirmed for the provided imageId. This variable is a list of integers."
      required:
        - imageId
        - confirmedFoodGroups

    Foodtype:
      type: object
      properties:
        imageId:
           type: integer
           example: 4
        type:
           type: integer
           example: 1
      required:
        - imageId
        - type
    foodFamily:
      type: array
      items:
        type: object
      example: {
            "id": 8,
            "name": "vegetables",
            "prob": 0.9007113814353943
        }
    tops:
      type: array
      items:
        type: string
      example: ['noodles_pasta','soup','vegetable_fruits']
    probs:
      type: array
      items:
        type: number
      example: [0.9995937943458557,0.60037020735908299685,0.5715842639328912]
    recognition_results:
      type: object
      properties:
        tops:
          $ref: "#/components/schemas/tops"
        probs:
          $ref: "#/components/schemas/probs"
        ids:
          type: array
          items:
            type: integer
          example: [1,2,3,4,5]

    IngredientsList:
      type: array
      items:
        $ref: "#/components/schemas/IngredientObject"
      description: An array of ingredients objects.
      example:
        - id: 114
          name: Eggplant
        - id: 569
          name: Egg

    IngredientObject:
      type: object
      properties:
        avgQuantity:
          type: number
          description: Average quantity of this ingredient in all recipes.
        id:
          type: integer
          example: 562
        modifier_type:
          type: string
          enum: [null, sugar, salt, oil]
        name:
          type: string
          example: 'oil'
        unit:
          type: string
          enum: [g, ml]
        state:
          type: string
          enum: [ solid, liquid ]
      description: An object describing an ingredient, with its id and name translated into your language.

    ReferenceIngredientsResponse:
      type: object
      properties:
        salt:
          $ref: "#/components/schemas/IngredientsList"
        sugar:
          $ref: "#/components/schemas/IngredientsList"
        oil:
          $ref: "#/components/schemas/IngredientsList"

    NutritionalInfo:
      type: object
      properties:
        foodName:
          type: string
          example: "spaghetti bolognese"
          description: "Name of the food/recipe. If there are multiple foods for this image, a list of foodNames will be returned instead."
        hasNutritionalInfo:
          type: boolean
          example: true
          description: "Boolean that describes if the image has nutritional information associated to it."
        ids:
          type: integer
          example: 324
          description: "IDs of the dishes the information has been obtained from. If there are multiple foods for this image, a list of ids will be returned instead. For dishes coming from manual inputs (not in our database) a null ID will be provided. Note that dishes with null ids won't have effect on the nutritional information returned."
        imageId:
          type: integer
          example: 323425
          description: "ID of the image the nutrients have been queried from."
        nutritional_info:
          $ref: "#/components/schemas/NutritionalInfoObject"
        nutritional_info_per_item:
          $ref: "#/components/schemas/NutritionalInfoPerItemObject"
        serving_size:
          type: float
          example: 16.0
          description: "Detected weight for the product if detected automatically or confirmed by the user. Depending on the context, it can also correspond to the standard quantity of food corresponding to one portion for the average person."

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    Error200ImageRecognition:
      type: object
      properties:
        imageId:
          type: integer
          example: 4
        foodType:
          type: string
          example: 'food'
        foodFamily:
          $ref: "#/components/schemas/foodFamily"
        recognition_results:
          $ref: "#/components/schemas/recognition_results"
    Error200:
      type: object
      properties:
        imageId:
          type: integer
          example: 3
        recognition_results:
          type: object
          properties:
            tops:
              type: array
              items:
                type: string
              example: [ 'noodles' , 'paprika' ]
            probs:
              type: array
              items:
                type: number
              example: [ 0.9981536269187927, 0.9818391001503914595 ]
            ids:
              type: array
              items:
                type: integer
              example: [1, 2]
            foodType:
              type: string
              example: "combination dish"
    Error403:
      type: object
      properties:
        message:
          type: string
          example: 'You are not allowed to this method.'

    CreateCustomRecipes:
      type: object
      properties:
        dish_name:
          type: string
          example: "Salad with tomato and seeds"
        sugar_modulation:
          type: bool
          example: "true"
          enum: ["true", "false"]
          default: "false"
          description: "Whether the user could possibly choose to include added sugar to the recipe (e.g. coffees, yogurts, etc.)."
        ingredient_list:
          type: array
          description: Ingredient can only be identified by ingredientId or by ingredientName. Not both. Provide only one.
          items:
            type: object
            properties:
              ingredientId:
                type: integer
                example: 15
              ingredientName:
                type: string
                example: Spirulina
              ingredientAmount:
                type: float
                example: 5.0
            required:
              - ingredientId
              - ingredientName
              - ingredientAmount
          example: [{'ingredientId': 14, 'ingredientAmount': 3.0}, {'ingredientId': 59, 'ingredientAmount': 4.5}]
        nutritional_indicators:
          type: array
          items:
            type: object
            properties:
              indicatorCode:
                type: string
                example: FE
              indicatorAmount:
                type: float
                example: 6.7
            required:
            - indicatorCode
            - indicatorAmount
          example: [{'indicatorCode': 'FE', 'indicatorAmount': 6.7}, {'indicatorCode': 'CA', 'indicatorAmount': 2.8}]
        translations:
          type: object
          properties:
            eng:
              type: string
              example: "Salad with tomato and seeds"
            spa:
              type: string
              example: "Ensalada con tomate y semillas"
      required:
        - dish_name
        - ingredient_list
        - nutritional_indicators

    SegmentationQuantityInputs:
      type: object
      properties:
        cam_focal_length:
          description: "Camera focal length extracted with LogMeal SDK."
          type: object
          properties:
            x:
              type: float
              example: 494.32916
            y:
              type: float
              example: 495.31903
        cam_principal_point:
          description: "Camera principal point extracted with LogMeal SDK."
          type: object
          properties:
            x:
              type: float
              example: 321.3225
            y:
              type: float
              example: 240.44427
        depth_image_size:
          description: "Size in pixels of the depth image extracted with LogMeal SDK."
          type: object
          properties:
            width:
              type: integer
              example: 160
            height:
              type: integer
              example: 90
        camera_pose:
          description: "List of floats that describe the camera pose extracted using the LogMeal Depth SDK."
          type: array
          items:
            type: float
          example: [-0.7825612, -0.06980409, 0.61864835, 0, 0.43548357, 0.64876264, 0.6240682, 0, -0.44491845, 0.75778264, -0.47729802, 0, -0.30382055, -0.17176536, -0.7768527, 1]
        depth_version:
          description: "Version of the depth image provided. This depends on the SDK used iOS/Android."
          type: string
          enum: ['android', 'ios']
          example: 'ios'
      required:
        - cam_focal_length
        - cam_principal_point
        - depth_image_size
        - camera_pose
        - depth_version

    WasteIntakeInputs:
      type: object
      properties:
        preconsumption_image_id:
          description: "ID or imageId of the pre-consumption image attached to the sent waste/leftovers image."
          type: integer
          example: 148414
        cam_focal_length:
          description: "Camera focal length extracted with LogMeal SDK."
          type: object
          properties:
            x:
              type: float
              example: 494.32916
            y:
              type: float
              example: 495.31903
        cam_principal_point:
          description: "Camera principal point extracted with LogMeal SDK."
          type: object
          properties:
            x:
              type: float
              example: 321.3225
            y:
              type: float
              example: 240.44427
        depth_image_size:
          description: "Size in pixels of the depth image extracted with LogMeal SDK."
          type: object
          properties:
            width:
              type: integer
              example: 160
            height:
              type: integer
              example: 90
        camera_pose:
          description: "List of floats that describe the camera pose extracted using the LogMeal Depth SDK."
          type: array
          items:
            type: float
          example: [ -0.7825612, -0.06980409, 0.61864835, 0, 0.43548357, 0.64876264, 0.6240682, 0, -0.44491845, 0.75778264, -0.47729802, 0, -0.30382055, -0.17176536, -0.7768527, 1 ]
        depth_version:
          description: "Version of the depth image provided. This depends on the SDK used iOS/Android."
          type: string
          enum: [ 'android', 'ios' ]
          example: 'ios'
      required:
        - preconsumption_image_id

    EditCustomRecipes:
      type: object
      properties:
        dish_name:
          type: string
          example: "Salad with tomato and seeds"
        sugar_modulation:
          type: bool
          example: "true"
          enum: [ "true", "false" ]
          default: "false"
          description: "Whether the user could possibly choose to include added sugar to the recipe (e.g. coffees, yogurts, etc.)."
        ingredient_list:
          type: array
          description: "Ingredient can only be identified by ingredientId or by ingredientName. Not both. Provide only one."
          items:
            type: object
            properties:
              ingredientId:
                type: integer
                example: 15
              ingredientName:
                type: string
                example: Spirulina
              ingredientAmount:
                type: float
                example: 5.0
          example: [{'ingredientId': 14, 'ingredientAmount': 3.0}, {'ingredientId': 59, 'ingredientAmount': 4.5}]
        nutritional_indicators:
          type: array
          items:
            type: object
            properties:
              indicatorCode:
                type: string
                example: FE
              indicatorAmount:
                type: float
                example: 6.7
          example: [{'indicatorCode': 'FE', 'indicatorAmount': 6.7}, {'indicatorCode': 'CA', 'indicatorAmount': 2.8}]
        translations:
          type: object
          properties:
            eng:
              type: string
              example: "Salad with tomato and seeds"
            spa:
              type: string
              example: "Ensalada con tomate y semillas"

    AssignCustomRecipes:
      type: object
      properties:
        api_user_ids:
          type: array
          items:
            type: integer
            description: "API user IDs."
          example: [12, 13, 14]
        custom_recipe_id:
          type: integers
          description: "Custom recipe ID."
          example: 123
        date:
          type: string
          description: "The specific date when the user needs to consume that assigned custom recipe. Following the format 'YYYY-MM-DD"
          example: "2021-10-19"
        time:
          type: string
          description: "The specific time when the user needs to consume that assigned custom recipe. Following the format '%H:%M:%S'."
          example: "21:35:16"
      required:
        - api_user_ids
        - custom_recipe_id
        - date
        - time

    # RECOGNITION ENDPOINT RESPONSE OBJECTS
    FoodFamilyArray:
      description: "Array containing multiple dict entries for each predicted foodFamily, with their respective probabilities. To obtain the available food families refer to '/v2/dataset/foodGroups'."
      type: array
      items:
        type: object
        description: "Object containing information of an specific foodFamily, with its respective prediction results."
        properties:
          id:
            type: integer
            example: 14
            description: "ID of the foodFamily obtained from the recognition process."
          name:
            type: string
            example: "meat"
            description: "Name of the foodFamily obtained from the recognition process."
          prob:
            type: float
            example: 0.5
            description: "Probability obtained from the recognition process for the given foodFamily."

    Food_TypesArray:
      description: "Array containing multiple dict entries for each predicted foodType, with their respective probabilities."
      type: array
      items:
        type: object
        description: "Object containing information of an specific foodType, with its respective prediction results."
        properties:
          id:
            type: integer
            example: 223
            description: "ID of the foodType obtained from the recognition process."
          name:
            type: "string"
            example: "drinks"
            description: "Name of the foodType obtained from the recognition process."
          prob:
            type: float
            example: 0.6
            description: "Probability obtained from the recognition process for the given foodType."

    FoodTypeArray:
      description: "Array containing one entry for each recognition result. This foodtype corresponds to the recognized dish foodtype (based on the position within the array). Confirmed images will only have the foodtype of the confirmed result."
      type: array
      items:
        type: object
        description: "Object containing information of an specific foodType, with its respective prediction results."
        properties:
          id:
            type: integer
            example: 2
            description: "ID of the foodType of the recognition result at the given position."
          name:
            type: "string"
            example: "drinks"
            description: "Name of the foodType of the recognition result at the given position."

    FoodTypeObject:
      description: "Object containing the information of the most probable/relevant food type appearing on the image."
      type: object
      properties:
        id:
          type: integer
          example: 2
          description: "ID of the most probable/relevant foodType on the image."
        name:
          type: "string"
          example: "drinks"
          description: "Name of the most probable/relevant foodType on the image."

    ModelVersionsObject:
      description: "Object containing the model versions used for this prediction. Only the models that have been used
      during the call will be present in this response. In order to obtain all the models available you can refer to '/v2/version/allModels'."
      type: object
      properties:
        __MODEL_NAME__:
          type: string
          example: "v0.7"
          description: "Version of the '__MODEL_NAME__' model used."

    MatchesMappingPreToWaste:
      description: "Object containing the food_item_position mapping between the preconsumption image (keys, left-hand side) and
      the waste image (values, right-hand side) original predictions. See /getIntakesList for more information. If some element is
      mapped to null means that the food item is not present in the waste image, thus it was completely consumed."
      type: object
      properties:
        __PRECONSUMPTION_IMAGE_FOOD_POSITION__:
          type: integer
          example: __WASTE_IMAGE_FOOD_POSITION__

    RecognitionResultsArray:
      description: "Array containing the results of the recognition process."
      type: array
      items:
        description: "Object containing the information of the class/dish detected by the models, with their respective probability generated by the recognition process."
        type: object
        properties:
          id:
            description: "ID of the detected class."
            type: integer
            example: 1474
          name:
            description: "Name of the detected class."
            type: string
            example: "mushroom cream"
          prob:
            description: "Probability generated by the recognition process. The sum of all the probabilities among the RecognitionResultsArray will always be 1."
            type: float
            example: 0.9973669648170471
          subclasses:
            description: "Array of subclasses available for the detected class."
            type: array
            items:
              type: object
              properties:
                id:
                  description: "ID of the subclass."
                  type: integer
                  example: 1474
                name:
                  description: "Name of the subclass."
                  type: string
                  example: "cream brown soup"
                prob:
                  description: "Probability of the subclass generated by the recognition process."
                  type: float
                  example: 0.9973669648170471

          nutri_score:
            type: object
            properties:
                nutri_score_category:
                  description: "The  Nutri-Score category for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                  type: string
                  example: A
                  enum : [A,B,C,D,E]
                nutri_score_standardized:
                  description: "The standardized Nutri-Score values for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                  type: integer
                  example: 70

    CenterObject:
      description: "Center for the detected food item (center of contained_bbox)."
      type: object
      properties:
        x:
          type: integer
          example: 162
        y:
          type: integer
          example: 367

    ContainedBBoxObject:
      description: "Coordinates of the bounding box that contains the detected food item."
      type: object
      properties:
        x:
          type: integer
          example: 40
        y:
          type: integer
          example: 231
        h:
          type: integer
          example: 273
        w:
          type: integer
          example: 245

    PolygonObject:
      description: "Specific polygon surrounding the detected food item. Format: [x1, y1, x2, y2, x3, y3, ..., xN, yN], by drawing lines from (x1, y1) to (x2, y2), ..., (xN-1, yN-1) to (xN, yN) and (xN, yN) to (x1, y1), the whole polygon can be drawn."
      type: array
      items:
        type: integer
      example: [ 92, 231, 91, 232, 85, 232, 85, 233, 95, 231 ]

    SegmentationResultsArray:
      description: "Array containing the results of the multiple food segmentation and recognition process. Each object in the array corresponds to one food item or food region detected on the image."
      type: array
      items:
        description: "Object containing the information of one of the food items or food regions found by the algorithms, with their respective probability generated by the recognition process. All the returned attributes containing coordinates are provided with respect to the sent image size. All coordinates have their origin (0,0) at the top-left pixel/corner of the image."
        type: object
        properties:
          food_item_position:
            description: "Incremental position starting from 1 that identifies the food item in the segmentation_results list. This is useful for reporting specific information for each food item  (see the endpoints /confirm/dish, /confirm/quantity and /confirm/ingredients)"
            type: integer
            example: 1
          center:
            $ref: "#/components/schemas/CenterObject"
          contained_bbox:
            $ref: "#/components/schemas/ContainedBBoxObject"
          polygon:
            $ref: "#/components/schemas/PolygonObject"
          recognition_results:
            description: "List of the most probable dishes/food labels present in the current food segment/region."
            type: array
            items:
              type: object
              properties:
                id:
                  description: "Unique ID of the detected food dish."
                  type: integer
                  example: 1474
                name:
                  description: "Name of the detected dish."
                  type: string
                  example: "mushroom cream"
                prob:
                  description: "Probability or confidence score for this food dish or label."
                  type: float
                  example: 0.9973669648170471
                foodType:
                  description: "Object containing the information of the food type associated to the detected food dish/label."
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                      description: "ID of the foodType."
                    name:
                      type: "string"
                      example: "drinks"
                      description: "Name of the foodType."
                foodFamily:
                  description: "Array containing multiple dict entries for each foodFamily associated to the detected food dish/item."
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 14
                        description: "ID of one of the foodFamilies associated to the detected food dish/label."
                      name:
                        type: string
                        example: "meat"
                        description: "Name of one of the foodFamilies associated to the detected food dish/label."
                subclasses:
                  description: "List of subclasses that are semantically related to the detected food dish/label."
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: "Unique ID of the subclass."
                        type: integer
                        example: 1474
                      name:
                        description: "Name of the subclass."
                        type: string
                        example: "mushroom cream"
                      prob:
                        description: "Probability or confidence score for this subclass."
                        type: float
                        example: 0.9973669648170471
                      foodType:
                        description: "Object containing the information of the food type associated to the subclass."
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                            description: "ID of the foodType."
                          name:
                            type: "string"
                            example: "drinks"
                            description: "Name of the foodType."
                      foodFamily:
                        description: "Array containing multiple dict entries for each foodFamily associated to the subclass."
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 14
                              description: "ID of one of the foodFamilies associated to the subclass."
                            name:
                              type: string
                              example: "meat"
                              description: "Name of one of the foodFamilies associated to the subclass."
                nutri_score:
                  description: "Nutritional score associated to the recognized food item (this information is only provided if you have a Monitor plan or higher)."
                  type: object
                  properties:
                    nutri_score_category:
                      description: "The  Nutri-Score category for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                      type: string
                      example: A
                      enum: [ A,B,C,D,E ]
                    nutri_score_standardized:
                      description: "The standardized Nutri-Score values for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                      type: integer
                      example: 70

    NutriScoreObject:
      description: "Nutritional score associated to the recognized food item (this information is only provided if you have a Monitor plan or higher)."
      type: object
      properties:
        nutri_score_category:
          description: "The  Nutri-Score category for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
          type: string
          example: A
          enum: [ A,B,C,D,E ]
        nutri_score_standardized:
          description: "The standardized Nutri-Score values for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
          type: integer
          example: 70

    SegmentationQuantityResultsArray:
      description: "Array containing the results of the multiple food segmentation and recognition process. Each object in the array corresponds to one food item or food region detected on the image."
      type: array
      items:
        description: "Object containing the information of one of the food items or food regions found by the algorithms, with their respective probability generated by the recognition process. All the returned attributes containing coordinates are provided with respect to the sent image size. All coordinates have their origin (0,0) at the top-left pixel/corner of the image."
        type: object
        properties:
          food_item_position:
            description: "Incremental position starting from 1 that identifies the food item in the segmentation_results list. This is useful for reporting specific information for each food item  (see the endpoints /confirm/dish, /confirm/quantity and /confirm/ingredients)"
            type: integer
            example: 1
          center:
            $ref: "#/components/schemas/CenterObject"
          contained_bbox:
            $ref: "#/components/schemas/ContainedBBoxObject"
          polygon:
            $ref: "#/components/schemas/PolygonObject"
          serving_size:
            description: "Automatically estimated food quantity (in grams) for this region."
            type: float
            example: 324.453
          recognition_results:
            description: "List of the most probable dishes/food labels present in the current food segment/region."
            type: array
            items:
              type: object
              properties:
                id:
                  description: "Unique ID of the detected food dish."
                  type: integer
                  example: 1474
                name:
                  description: "Name of the detected dish."
                  type: string
                  example: "mushroom cream"
                prob:
                  description: "Probability or confidence score for this food dish or label."
                  type: float
                  example: 0.9973669648170471
                foodType:
                  description: "Object containing the information of the food type associated to the detected food dish/label."
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                      description: "ID of the foodType."
                    name:
                      type: "string"
                      example: "drinks"
                      description: "Name of the foodType."
                foodFamily:
                  description: "Array containing multiple dict entries for each foodFamily associated to the detected food dish/item."
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 14
                        description: "ID of one of the foodFamilies associated to the detected food dish/label."
                      name:
                        type: string
                        example: "meat"
                        description: "Name of one of the foodFamilies associated to the detected food dish/label."
                subclasses:
                  description: "List of subclasses that are semantically related to the detected food dish/label."
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: "Unique ID of the subclass."
                        type: integer
                        example: 1474
                      name:
                        description: "Name of the subclass."
                        type: string
                        example: "mushroom cream"
                      prob:
                        description: "Probability or confidence score for this subclass."
                        type: float
                        example: 0.9973669648170471
                      foodType:
                        description: "Object containing the information of the food type associated to the subclass."
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                            description: "ID of the foodType."
                          name:
                            type: "string"
                            example: "drinks"
                            description: "Name of the foodType."
                      foodFamily:
                        description: "Array containing multiple dict entries for each foodFamily associated to the subclass."
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 14
                              description: "ID of one of the foodFamilies associated to the subclass."
                            name:
                              type: string
                              example: "meat"
                              description: "Name of one of the foodFamilies associated to the subclass."
                nutri_score:
                  description: "Nutritional score associated to the recognized food item (this information is only provided if you have a Monitor plan or higher)."
                  type: object
                  properties:
                    nutri_score_category:
                      description: "The  Nutri-Score category for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                      type: string
                      example: A
                      enum: [ A,B,C,D,E ]
                    nutri_score_standardized:
                      description: "The standardized Nutri-Score values for the predicted dish. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                      type: integer
                      example: 70

    RecognitionResultsArrayFoodGroup:
      description: "Array containing the results of the recognition process."
      type: array
      items:
        description: "Object containing the information of the food groups detected by the models, with their respective probability generated by the recognition process."
        type: object
        properties:
          id:
            description: "ID of the detected food group."
            type: integer
            example: 2
          name:
            description: "Name of the detected food group."
            type: string
            example: "meat"
          prob:
            description: "Probability generated by the recognition process."
            type: float
            example: 0.9973669648170471

    RecognitionRecipesArray:
      description: "Array containing the results of the recipe recommendation process. The length of the array is equal to the number of recipes recommended by the recommendation process. Each entry contains information about one recipe. These recipes are different from custom recipes as well the recipes associated with ingredients and are only recommended to user with access to 'Recommend' plan. "
      type: array
      items:
        description: "Object containing the information of the each recipe recommended."
        type: object
        properties:

          food_class_id:
            description: "Class id of the food."
            type: integer
            example: 45
          recipe_name:
            description: "Name of the recipe"
            type: string
            example: "chicken tikka masala"
          image_url:
            description: "URL of the dish image."
            type: string
            example: "https://www.edamam.com/food-img/205/205e6bf2399b85d34741892ef91cc603.jpg"
          ingredients:
            type: array
            items:
              type: string
              example: [ "1 clove garlic", " broccoli" ]
            description: 'This attribute is optional. These are food restrictions and allergies of the user. The information is used for personalising the recipe recommendation for user'

          recipe_url:
            description: "URL of the website where the recipe can be found."
            type: string
            example: "http://www.seriouseats.com/recipes/2012/07/spring-rolls-with-pork-and-vegetable-medley.html"

          recipe_steps:
            description: "Array including the steps of the recipe."
            type: array
            items:
              type: object
              properties:
                id:
                  description: "Id of the step starting from 1 to higher. 1 means the first step of the recipe."
                  type: integer
                  example: 1
                step:
                  description: "Recipe step"
                  type: string
                  example: "Put it in the oven"
          meal_type :
            type: string
            example: "breakfast"
            description: "The occasion or type of the meal."

          cuisine_type:
            type: string
            example: "american"
            description: "The type of cuisine based on region."


    RecognitionOccasion:
      type: string
      example: "dinner"
      description: "This parameter is only returned if you have a LogMeal Plan with Nutritional Information history enabled.
      It defines which occasion of the day the intake has been done.

      If available, the occasions defined by your company. Otherwise the default occasions: One of ['breakfast', 'lunch', 'dinner', 'snack']"

    RecognitionOccasionInfo:
      description: "Contains information about the occasion."
      type: array
      items:
        type: object
        properties:
          id:
            description: "Occasion id. Null if default occasion"
            type: integer
            example: 45
          translation:
            description: "Translation to the language of the request if available. Not available with default occasions."
            type: string
            example: "cena"


    RecognitionImageID:
      type: integer
      example: 3
      description: "ID of the uploaded image."

    PreconsumptionImageID:
      type: integer
      example: 1423781
      description: "ID of the pre-consumption image."

    WasteImageID:
      type: integer
      example: 1425184
      description: "ID of the uploaded waste image."

    ProcessedImageSize:
      type: object
      properties:
        width:
          type: int
          example: 500
          description: Width of the processed image. Note that it might not match the uploaded image width. Use this information to interpret the segmentation polygon and the bounding box extracted by the food recognition algorithms.
        height:
          type: int
          example: 400
          description: Height of the processed image. Note that it might not match the uploaded image height. Use this information to interpret the segmentation polygon and the bounding box extracted by the food recognition algorithms.

    RecognitionTypeResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        occasion_info:
          $ref: "#/components/schemas/RecognitionOccasionInfo"
        food_types:
          $ref: "#/components/schemas/Food_TypesArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"

    RecognitionDishResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        foodType:
          $ref: "#/components/schemas/FoodTypeArray"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        recognition_results:
          $ref: "#/components/schemas/RecognitionResultsArray"

    RecognitionComboResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        foodType:
          $ref: "#/components/schemas/FoodTypeArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        recognition_results:
          $ref: "#/components/schemas/RecognitionResultsArray"

    RecognitionCompleteResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        occasion_info:
          $ref: "#/components/schemas/RecognitionOccasionInfo"
        foodType:
          $ref: "#/components/schemas/FoodTypeArray"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        recognition_results:
          $ref: "#/components/schemas/RecognitionResultsArray"

    SegmentationCompleteResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        processed_image_size:
          $ref: "#/components/schemas/ProcessedImageSize"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        occasion_info:
          $ref: "#/components/schemas/RecognitionOccasionInfo"
        foodType:
          $ref: "#/components/schemas/FoodTypeObject"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        segmentation_results:
          $ref: "#/components/schemas/SegmentationResultsArray"

    SegmentationCompleteQuantityResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        processed_image_size:
          $ref: "#/components/schemas/ProcessedImageSize"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        occasion_info:
          $ref: "#/components/schemas/RecognitionOccasionInfo"
        foodType:
          $ref: "#/components/schemas/FoodTypeObject"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        segmentation_results:
          $ref: "#/components/schemas/SegmentationQuantityResultsArray"

    WasteIntakeResponse:
      type: object
      properties:
        image_id_preconsumption:
          $ref: "#/components/schemas/PreconsumptionImageID"
        image_id_waste:
          $ref: "#/components/schemas/WasteImageID"
        processed_image_size:
          $ref: "#/components/schemas/ProcessedImageSize"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        foodType:
          $ref: "#/components/schemas/FoodTypeObject"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        segmentation_results:
          $ref: "#/components/schemas/SegmentationQuantityResultsArray"
        matches_mapping_pre_to_waste:
          $ref: "#/components/schemas/MatchesMappingPreToWaste"

    ConfirmTypeResponse:
      type: object
      properties:
        imageId:
          $ref: "#/components/schemas/RecognitionImageID"
        occasion:
          $ref: "#/components/schemas/RecognitionOccasion"
        foodType:
          $ref: "#/components/schemas/FoodTypeArray"
        foodFamily:
          $ref: "#/components/schemas/FoodFamilyArray"
        model_versions:
          $ref: "#/components/schemas/ModelVersionsObject"
        recognition_results:
          $ref: "#/components/schemas/RecognitionResultsArray"

    ConfirmDishResponse:
      type: object
      properties:
        recognition_results:
          $ref: "#/components/schemas/RecognitionResultsArray"

#        image_nutri_score:
#          type: object
#          properties:
#            nutri_score_category:
#              description: "The  Nutri-Score category for the image. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
#              type: string
#              example: A
#              enum: [A,B,C,D,E]
#            nutri_score_standardized:
#              description: "The standardized Nutri-Score values for the predicted image. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
#              type: integer
#              example: 70
        source:
          type: string
          example: "logmeal"
          description: "Source of the confirmed dish."


    ConfirmFoodGroupResponse:
      type: array
      items:
        $ref: "#/components/schemas/RecognitionResultsArrayFoodGroup"
    #######################################


    GetOccasionGroupsResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            active:
              type: array
              items:
                $ref: "#/components/schemas/OccasionGroup"
            default_occasions:
              type: array
              items:
                $ref: "#/components/schemas/Occasion"
            inactive:
              type: array
              items:
                $ref: "#/components/schemas/OccasionGroup"

    OccasionGroup:
      type: object
      properties:
        end_time:
          anyOf:
            - type: string
              example: "2023-05-10"
            - type: null
        id:
          type: integer
        init_time:
          type: string
          example: "2023-05-11"
        occasions:
          $ref: "#/components/schemas/OccasionList"

    Occasion:
      type: object
      properties:
        default:
          type: boolean
        end_time:
          anyOf:
            - type: string
              example: "18:00:00"
            - type: null
        id:
          anyOf:
            - type: integer
            - type: null
        init_time:
          anyOf:
            - type: string
              example: "15:00:00"
            - type: null
        maps_to_default:
          type: string
          example: "lunch"
        name:
          type: string
          example: "Second Meal"
        translations:
          $ref: "#/components/schemas/Translation"

    Translation:
      type: object
      properties:
        translations:
          type: object
          properties:
            cat:
              type: object
              properties:
                language:
                  type: string
                  example: "catalan"
                name:
                  type: string
                  example: "dinar"
            eng:
              type: object
              properties:
                language:
                  type: string
                  example: "english"
                name:
                  type: string
                  example: "lunch"
            esp:
              type: object
              properties:
                language:
                  type: string
                  example: "spanish"
                name:
                  type: string
                  example: "comida"
            fre:
              type: object
              properties:
                language:
                  type: string
                  example: "french"
                name:
                  type: string
                  example: "déjeuner"
            ger:
              type: object
              properties:
                language:
                  type: string
                  example: "german"
                name:
                  type: string
                  example: "Mittagessen"
            gre:
              type: object
              properties:
                language:
                  type: string
                  example: "greek"
                name:
                  type: string
                  example: "μεσημεριανό γεύμα"
            ita:
              type: object
              properties:
                language:
                  type: string
                  example: "italian"
                name:
                  type: string
                  example: "pranzo"
            nld:
              type: object
              properties:
                language:
                  type: string
                  example: "dutch"
                name:
                  type: string
                  example: "lunch"
            spa:
              type: object
              properties:
                language:
                  type: string
                  example: "spanish"
                name:
                  type: string
                  example: "comida"
            tur:
              type: object
              properties:
                language:
                  type: string
                  example: "turkish"
                name:
                  type: string
                  example: "öğle yemeği"

    OccasionList:
      type: array
      items:
        $ref: "#/components/schemas/Occasion"


    AvailableNutrientsResponse:
      type: object
      properties:
        NUTRIENT_CODE:
          type: object
          properties:
            labels:
              type: object
              properties:
                default:
                  type: string
                  example: "Calcium"
                english:
                  type: string
                  example: "Calcium"
                spanish:
                  type: string
                  example: "Calcio"
                italian:
                  type: string
                  example: "Calcio"
                dutch:
                  type: string
                  example: "Calcium"
                french:
                  type: string
                  example: "Calcium"
                catalan:
                  type: string
                  example: "Calci"
                turkish:
                  type: string
                  example: "Kalsiyum"
                german:
                  type: string
                  example: "Kalzium"
            unit:
              type: string
              example: "mg"
          description: "Contains all the information of the nutrient, including units and label translations."
      description: "For each available nutrient, the response will have an entry with NUTRIENT_CODE as key."

    ResponseGetAPIUserManagers:
      type: object
      properties:
        api_user_managers:
          type: object
          properties:
            USER_MANAGER_ID:
              type: object
              properties:
                email:
                  type: string
                  example: "samplemail@mail.com"
                  description: "Email of the APIUserManager."
                username:
                  type: string
                  example: "sampleusername"
                  description: "Username of the APIUserManager."
                token:
                  type: string
                  example: "f3a265ff8c1070c4f7d9b54b352d3384e936fe33"
                  description: "Token of the APIUserManager to access our API endpoints."
              description: "Object returned for each APIUserManager. Contains the basic information of the APIUserManager."
          description: "Object containing multiple entries, where the key of the object is each of the APIUserManager's IDs."
        result:
          type: string
          example: "APIUserManagers retrieved successfully!"

    ResponseCreateAPIUserManagers:
      type: object
      properties:
        user_data:
          type: object
          properties:
            id:
              type: integer
              example: 727
              description: "ID of the user manager that has been created."
            username:
              type: string
              example: "sampleusername"
              description: "Username of the user manager that has been created."
            email:
              type: string
              example: "samplemail@mail.com"
              description: "Email of the user manager that has been created."
            token:
              type: string
              example: "76eec63ccc13fa9626de4b1916461ef5c5e33946"
              description: "Token of the user manager that has been created."
          description: "Object that contains the basic information of the APIUserManager that has been created."
        result:
          type: string
          example: "APIUserManager created successfully!"

    ResponseGetAPIUserManagerAccess:
      type: object
      properties:
        accessible_users:
          type: array
          description: "List of APIUser IDs the APIUserManager has access to"
          items:
            type: integer
            description: "ID of an APIUser the APIUserManager has access to."
            example: [3242, 3243, 3367]
        extra_data:
          type: object
          properties:
            3242:
              $ref: "#/components/schemas/UserAccessExtraData_1"
            3243:
              $ref: "#/components/schemas/UserAccessExtraData_2"
            3367:
              $ref: "#/components/schemas/UserAccessExtraData_3"
        result:
          type: string
          example: "APIUserManagerAccess entries successfully obtained!"

    UserAccessExtraData_1:
      type: object
      properties:
        username:
          type: string
          example: "myapp-username-1"
        name:
          type: string
          example: "first-name-1"
        surname:
          type: string
          example: "last-name-1"

    UserAccessExtraData_2:
      type: object
      properties:
        username:
          type: string
          example: "myapp-username-2"
        name:
          type: string
          example: "first-name-2"
        surname:
          type: string
          example: "last-name-2"

    UserAccessExtraData_3:
      type: object
      properties:
        username:
          type: string
          example: "myapp-username-3"
        name:
          type: string
          example: "first-name-3"
        surname:
          type: string
          example: "last-name-3"

    GetNutritionalGoalsResponse:
      type: object
      properties:
        nutritional_goals:
          type: object
          properties:
            NutritionalGoalSample:
              $ref: "#/components/schemas/NutritionalGoalSampleObject"
        result:
          type: string
          example: "Nutritional goals successfully retrieved!"

    GetBodyMeasuresResponse:
      type: object
      properties:
        result:
          type: array
          description: List of body measures and their units.
          items:
            $ref: '#/components/schemas/BodyMeasure'

    GetUserBodyMeasuresResponse:
      type: object
      properties:
        result:
          type: array
          description: List of user body measures and their units.
          items:
            $ref: '#/components/schemas/UserBodyMeasure'

    GetNutritionalCustomIndicatorsResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            RSPBRRY_KTNS:
              type: object
              properties:
                default_label:
                  type: string
                  example: "Raspberry Keatons"
                id:
                  type: integer
                  example: 14
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        example: "spanish"
                      translation:
                        type: string
                        example: "Keatons de Frambuesa"
                unit:
                  type: string
                  example: "mg"
            CNZYM_Q10:
              type: object
              properties:
                default_label:
                  type: string
                  example: "Coenzyme Q10"
                id:
                  type: integer
                  example: 13
                translations:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                        example: "spanish"
                      translation:
                        type: string
                        example: "Coenzima Q10"
                  unit:
                    type: string
                    example: "mg"

    ErrorNutritionalIndicator:
      type: object
      properties:
        message:
          type: string
          example: "The provided nutritional indicator code does not exist. You can find the available nutrient codes in this response."
        code:
          type: integer
          example: 1315
        available_nutritional_codes:
          type: list
          example: ["CA", "CHOCDF", "CHOLE", "ENERC_KCAL", "FAMS", "FAPU", "FASAT", "FAT", "FATRN", "FE", "FIBTG", "FOLAC", "FOLDFE", "FOLFD", "K", "MG", "NA", "NIA", "P", "PROCNT", "RIBF", "SUGAR", "SUGAR.added", "THIA", "TOCPHA", "VITA_RAE", "VITB12", "VITB6A", "VITC", "VITD", "VITK1", "ZN", 'F20D5', 'F22D6', 'F18D3CN3']


    ErrorNutritionalGoalDoesNotExist:
      type: object
      properties:
        message:
          type: string
          example: "A nutritional goal for the provided nutrient code does not exist."
        code:
          type: integer
          example: 1316

    NutrientCodeSample:
      type: object
      description: "Contains basic information of the nutrient and it's amount found in the current food intake. The key 'NutrientCodeSample' will be replaced by each nutrient code (for each nutrient, a NutrientCodeSample will be returned)."
      properties:
        label:
          type: string
          description: "Translated label of the nutritional indicator."
          example: "Sugars"
        quantity:
          type: float
          description: "Amount of the nutrient."
          example: 20.3
        unit:
          type: string
          description: "Unit used to measure the quantity provided."
          example: "g"

    BodyMeasure:
      type: object
      properties:
        name:
          type: string
          description: The name of the body measure.
        unit:
          type: string
          description: The unit of measurement for the body measure.

    UserBodyMeasure:
      type: object
      properties:
        measure:
          type: string
          description: The name of the body measure.
        unit:
          type: string
          description: The unit of measurement for the body measure.
        timestamp:
          type: string
          description: Time and date of the measurement insertion.
        value:
          type: float
          description: Value inserted for the body measure.

    NutritionalGoalSampleObject:
      type: object
      description: "Contains the information of a nutritional goal. The key 'NutritionalGoalSample' will be replaced by each nutrient code that has a goal assigned."
      properties:
        average_value:
          type: float
          example: 15.0
          description: "Average value of the goal (mean between the ranges)."
        label:
          type: string
          description: "Translated label of the nutritional indicator."
          example: "Sugars"
        range:
          type: array
          example: [10.0, 20.0]
          description: "Array containing the range of the nutritional goal, with the minimum value at the first position, and the maximum at the second."
        unit:
          type: string
          description: "Unit used to measure the quantity provided."
          example: "g"

    DailyReferenceNutrientCodeSample:
      type: object
      description: "Contains information about the nutrient intake with relation to the daily reference value the user should intake. The key 'DailyReferenceNutrientCodeSample' will be replaced by each nutrient code we have daily reference values for. These are only approximations, they should be used as a simple reference to help the users understand how every single intake affects their total daily nutrients. "
      properties:
        label:
          type: string
          description: "Translated label of the nutritional indicator."
          example: "Sugars"
        level:
          type: string
          description: "Level that we assign to the nutrient with relation to the daily reference value the user should intake. It's value will be one of ['NONE', 'LOW', 'MEDIUM', 'HIGH']. You can use this levels to display which nutrients from the intake represent a high portion of the user's expected intake."
          example: "HIGH"
        percent:
          type: float
          description: "Percentage of the total amount of the nutrient the user should intake with relation to the daily reference value."
          example: 25.3

    NutritionalInfoObject:
      type: object
      description: "Object containing all the nutritional information related to the food intake."
      properties:
        calories:
          type: float
          description: "Total amount of calories obtained from this food intake."
          example: 340.26
        totalNutrients:
          $ref: "#/components/schemas/NutrientCodeSample"
        dailyIntakeReference:
          $ref: "#/components/schemas/DailyReferenceNutrientCodeSample"

    NutritionalInfoPerItemObject:
      description: "List of nutritional info for each of the food items on the image."
      type: array
      items:
        type: object
        description: "Nutritional information related to one of the food segments/regions detected or confirmed on the image."
        properties:
          food_item_position:
            description: "Identifier for a food item in the segmentation_results list. This value can either be an integer (if providing from the original food segmentation result) or a string (if confirmed an extra region that was not originally detected)."
            type: integer
            example: 1
          hasNutriScore:
            description: "Either if the food item has nutri score or not (only present of Custom Plans)."
            type: bool
            example: true
          hasNutritionalInfo:
            description: "Either if the food item has nutritional info or not."
            type: integer
            example: 1
          id:
            description: "Identifier of the food item/dish detected on this region."
            type: integer
            example: 234
          nutri_score:
            $ref: '#/components/schemas/NutriScoreObject'
          serving_size:
            description: "Food quantity (in grams) corresponding to this food item."
            type: float
            example: 56.705
          nutritional_info:
            $ref: "#/components/schemas/NutritionalInfoObject"

    SegmentationDataObject:
      description: "List of segmentation information for each of the found food segments/regions."
      type: array
      items:
        type: object
        description: "Information for one of the found segments/regions"
        properties:
          food_item_position:
            description: "Integer that identifies each of the food items found on the segmentation process."
            type: integer
            example: 1
          center:
            $ref: "#/components/schemas/CenterObject"
          contained_bbox:
            $ref: "#/components/schemas/ContainedBBoxObject"
          polygon:
            $ref: "#/components/schemas/PolygonObject"

    NutritionalInfoObjectWithoutDailyReference:
      type: object
      description: "Object containing all the nutritional information related to the food intake."
      properties:
        calories:
          type: float
          description: "Total amount of calories obtained from this food intake."
          example: 340.26
        totalNutrients:
          $ref: "#/components/schemas/NutrientCodeSample"

    RecipeRecommendationResponse:
      type: object
      properties:
        recommended_recipes:
          $ref: "#/components/schemas/RecognitionRecipesArray"

    DishRecommendationResponse:
      type: object
      properties:
        recommended_dishes:
          $ref: "#/components/schemas/RecommendationDishes"

    ResponseGetIntakesList:
      type: object
      properties:
        user_timezone:
          type: string
          example: "Europe/Madrid"
          description: "Timezone of the user, using the TZ Database names. All the timestamps found in this response are localized to the user's timezone."
        intakes_list:
          type: array
          description: "List of intakes of the user that have been found inside the provided date range."
          items:
            type: object
            properties:
              image_id:
                type: integer
                description: "ID of the image related to this food intake."
                example: 123
              processed_image_size:
                $ref: "#/components/schemas/ProcessedImageSize"
              foodName:
                type: string
                example: "spaghetti bolognese"
                description: "Name of the food/recipe. If there are multiple foods for this image, a list of foodNames will be returned instead."
              foodGroup:
                type: array
                items:
                  type: integer
                example: ["meat", "dairy_products"]
                description: "A list containing the names of the food groups"
              ids:
                type: integer
                example: 324
                description: "IDs of the dishes the information has been obtained from. If there are multiple foods for this image, a list of ids will be returned instead. For dishes coming from manual inputs (not in our database) a null ID will be provided. Note that dishes with null ids won't have effect on the nutritional information returned."
              image_url:
                type: string
                description: "URL to access the image. This URL has an expiration time of 1 day. This value will be null in case it corresponds to a manualInput (see endpoint /intake/manualInput)"
                example: "https://storage.logmeal.es/apiImages/123.jpg"
              occasion:
                type: string
                description: "Occasion of the food intake, based on the image timestamp. One of ['breakfast', 'lunch', 'dinner', 'snack']"
                example: "breakfast"
              occasion_info:
                $ref: "#/components/schemas/RecognitionOccasionInfo"
              timestamp:
                type: string
                description: "Timestamp of the image. Following the format '%Y/%m/%d, %H:%M:%S'"
                example: "2020/03/02, 21:19:15"
              is_kiosk_image:
                type: boolean
                description: "Flag indicating if the image was acquired with a LogMeal Kiosk, meaning that neither its confirmed list of dishes nor its quantity are editable (see api.logmeal.es/kiosk/docs)."
                example: "True"
              hasNutritionalInfo:
                type: boolean
                description: "Boolean that determines if this intake entry has the 'nutritional_info' field available."
                example: "True"
              serving_size:
                type: float
                example: 16.0
                description: "Detected weight for the product if detected automatically or confirmed by the user. Depending on the context, it can also correspond to the standard quantity of food corresponding to one portion for the average person."
              nutritional_info:
                $ref: "#/components/schemas/NutritionalInfoObjectWithoutDailyReference"
              nutritional_info_per_item:
                $ref: "#/components/schemas/NutritionalInfoPerItemObject"
              recipe:
                $ref: './api/schemas/sampleRecipe.yaml'
              recipe_per_item:
                $ref: './api/schemas/sampleRecipePerItem.yaml'
              segmentation_data:
                $ref: "#/components/schemas/SegmentationDataObject"
              image_nutri_score:
                type: object
                properties:
                  nutri_score_category:
                    description: "The  Nutri-Score category for the image. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                    type: string
                    example: A
                    enum: [A,B,C,D,E]
                  nutri_score_standardized:
                    description: "The standardized Nutri-Score values for the predicted image. The parameter is only returned if the APIUser has access to the 'Recommend' plan. Check endpoint '/v2/score/{imageId}/nutriScore' for more information on Nutri-Score."
                    type: integer
                    example: 70
        total_result:
          type: object
          properties:
            ENERC_KCAL:
              type: float
              example: 2085.89
              description: Total intake of calories during the given period of time. The Units used are KCal.
            CHOCDF:
              type: float
              example: 308.74
              description: Total intake of carbohydrates during the given period of time. The Units used are Grams.
            FAT:
              type: float
              example: 57.17
              description: Total intake of fat during the given period of time. The Units used are Grams.
            PROCNT:
              type: float
              example: 77.18
              description: Total intake of protein during the given period of time. The Units used are Grams.
            #VARIETY_SCORE:
            #  type: integer
            #  example: 60
            #  description: Total variety Score of the intakes during the given period of time. This parameter is only returned if the APIUser has access to the 'Recommend' plan. For more information on variety Nutri-Score, check endpoint '/v2/score/variety'.

    ResponseManualInput:
      type: object
      properties:
        result:
          type: string
          example: "Manual input successfully created!"
        imageId:
          type: integer
          description: "ID of the mock image(intake) created by the manual input."

    ResponseWeeklySummary:
      type: object
      properties:
        day_by_day_summary:
          type: object
          properties:
            monday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            tuesday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            wednesday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            thursday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            friday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            saturday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
            sunday:
              $ref: "#/components/schemas/ResponseDailySummaryInWeekly"
        week:
          type: string
          description: "The date range of the week"
          example: "2023/04/17 - 2023/04/23"
        week_averages:
          type: object
          properties:
            calories:
              type: object
              properties:
                achieved_percentage:
                  type: integer
                  description: "The percentage of the recommended calories achieved"
                  example: 94
                average:
                  type: integer
                  description: "The average calories consumed in the week"
                  example: 1935
                recommended:
                  type: integer
                  description: "The recommended calories to consume in the week"
                  example: 2058
            carbs:
              type: object
              properties:
                achieved_percentage:
                  type: integer
                  description: "The percentage of the recommended carbs achieved"
                  example: 72
                average:
                  type: integer
                  description: "The average carbs consumed in the week"
                  example: 169
                recommended:
                  type: integer
                  description: "The recommended carbs to consume in the week"
                  example: 232
            fat:
              type: object
              properties:
                achieved_percentage:
                  type: integer
                  description: "The percentage of the recommended fat achieved"
                  example: 145
                average:
                  type: integer
                  description: "The average fat consumed in the week"
                  example: 116
                recommended:
                  type: integer
                  description: "The recommended fat to consume in the week"
                  example: 80
            protein:
              type: object
              properties:
                achieved_percentage:
                  type: integer
                  description: "The percentage of the recommended protein achieved"
                  example: 65
                average:
                  type: integer
                  description: "The average protein consumed in the week"
                  example: 67
                recommended:
                  type: integer
                  description: "The recommended protein to consume in the week"
                  example: 103
        week_occasion_distribution:
          type: object
          properties:
            lunch:
              type: object
              properties:
                calories:
                  type: integer
                percentage:
                  type: integer
            breakfast:
              type: object
              properties:
                calories:
                  type: integer
                percentage:
                  type: integer
        weekly_recommendation_summary:
          type: object
          properties:
            Egg:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 0
                portion_consumption_color: green
                recommended_portions:
                  max: 7
                  min: null
            Fish:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 0
                portion_consumption_color: transparent
                recommended_portions:
                  max: 4
                  min: 2
            Legumes:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 0
                portion_consumption_color: transparent
                recommended_portions:
                  max: null
                  min: 3
            Meat:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 0
                portion_consumption_color: green
                recommended_portions:
                  max: 4
                  min: null
            Nuts:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 23
                portion_consumption_color: green
                recommended_portions:
                  max: null
                  min: 3
            Red Meat:
              type: object
              properties:
                eaten_portions:
                  type: integer
                portion_consumption_color:
                  type: string
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                    min:
                      type: integer
              example:
                eaten_portions: 0
                portion_consumption_color: green
                recommended_portions:
                  max: 2
                  min: null

    ResponseDailySummaryInWeekly:
      type: object
      properties:
        daily_calorie_distribution:
          type: object
          properties:
            lunch:
              type: object
              properties:
                calories:
                  type: integer
                  example: 702
                percentage:
                  type: integer
                  example: 50
            breakfast:
              type: object
              properties:
                calories:
                  type: integer
                  example: 702
                percentage:
                  type: integer
                  example: 50
        daily_energy:
          type: object
          properties:
            calories:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 1404
            carbs:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 208
            fat:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 43
            protein:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 45
        daily_portions:
          type: object
          properties:
            Dairy Products:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: 3
                    min:
                      type: integer
                      example: 1
            Fruit:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: null
                    min:
                      type: integer
                      example: 3
            Grains and Tubers:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: true
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: 6
                    min:
                      type: integer
                      example: null
            Vegetables:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: null
                    min:
                      type: integer
                      example: 2
        date:
          type: string
          example: "2023/04/21"

    ResponseDailySummary:
      type: object
      properties:
        daily_calorie_distribution:
          type: object
          properties:
            lunch:
              type: object
              properties:
                calories:
                  type: integer
                  example: 702
                percentage:
                  type: integer
                  example: 50
            breakfast:
              type: object
              properties:
                calories:
                  type: integer
                  example: 702
                percentage:
                  type: integer
                  example: 50
        daily_energy:
          type: object
          properties:
            calories:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 1404
                recommended_value:
                  type: integer
                  example: 2058
            carbs:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 208
                recommended_value:
                  type: integer
                  example: 232
            fat:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 43
                recommended_value:
                  type: integer
                  example: 80
            protein:
              type: object
              properties:
                day_intake:
                  type: integer
                  example: 45
                recommended_value:
                  type: integer
                  example: 103
        daily_portions:
          type: object
          properties:
            Dairy Products:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: 3
                    min:
                      type: integer
                      example: 1
            Fruit:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: null
                    min:
                      type: integer
                      example: 3
            Grains and Tubers:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: true
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: 6
                    min:
                      type: integer
                      example: null
            Vegetables:
              type: object
              properties:
                daily_portions_achieved:
                  type: boolean
                  example: false
                eaten_portions:
                  type: integer
                  example: 0
                recommended_portions:
                  type: object
                  properties:
                    max:
                      type: integer
                      example: null
                    min:
                      type: integer
                      example: 2

    ResponseManualInputAssigned:
      type: object
      properties:
        result:
          type: string
          example: "Manual input successfully created!"
        assigned_list:
          type: array
          description: "List of user and image assignments done."
          items:
            type: object
            properties:
              userId:
                type: integer
                description: "One of the user ids provided by parameter"
                example: 321
              imageId:
                type: integer
                description: "The image id assigned to the user."
                example: 3242

    ResponseModifyNutritionalInfo:
      type: object
      properties:
        result:
          type: string
          example: "Nutritional information modified successfully!"
#        nutritional_info:
#          type: object
#          description: "Nutritional information structure."
#          properties:
#            foodName:
#              type: string
#              example: "spaghetti bolognese"
#              description: "Name of the food/recipe. If there are multiple foods for this image, a list of foodNames will be returned instead."
#            hasNutritionalInfo:
#              type: boolean
#              example: true
#              description: "Boolean that describes if the image has nutritional information associated to it."
#            ids:
#              type: integer
#              example: 324
#              description: "IDs of the dishes the information has been obtained from. If there are multiple foods for this image, a list of ids will be returned instead. For dishes coming from manual inputs (not in our database) a null ID will be provided. Note that dishes with null ids won't have effect on the nutritional information returned."
#            imageId:
#              type: integer
#              example: 323425
#              description: "ID of the image the nutrients have been queried from."
#            nutritional_info:
#              $ref: "#/components/schemas/NutritionalInfoObject"
#            serving_size:
#              type: float
#              example: 16.0
#              description: "Detected weight for the product if detected automatically or confirmed by the user. Depending on the context, it can also correspond to the standard quantity of food corresponding to one portion for the average person."

    AllModelsResponse:
      type: object
      properties:
        models:
          type: object
          description: "Object that contains an list for each available model version."
          properties:
            VERSION_NUMBER:
              type: array
              description: "List that contains one entry for each model which is available for the VERSION_NUMBER."
              items:
                type: object
                description: "Object that contains some basic information of each model."
                properties:
                  id:
                    type: integer
                    example: 1
                    description: "ID of the model."
                  name:
                    type: string
                    example: foodrec
                    description: "Name of the model."
                  region:
                    type: integer
                    description: "ID of the region assigned to the model. This value will not always be returned. Corresponds to an id from the available 'regions'"
                    example: 4
        regions:
          type: array
          description: "List containing the available regions."
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
                description: "ID of the region."
              name:
                type: string
                example: Spanish
                description: "Name of the region."

    ResponseGetAllRecipes:
      type: object
      properties:
        custom_recipes:
          type: array
          items:
            type: object
            properties:
              custom_recipe_id:
                type: integer
                example: 1
                description: "ID of a custom recipe."
              dish:
                type: string
                example: "spaghetti bolognese"
                description: "Name of the dish."
              image_url:
                type: string
                description: "URL to access the reference image."
                example: "https://storage.logmeal.es/apiImages/123.jpg"
        result:
          type: string
          example: "Custom recipes retrieved successfully."

    ResponseGetCustomRecipe:
      type: object
      properties:
        custom_recipe:
          type: object
          properties:
            custom_recipe_id:
              type: integer
              example: 1
              description: "ID of a custom recipe."
            dish:
              type: string
              example: "spaghetti bolognese"
              description: "Name of the dish."
            sugar_modulation:
              type: bool
              example: "true"
              enum: [ "true", "false" ]
              description: "Whether the user could possibly choose to include added sugar to the recipe (e.g. coffees, yogurts, etc.)."
            image_url:
              type: string
              description: "URL to access the image."
              example: "https://storage.logmeal.es/apiImages/123.jpg"
            ingredient_list:
              type: array
              items:
                type: object
                properties:
                  ingredientId:
                    type: integer
                    example: 12
                  ingredientName:
                    type: string
                    example: oil
                  ingredientAmount:
                    type: float
                    example: 5.0
            nutritional_indicators:
              type: array
              items:
                type: object
                properties:
                  indicatorCode:
                    type: string
                    eample: FE
                  indicatorAmount:
                    type: float
                    example: 6.7
            translations:
              type: object
              properties:
                default:
                  type: string
                  example: "spaghetti bolognese"
                eng:
                  type: string
                  example: "spaghetti bolognese"
                spa:
                  type: string
                  example: "espagueti a la boloñesa"
        result:
          type: string
          example: "Custom recipe retrieved successfully."

    100-ManualInput-required:
      type: object
      properties:
        message:
          type: string
          example: "'class_ids' is required."
        code:
          type: integer
          example: 100
    100-date:
      type: object
      properties:
        message:
          type: string
          example: "The date must be formatted as '%Y/%m/%d, %H:%M:%S'"
        code:
          type: integer
          example: 100
    100-date-only:
      type: object
      properties:
        message:
          type: string
          example: "The date must be formatted as '%Y/%m/%d'"
        code:
          type: integer
          example: 100
    100-time-only:
      type: object
      properties:
        message:
          type: string
          example: "The time must be formatted as '%H:%M:%S'"
        code:
          type: integer
          example: 100
    100-ManualInput-list:
      type: object
      properties:
        message:
          type: string
          example: "'class_ids' must be a list."
        code:
          type: integer
          example: 100
    100-ManualInput-empty:
      type: object
      properties:
        message:
          type: string
          example: "'class_ids' must not be empty."
        code:
          type: integer
          example: 100
    100-ManualInput-integers:
      type: object
      properties:
        message:
          type: string
          example: "The 'class_ids' elements must be integers."
        code:
          type: integer
          example: 100

    200_login_apiusermanager:
      type: object
      properties:
        email:
          type: string
          example: "myemail@gmail.com"
        language:
          type: string
          example: "eng"
          description: "Three-letter 639-2/T code describing the language chosen by the APIUserManager."
        username:
          type: string
          example: "apiusermanager_username123"
        login_web:
          type: object
          properties:
            token:
              type: string
              example: "7398gh394thg934"
              description: "Unique token associated to the logged in APIUserManager. Required for calling all the endpoints of type APIUserManager."
            message:
              type: string
              example: "Successfully logged in."
            status:
              type: string
              example: "success"

    710:
      type: object
      properties:
        message:
          type: string
          example: "Image with id=____ does not exist."
        code:
          type: integer
          example: 710
    716:
      type: object
      properties:
        message:
          type: string
          example: "You are not the owner of this image."
        code:
          type: integer
          example: 716
    717:
      type: object
      properties:
        message:
          type: string
          example: "The provided class with id=____ is not valid."
        code:
          type: integer
          example: 717

    808:
      type: object
      properties:
        message:
          type: string
          example: "A user with the provided username already exists."
        code:
          type: integer
          example: 808

    811:
      type: object
      properties:
        message:
          type: string
          example: "A user with the provided email already exists."
        code:
          type: integer
          example: 811

    821:
      type: object
      properties:
        message:
          type: string
          example: "The provided credentials are not valid."
        code:
          type: integer
          example: 821

    1011:
      type: object
      properties:
        message:
          type: string
          example: "The provided occasion is invalid. You must provide one of ['breakfast','lunch','dinner','snack']."
        code:
          type: integer
          example: 1011

    1201:
      type: object
      properties:
        message:
          type: string
          example: "APIUser does not exist."
        code:
          type: integer
          example: 1201

    1208:
      type: object
      properties:
        message:
          type: string
          example: "You don't have permissions to remove the image with id=____"
        code:
          type: integer
          example: 1208

    1219:
      type: object
      properties:
        message:
          type: string
          example: 'The provided APIUserManager could not be deleted. Ensure that both you own this user, and that it is a user manager.'
        code:
          type: integer
          example: 1219

    1220:
      type: object
      properties:
        message:
          type: string
          example: "An APIUserManager access entry for the given user already exists."
        code:
          type: integer
          example: 1220

    1221:
      type: object
      properties:
        message:
          type: string
          example: "An APIUserManager access entry for the given user does not exist."
        code:
          type: integer
          example: 1221

    1222:
      type: object
      properties:
        message:
          type: string
          example: "An APIUserManager with the given user ID does not exist."
        code:
          type: integer
          example: 1222

    1223:
      type: object
      properties:
        message:
          type: string
          example: "You don't have permissions to update the image with id=____"
        code:
          type: integer
          example: 1223

    1639:
      type: object
      properties:
        message:
          type: string
          example: "The company has active occasions defined but the provided occasion is invalid. Active occasions defined: [u'morningmeal', u'middaymeal', u'lastmeal', u'snack']"
        code:
          type: integer
          example: 1639

    1641_defined_indicators:
      type: object
      properties:
        message:
          type: string
          example: "The provided code is not valid. It should be one of these: [u'RSPBRRY_KTNS', u'CNZYM_Q10']"
        code:
          type: integer
          example: 1641

    1641_no_defined_indicators:
      type: object
      properties:
        message:
          type: string
          example: "The provided code is not valid. No nutritional indicators defined."
        code:
          type: integer
          example: 1641

    1641_existing_indicator:
      type: object
      properties:
        message:
          type: string
          example: "The provided code already exists. Existing nutritional indicators: [u'RSPBRRY_KTNS', u'CNZYM_Q10']"
        code:
          type: integer
          example: 1641

    1641_default_indicator:
      type: object
      properties:
        message:
          type: string
          example: "This indicator is one of the LogMeal defaults. Provide a custom one. LogMeal indicators: ['ZN', 'FOLFD', 'FIBTG', 'VITB12', 'VITK1', 'F20D5', 'K', 'FAMS', 'VITA_RAE', 'P', 'CHOCDF', 'FE', 'VITC', 'SUGAR', 'F18D3CN3', 'SUGAR.added', 'VITD', 'PROCNT', 'MG', 'VITB6A', 'F22D6', 'FOLDFE', 'NA', 'FAPU', 'NIA', 'FASAT', 'FAT', 'ENERC_KCAL', 'TOCPHA', 'FATRN', 'FOLAC', 'CHOLE', 'THIA', 'CA', 'RIBF']"
        code:
          type: integer
          example: 1641

    1642_delete_default_label_indicator_translation:
      type: object
      properties:
        message:
          type: string
          example: "default label can't be deleted. Only updated."
        code:
          type: integer
          example: 1642

    1642_no_translations_in_lang_indicator_translation:
      type: object
      properties:
        message:
          type: string
          example: "No translations defined for RSPBRRY_KET in turkish. This indicator has these translation languages defined: [u'catalan', u'english', u'german', u'catalan', u'german']"
        code:
          type: integer
          example: 1642

    1642_no_translations_defined_indicator_translation:
      type: object
      properties:
        message:
          type: string
          example: "No translations defined for RSPBRRY_KET"
        code:
          type: integer
          example: 1642

    100_existing_language_translation:
      type: object
      properties:
        message:
          type: string
          example: "There is already a translation for this indicator in spanish"
        code:
          type: integer
          example: 100

    100_provide_values_patch:
      type: object
      properties:
        message:
          type: string
          example: "Provide at least a value to update"
        code:
          type: integer
          example: 100

    708:
      type: object
      properties:
        message:
          type: string
          example: "Parameter language is not valid. Valid values are {'ger': 'german', 'gre': 'greek', 'nld': 'dutch', 'fre': 'french', 'eng': 'english', 'ita': 'italian', 'spa': 'spanish', 'tur': 'turkish', 'cat': 'catalan'}'"
        code:
          type: integer
          example: 708

    100_No_Occasions_Defined_For_Company:
      type: object
      properties:
        message:
          type: string
          example: "No occasions defined for this company"
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_id:
      type: object
      properties:
        message:
          type: string
          example: 'The company has occasions defined but the provided occasion is invalid. Occasions defined: [1, 2, 3]'
        code:
          type: integer
          example: 100

    100_Invalid_Occasions:
      type: object
      properties:
        message:
          type: string
          example: "Occasions should be a list of dictionaries."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion:
      type: object
      properties:
        message:
          type: string
          example: "Each occasion should be a dictionary."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Name:
      type: object
      properties:
        message:
          type: string
          example: "Name field is required and should be a string."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Mapping:
      type: object
      properties:
        message:
          type: string
          example: "maps_to_occasion field is required and should be a string containing one of the default occasions: ['breakfast','lunch','dinner','snack']"
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Default:
      type: object
      properties:
        message:
          type: string
          example: "Default field is required and should be a boolean."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Attribute:
      type: object
      properties:
        message:
          type: string
          example: "Invalid occasion attribute: {}"
        code:
          type: integer
          example: 100

    100_Repeated_Occasion_Name:
      type: object
      properties:
        message:
          type: string
          example: "There are repeated occasion names."
        code:
          type: integer
          example: 100

    100_Name_Not_Provided:
      type: object
      properties:
        message:
          type: string
          example: "Name field is required."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Times:
      type: object
      properties:
        message:
          type: string
          example: "Init time and End time fields are required when default is False."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Times_Order:
      type: object
      properties:
        message:
          type: string
          example: "End time should be greater than Init time."
        code:
          type: integer
          example: 100

    100_Invalid_Occasion_Default_True:
      type: object
      properties:
        message:
          type: string
          example: "Init and end time should not be provided when default is True."
        code:
          type: integer
          example: 100

    100_Missing_Default_Occasion:
      type: object
      properties:
        message:
          type: string
          example: "At least one default occasion is required."
        code:
          type: integer
          example: 100

    100_Multiple_Default_Occasions:
      type: object
      properties:
        message:
          type: string
          example: "Only one default occasion is allowed."
        code:
          type: integer
          example: 100

    100_Overlapping_Occasions:
      type: object
      properties:
        message:
          type: string
          example: "Occasions can not overlap."
        code:
          type: integer
          example: 100

    100_init_time/end_time_Required:
      type: object
      properties:
        message:
          type: string
          example: "init_time/end_time is required if end_time/init_time is given"
        code:
          type: integer
          example: 100

    1645_exists:
      type: object
      properties:
        message:
          type: string
          example: "height already exists. Existing measures: [u'weight', u'height']"
        code:
          type: integer
          example: 1645

    1645_not_exists:
      type: object
      properties:
        message:
          type: string
          example: "waist does not exist. Existing measures: [u'weight', u'height']"
        code:
          type: integer
          example: 1645


  examples:
    non_food:
      imageId: 4
      foodType:
        tops: ['non_food']
        # probs: [0.971264660358429]
        ids: [1]
    food:
      imageId: 4
      foodType:
        tops: ['food']
        # probs: [0.971264660358429]
        ids: [5]
      foodFamily:
        tops: ['noodles/pasta','soup','vegetable fruit']
        probs: [0.9995937943458557,0.70037020735908299685,0.5715842639328912]
        ids: [5, 15, 10]
      recognition_results:
        tops: ['spaghetti bolognese','curry noodles with mushrooms','pasta with pesto' , 'ratatouille' , 'celery salad']
        probs: [0.971264660358429,0.023766646161675453,0.002386579755693674,0.0013138295616954565,0.0003799576952587813]
        ids: [1, 2, 3, 4, 5]
    drinks:
      imageId: 4
      foodType:
        tops: ['drinks']
        # probs: [0.971264660358429]
        ids: [3]
      recognition_results:
        tops: [ 'coffee' , 'cava' , 'beer' , 'sangria' , 'cider' ]
        probs: [ 0.971264660358429 , 0.023766646161675453 , 0.002386579755693674 , 0.0013138295616954565 , 0.0003799576952587813 ]
        ids: [1, 2, 3, 4, 5]
    ingredients:
      imageId: 4
      foodType:
        tops: ['ingredients']
        # probs: [0.971264660358429]
        ids: [4]
      recognition_results:
        tops: [ 'broccoli' , 'cucumber' , 'lettuce' , 'apple' , 'green peas' ]
        probs: [ 0.971264660358429 , 0.023766646161675453 , 0.002386579755693674 , 0.0013138295616954565 , 0.0003799576952587813 ]
        ids: [1, 2, 3, 4, 5]
    sauces:
      imageId: 4
      foodType:
        tops: ['sauces']
        # probs: [0.971264660358429]
        ids: [2]
      recognition_results:
        tops: [ 'apple sauce' , 'sweet sour sauce' , 'soy sauce' , 'meat gravy sauce' , 'tomato sauce' ]
        probs: [ 0.971264660358429 , 0.023766646161675453 , 0.002386579755693674 , 0.0013138295616954565 , 0.0003799576952587813 ]
        ids: [1, 2, 3, 4, 5]
    combination dish:
      imageId: 4
      foodType:
        tops: ['combination dish']
        # probs: [1.0]
        ids: [6]
      recognition_results:
        tops: [ 'noodles' , 'paprika' ]
        probs: [ 0.971264660358429 , 0.623766646161675453 ]
        ids: [43, 13]
    recognitionresults:
      tops: "cod with ratatouille"
      probs: 1.0
      ids: 1
    foodFamily:
      tops: ['noodles_pasta', 'vegetable_fruit', 'soup', 'seafood', 'meat', 'rice', 'bread', 'fried_food', 'dairy_products', 'egg', 'dessert']
      probs: [0.9931433200836182, 0.803949353005737066, 0.9017881958046928048, 0.7008082023705355823, 0.60014335563173517585, 0.887863974552602e-05, 0.723416400840506e-05, 0.7415735995513387e-05, 0.5505323295248672e-05, 0.801334599609254e-06, 0.6808028092607856e-06]
      ids: [43, 13, 25, 32, 36, 54, 22, 41, 16, 24, 11]
    food_types:
      tops: ['food', 'ingredients', 'drinks', 'sauces', 'non food']
      probs: [0.9931433200836182, 0.803949353005737066, 0.9017881958046928048, 0.7008082023705355823, 0.60014335563173517585]
      ids: [1, 3, 2, 5, 4]
    foodType:
      tops: ['food']
      # probs: [0.9931433200836182]
      ids: [1]

    example_100-ManualInput-required:
      message: "'class_ids' is required."
      code: 100
    example_100-date:
      message: "The date must be formatted as '%Y/%m/%d, %H:%M:%S'"
      code: 100

    example_100-ManualInput-list:
      message: "'class_ids' must be a list."
      code: 100

    example_100-ManualInput-empty:
      message: "'class_ids' must not be empty."
      code: 100
    example_100-ManualInput-integers:
      message: "The 'class_ids' elements must be integers."
      code: 100

    example_710:
      message: "Image with id=____ does not exist."
      code: 710
    example_716:
      message: "You are not the owner of this image."
      code: 716
    example_717:
      message: "The provided class with id=____ is not valid."
      code: 717
    example_808:
      message: "A user with the provided username already exists."
      code: 808
    example_811:
      message: "A user with the provided email already exists."
      code: 811
    example_821:
      message: "The provided credentials are not valid."
      code: 821
    example_1011:
      message: "The provided occasion is invalid. You must provide one of ['breakfast','lunch','dinner','snack']."
      code: 1011
    example_1201:
      message: "APIUser does not exist."
      code: 1201
    example_1208:
      message: "You don't have permissions to remove the image with id=____"
      code: 1208
    example_1219:
      message: "The provided APIUserManager could not be deleted. Ensure that both you own this user, and that it is a user manager."
      code: 1219
    example_1220:
      message: "An APIUserManager access entry for the given user already exists."
      code: 1220
    example_1221:
      message: "An APIUserManager access entry for the given user does not exist."
      code: 1221
    example_1222:
      message: "An APIUserManager with the given user ID does not exist."
      code: 1222
    example_1223:
      message: "You don't have permissions to update the image with id=____"
      code: 1223
    example_1639:
      message: "The company has active occasions defined but the provided occasion is invalid. Active occasions defined: [u'morningmeal', u'middaymeal', u'lastmeal', u'snack']"
      code: 1639

    GetBodyMeasureExampleResponse:
      {
        "result": [
          {
            "name": "weight",
            "unit": "kg"
          },
          {
            "name": "waist",
            "unit": "cm"
          },
          {
            "name": "height",
            "unit": "cm"
          }
        ]
      }

    GetUserBodyMeasuresExampleResponse:
      {
        "result": [
          {
            "measure": "waist",
            "timestamp": "2023/05/10, 10:14:47",
            "unit": "cm",
            "value": 150.0
          },
          {
            "measure": "weight",
            "timestamp": "2023/05/12, 09:16:06",
            "unit": "kg",
            "value": 80.0
          },
          {
            "measure": "weight",
            "timestamp": "2023/05/29, 09:56:13",
            "unit": "kg",
            "value": 75.0
          }
        ]
      }

    RecognitionTypeResponseExample:
      {
        "food_types": [
          {
            "id": 1,
            "name": "food",
            "probs": 0.860136890411377
          },
          {
            "id": 2,
            "name": "ingredients",
            "probs": 0.1311347723007202
          },
          {
            "id": 5,
            "name": "drinks",
            "probs": 0.00870148604735732
          },
          {
            "id": 4,
            "name": "non food",
            "probs": 2.684564497030806e-05
          }
        ],
        "imageId": 1257835,
        "model_versions": {
          "foodType": "v0.7"
        },
        "occasion": "dinner",
        "occasion_info": {"translation": "cena", "id": 4}
      }

    RecognitionDishResponseExample:
      {
        "foodFamily": [
          {
            "id": 10,
            "name": "bread",
            "prob": 0.9931309819221497
          }
        ],
        "foodType": [
          {
            "id": 1,
            "name": "food"
          },
          {
            "id": 1,
            "name": "food"
          },
          {
            "id": 2,
            "name": "ingredients"
          },
          {
            "id": 1,
            "name": "food"
          },
          {
            "id": 2,
            "name": "ingredients"
          },
          {
            "id": 2,
            "name": "ingredients"
          }
        ],
        "imageId": 1257836,
        "model_versions": {
          "foodType": "v0.7",
          "foodgroups": "v0.7",
          "foodrec": "v0.9",
          "ingredients": "v0.8"
        },
        "occasion": "dinner",
        "occasion_info": {"translation": "cena", "id": 4},
        "recognition_results": [
          {
            "id": 176,
            "name": "tacos",
            "prob": 0.2870484385904284,
            "subclasses": [ ]
          },
          {
            "id": 2084,
            "name": "roti",
            "prob": 0.1701863149673948,
            "subclasses": [ ]
          },
          {
            "id": 1196,
            "name": "endives",
            "prob": 0.11623795547452316,
            "subclasses": [ ]
          },
          {
            "id": 592,
            "name": "falafel",
            "prob": 0.11160695970055323,
            "subclasses": [ ]
          },
          {
            "id": 1215,
            "name": "cabbage",
            "prob": 0.011005960403038128,
            "subclasses": [ ]
          },
          {
            "id": 1226,
            "name": "lettuce",
            "prob": 0.002846510917715813,
            "subclasses": [ ]
          }
        ]
      }

    RecognitionComboResponseExample:
      {
        "foodType": [
          {
            "id": 6,
            "name": "combination dish"
          },
          {
            "id": 6,
            "name": "combination dish"
          },
          {
            "id": 6,
            "name": "combination dish"
          },
          {
            "id": 6,
            "name": "combination dish"
          },
          {
            "id": 6,
            "name": "combination dish"
          }
        ],
        "imageId": 1257851,
        "model_versions": {
          "foodType": "v0.7",
          "multilabel": "v0.9"
        },
        "occasion": "dinner",
        "occasion_info": {"translation": "cena", "id": 4},
        "recognition_results": [
          {
            "id": 2239,
            "name": "lettuce, cannons and others",
            "prob": 0.9932748794555664,
            "subclasses": [ ]
          },
          {
            "id": 2232,
            "name": "pepper",
            "prob": 0.8877628087997437,
            "subclasses": [ ]
          },
          {
            "id": 2233,
            "name": "tomato",
            "prob": 0.5232782006263733,
            "subclasses": [ ]
          },
          {
            "id": 2229,
            "name": "cucumber",
            "prob": 0.25202734479680655,
            "subclasses": [ ]
          },
          {
            "id": 2248,
            "name": "rice",
            "prob": 0.06518831274006516,
            "subclasses": [ ]
          }
        ]
      }

    RecognitionCompleteResponseExample:
      {
        "foodFamily": [
          {
            "id": 2,
            "name": "dessert",
            "prob": 0.9999074339866638
          }
        ],
        "foodType": [
          {
            "id": 1,
            "name": "food"
          },
          {
            "id": 1,
            "name": "food"
          },
          {
            "id": 2,
            "name": "ingredients"
          },
          {
            "id": 2,
            "name": "ingredients"
          },
          {
            "id": 2,
            "name": "ingredients"
          },
          {
            "id": 1,
            "name": "food"
          }
        ],
        "imageId": 1257852,
        "model_versions": {
          "foodType": "v0.7",
          "foodgroups": "v0.7",
          "foodrec": "v0.9",
          "ingredients": "v0.8"
        },
        "occasion": "dinner",
        "occasion_info": {"translation": "cena", "id": 4},
        "recognition_results": [
          {
            "id": 1022,
            "name": "wind fritters",
            "prob": 0.7370510509864922,
            "subclasses": [ ]
          },
          {
            "id": 110,
            "name": "donuts",
            "prob": 0.06949184488031425,
            "subclasses": [ ]
          },
          {
            "id": 1253,
            "name": "apple",
            "prob": 0.06275044192897389,
            "subclasses": [ ]
          },
          {
            "id": 2120,
            "name": "sugar",
            "prob": 0.051318246968927186,
            "subclasses": [ ]
          },
          {
            "id": 1206,
            "name": "apricot",
            "prob": 0.021342541969851924,
            "subclasses": [ ]
          },
          {
            "id": 193,
            "name": "churros",
            "prob": 0.012526835004156961,
            "subclasses": [ ]
          }
        ]
      }

    SegmentationCompleteResponseExample:
      {
        "foodFamily": [
          {
            "id": 8,
            "name": "vegetables/legumes",
            "prob": 0.495849609375
          },
          {
            "id": 1,
            "name": "meat",
            "prob": 0.492919921875
          }
        ],
        "foodType": {
          "id": 1,
          "name": "food"
        },
        "imageId": 1365065,
        "processed_image_size": {"height": 400, "width": 500},
        "model_versions": {
          "drinks": "v1.0",
          "foodType": "v1.0",
          "foodgroups": "v1.0",
          "foodrec": "v1.0",
          "ingredients": "v1.0",
          "ontology": "v1.0",
          "segmentation": "v1.0"
        },
        "occasion": "breakfast",
        "occasion_info": {"translation": "almuerzo", "id": 4},
        "segmentation_results": [
          {
            "center": {
              "x": 162,
              "y": 367
            },
            "contained_bbox": {
              "h": 273,
              "w": 245,
              "x": 40,
              "y": 231
            },
            "food_item_position": 1,
            "polygon": [
              92,
              231,
              91,
              232,
              96,
              233,
              96,
              232,
              95,
              231
            ],
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 306,
                "name": "french fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 77
                },
                "prob": 0.3131542097331639,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 11,
                        "name": "fried food"
                      },
                      {
                        "id": 20,
                        "name": "tubers and derivatives"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 2266,
                    "name": "sweet potato fries",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.12463889521299051
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2266,
                "name": "sweet potato fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23145949427455853,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 892,
                "name": "chips potatoes",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 63
                },
                "prob": 0.16711932300418259,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 3,
                    "name": "dairy products"
                  },
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 394,
                "name": "poutine",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 59
                },
                "prob": 0.15727056819744548,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 75,
                "name": "onion rings",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1309964047906497,
                "subclasses": [ ]
              }
            ]
          },
          {
            "center": {
              "x": 385,
              "y": 338
            },
            "contained_bbox": {
              "h": 297,
              "w": 251,
              "x": 260,
              "y": 190
            },
            "food_item_position": 2,
            "polygon": [
              430,
              190,
              428,
              191,
              425,
              191,
              458,
              191,
              457,
              190
            ],
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 903,
                "name": "grilled lamb",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.24450516063213096,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 285,
                "name": "grilled entrecote",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.22743939640625688,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 782,
                "name": "grilled vegetables",
                "nutri_score": {
                  "nutri_score_category": "B",
                  "nutri_score_standardized": 70
                },
                "prob": 0.18574178912919906,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2208,
                "name": "fried vegetables",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1842937361332224,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 462,
                    "name": "fried green peppers",
                    "nutri_score": {
                      "nutri_score_category": "D",
                      "nutri_score_standardized": 45
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 782,
                    "name": "grilled vegetables",
                    "nutri_score": {
                      "nutri_score_category": "B",
                      "nutri_score_standardized": 70
                    },
                    "prob": 0.6658790144078298
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 317,
                "name": "steak",
                "nutri_score": {
                  "nutri_score_category": "D",
                  "nutri_score_standardized": 52
                },
                "prob": 0.15801991769919066,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 1,
                        "name": "meat"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 285,
                    "name": "grilled entrecote",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.8153637467719546
                  }
                ]
              }
            ]
          },
          {
            "center": {
              "x": 273,
              "y": 175
            },
            "contained_bbox": {
              "h": 258,
              "w": 325,
              "x": 111,
              "y": 46
            },
            "food_item_position": 3,
            "polygon": [
              295,
              46,
              293,
              47,
              282,
              47,
              327,
              46
            ],
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1226,
                "name": "lettuce",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2678714568000819,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1544,
                    "name": "salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16764951643472586
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1263,
                "name": "rucula",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23097117134980644,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1544,
                "name": "salad",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2285873816525689,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1208,
                "name": "celery",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.14628980327441313,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 31,
                    "name": "celery salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05766728717840139
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 1476,
                    "name": "cucumber salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.05367282166851618
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 181,
                    "name": "marinated cold cucumber",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 59
                    },
                    "prob": 0.05367282166851618
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1183,
                "name": "cardoon",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 81
                },
                "prob": 0.1262801869231296,
                "subclasses": [ ]
              }
            ]
          }
        ]
      }

    SegmentationCompleteQuantityResponseExample:
      {
        "foodFamily": [
          {
            "id": 8,
            "name": "vegetables/legumes",
            "prob": 0.495849609375
          },
          {
            "id": 1,
            "name": "meat",
            "prob": 0.492919921875
          }
        ],
        "foodType": {
          "id": 1,
          "name": "food"
        },
        "imageId": 1365065,
        "processed_image_size": {"height": 400, "width": 500},
        "model_versions": {
          "drinks": "v1.0",
          "foodType": "v1.0",
          "foodgroups": "v1.0",
          "foodrec": "v1.0",
          "ingredients": "v1.0",
          "ontology": "v1.0",
          "segmentation": "v1.0"
        },
        "occasion": "breakfast",
        "segmentation_results": [
          {
            "center": {
              "x": 162,
              "y": 367
            },
            "contained_bbox": {
              "h": 273,
              "w": 245,
              "x": 40,
              "y": 231
            },
            "food_item_position": 1,
            "polygon": [
              92,
              231,
              91,
              232,
              96,
              233,
              96,
              232,
              95,
              231
            ],
            "serving_size": 324.453,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 306,
                "name": "french fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 77
                },
                "prob": 0.3131542097331639,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 11,
                        "name": "fried food"
                      },
                      {
                        "id": 20,
                        "name": "tubers and derivatives"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 2266,
                    "name": "sweet potato fries",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.12463889521299051
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2266,
                "name": "sweet potato fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23145949427455853,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 892,
                "name": "chips potatoes",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 63
                },
                "prob": 0.16711932300418259,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 3,
                    "name": "dairy products"
                  },
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 394,
                "name": "poutine",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 59
                },
                "prob": 0.15727056819744548,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 75,
                "name": "onion rings",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1309964047906497,
                "subclasses": [ ]
              }
            ]
          },
          {
            "center": {
              "x": 385,
              "y": 338
            },
            "contained_bbox": {
              "h": 297,
              "w": 251,
              "x": 260,
              "y": 190
            },
            "food_item_position": 2,
            "polygon": [
              430,
              190,
              428,
              191,
              425,
              191,
              458,
              191,
              457,
              190
            ],
            "serving_size": 134.421,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 903,
                "name": "grilled lamb",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.24450516063213096,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 285,
                "name": "grilled entrecote",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.22743939640625688,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 782,
                "name": "grilled vegetables",
                "nutri_score": {
                  "nutri_score_category": "B",
                  "nutri_score_standardized": 70
                },
                "prob": 0.18574178912919906,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2208,
                "name": "fried vegetables",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1842937361332224,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 462,
                    "name": "fried green peppers",
                    "nutri_score": {
                      "nutri_score_category": "D",
                      "nutri_score_standardized": 45
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 782,
                    "name": "grilled vegetables",
                    "nutri_score": {
                      "nutri_score_category": "B",
                      "nutri_score_standardized": 70
                    },
                    "prob": 0.6658790144078298
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 317,
                "name": "steak",
                "nutri_score": {
                  "nutri_score_category": "D",
                  "nutri_score_standardized": 52
                },
                "prob": 0.15801991769919066,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 1,
                        "name": "meat"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 285,
                    "name": "grilled entrecote",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.8153637467719546
                  }
                ]
              }
            ]
          },
          {
            "center": {
              "x": 273,
              "y": 175
            },
            "contained_bbox": {
              "h": 258,
              "w": 325,
              "x": 111,
              "y": 46
            },
            "food_item_position": 3,
            "polygon": [
              295,
              46,
              293,
              47,
              282,
              47,
              327,
              46
            ],
            "serving_size": 200.213,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1226,
                "name": "lettuce",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2678714568000819,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1544,
                    "name": "salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16764951643472586
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1263,
                "name": "rucula",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23097117134980644,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1544,
                "name": "salad",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2285873816525689,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1208,
                "name": "celery",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.14628980327441313,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 31,
                    "name": "celery salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05766728717840139
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 1476,
                    "name": "cucumber salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.05367282166851618
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 181,
                    "name": "marinated cold cucumber",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 59
                    },
                    "prob": 0.05367282166851618
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1183,
                "name": "cardoon",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 81
                },
                "prob": 0.1262801869231296,
                "subclasses": [ ]
              }
            ]
          }
        ]
      }

    GetOccasionGroupsResponseExample:
      {
        "result": {
          "active": {
            "2": {
              "end_time": null,
              "id": 2,
              "init_time": "2023-05-10",
              "occasions": [
                {
                  "default": false,
                  "end_time": "08:00:00",
                  "id": 5,
                  "init_time": "06:00:00",
                  "maps_to_default": "breakfast",
                  "name": "first meal",
                  "translations": [
                    "translations": {
                      "cat": {
                        "language": "catalan",
                        "name": "first meal"
                      },
                      "eng": {
                        "language": "english",
                        "name": "first meal"
                      },
                      "esp": {
                        "language": "spanish",
                        "name": "almuerzo"
                      },
                      "fre": {
                        "language": "french",
                        "name": "first meal"
                      },
                      "ger": {
                        "language": "german",
                        "name": "first meal"
                      },
                      "gre": {
                        "language": "greek",
                        "name": "first meal"
                      },
                      "ita": {
                        "language": "italian",
                        "name": "first meal"
                      },
                      "nld": {
                        "language": "dutch",
                        "name": "first meal"
                      },
                      "spa": {
                        "language": "spanish",
                        "name": "almuerzo"
                      },
                      "tur": {
                        "language": "turkish",
                        "name": "first meal"
                      }
                    }
                  ]
                },
                {
                  "default": false,
                  "end_time": "15:00:00",
                  "id": 6,
                  "init_time": "09:00:00",
                  "maps_to_default": "lunch",
                  "name": "second meal",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "second meal"
                    },
                    "eng": {
                      "language": "english",
                      "name": "second meal"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "second meal"
                    },
                    "fre": {
                      "language": "french",
                      "name": "second meal"
                    },
                    "ger": {
                      "language": "german",
                      "name": "second meal"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "second meal"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "second meal"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "second meal"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "second meal"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "second meal"
                    }
                  }
                },
                {
                  "default": false,
                  "end_time": "22:00:00",
                  "id": 7,
                  "init_time": "20:00:00",
                  "maps_to_default": "dinner",
                  "name": "third meal",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "third meal"
                    },
                    "eng": {
                      "language": "english",
                      "name": "third meal"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "third meal"
                    },
                    "fre": {
                      "language": "french",
                      "name": "third meal"
                    },
                    "ger": {
                      "language": "german",
                      "name": "third meal"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "third meal"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "third meal"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "third meal"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "third meal"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "third meal"
                    }
                  }
                },
                {
                  "default": true,
                  "end_time": null,
                  "id": 8,
                  "init_time": null,
                  "maps_to_default": "snack",
                  "name": "snack",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "aperitiu"
                    },
                    "eng": {
                      "language": "english",
                      "name": "snack"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "snack"
                    },
                    "fre": {
                      "language": "french",
                      "name": "snack"
                    },
                    "ger": {
                      "language": "german",
                      "name": "snack"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "snack"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "snack"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "snack"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "snack"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "snack"
                    }
                  }
                }
              ]
            }
          },
          "default_occasions": [
            {
              "default": false,
              "end_time": "15:00:00",
              "id": null,
              "init_time": "12:00:00",
              "maps_to_default": "lunch",
              "name": "lunch",
              "translations": {
                "cat": {
                  "language": "catalan",
                  "name": "dinar"
                },
                "eng": {
                  "language": "english",
                  "name": "lunch"
                },
                "esp": {
                  "language": "spanish",
                  "name": "comida"
                },
                "fre": {
                  "language": "french",
                  "name": "déjeuner"
                },
                "ger": {
                  "language": "german",
                  "name": "Mittagessen"
                },
                "gre": {
                  "language": "greek",
                  "name": "μεσημεριανό γεύμα"
                },
                "ita": {
                  "language": "italian",
                  "name": "pranzo"
                },
                "nld": {
                  "language": "dutch",
                  "name": "lunch"
                },
                "spa": {
                  "language": "spanish",
                  "name": "comida"
                },
                "tur": {
                  "language": "turkish",
                  "name": "öğle yemeği"
                }
              }
            },
            {
              "default": false,
              "end_time": "10:00:00",
              "id": null,
              "init_time": "6:00:00",
              "maps_to_default": "breakfast",
              "name": "breakfast",
              "translations": {
                "cat": {
                  "language": "catalan",
                  "name": "esmorzar"
                },
                "eng": {
                  "language": "english",
                  "name": "breakfast"
                },
                "esp": {
                  "language": "spanish",
                  "name": "desayuno"
                },
                "fre": {
                  "language": "french",
                  "name": "petit-déjeuner"
                },
                "ger": {
                  "language": "german",
                  "name": "Frühstück"
                },
                "gre": {
                  "language": "greek",
                  "name": "πρωινό"
                },
                "ita": {
                  "language": "italian",
                  "name": "colazione"
                },
                "nld": {
                  "language": "dutch",
                  "name": "ontbijt"
                },
                "spa": {
                  "language": "spanish",
                  "name": "desayuno"
                },
                "tur": {
                  "language": "turkish",
                  "name": "kahvaltı"
                }
              }
            },
            {
              "default": true,
              "end_time": null,
              "id": null,
              "init_time": null,
              "maps_to_default": "snack",
              "name": "snack",
              "translations": {
                "cat": {
                  "language": "catalan",
                  "name": "aperitiu"
                },
                "eng": {
                  "language": "english",
                  "name": "snack"
                },
                "esp": {
                  "language": "spanish",
                  "name": "tentempié"
                },
                "fre": {
                  "language": "french",
                  "name": "collation"
                },
                "ger": {
                  "language": "german",
                  "name": "Snack"
                },
                "gre": {
                  "language": "greek",
                  "name": "ενδιάμεσο γεύμα"
                },
                "ita": {
                  "language": "italian",
                  "name": "spuntino"
                },
                "nld": {
                  "language": "dutch",
                  "name": "snack"
                },
                "spa": {
                  "language": "spanish",
                  "name": "tentempié"
                },
                "tur": {
                  "language": "turkish",
                  "name": "atıştırmalık"
                }
              }
            },
            {
              "default": false,
              "end_time": "23:00:00",
              "id": null,
              "init_time": "18:00:00",
              "maps_to_default": "dinner",
              "name": "dinner",
              "translations": {
                "cat": {
                  "language": "catalan",
                  "name": "sopar"
                },
                "eng": {
                  "language": "english",
                  "name": "dinner"
                },
                "esp": {
                  "language": "spanish",
                  "name": "cena"
                },
                "fre": {
                  "language": "french",
                  "name": "dîner"
                },
                "ger": {
                  "language": "german",
                  "name": "Abendessen"
                },
                "gre": {
                  "language": "greek",
                  "name": "δείπνο"
                },
                "ita": {
                  "language": "italian",
                  "name": "cena"
                },
                "nld": {
                  "language": "dutch",
                  "name": "avondeten"
                },
                "spa": {
                  "language": "spanish",
                  "name": "cena"
                },
                "tur": {
                  "language": "turkish",
                  "name": "akşam yemeği"
                }
              }
            }
          ],
          "inactive": {
            "1": {
              "end_time": "2023-05-10",
              "id": 1,
              "init_time": "2023-05-10",
              "occasions": [
                {
                  "default": false,
                  "end_time": "08:00:00",
                  "id": 1,
                  "init_time": "06:00:00",
                  "maps_to_default": "breakfast",
                  "name": "esmorzar",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "esmorzar"
                    },
                    "eng": {
                      "language": "english",
                      "name": "esmorzar"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "esmorzar"
                    },
                    "fre": {
                      "language": "french",
                      "name": "esmorzar"
                    },
                    "ger": {
                      "language": "german",
                      "name": "esmorzar"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "esmorzar"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "esmorzar"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "esmorzar"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "esmorzar"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "esmorzar"
                    }
                  }
                },
                {
                  "default": false,
                  "end_time": "15:00:00",
                  "id": 2,
                  "init_time": "09:00:00",
                  "maps_to_default": "lunch",
                  "name": "dinar",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "dinar"
                    },
                    "eng": {
                      "language": "english",
                      "name": "dinar"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "dinar"
                    },
                    "fre": {
                      "language": "french",
                      "name": "dinar"
                    },
                    "ger": {
                      "language": "german",
                      "name": "dinar"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "dinar"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "dinar"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "dinar"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "dinar"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "dinar"
                    }
                  }
                },
                {
                  "default": false,
                  "end_time": "22:00:00",
                  "id": 3,
                  "init_time": "20:00:00",
                  "maps_to_default": "dinner",
                  "name": "sopar",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "sopar"
                    },
                    "eng": {
                      "language": "english",
                      "name": "sopar"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "sopar"
                    },
                    "fre": {
                      "language": "french",
                      "name": "sopar"
                    },
                    "ger": {
                      "language": "german",
                      "name": "sopar"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "sopar"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "sopar"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "sopar"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "sopar"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "sopar"
                    }
                  }
                },
                {
                  "default": true,
                  "end_time": null,
                  "id": 4,
                  "init_time": null,
                  "maps_to_default": "snack",
                  "name": "picar",
                  "translations": {
                    "cat": {
                      "language": "catalan",
                      "name": "aperitiu"
                    },
                    "eng": {
                      "language": "english",
                      "name": "picar"
                    },
                    "esp": {
                      "language": "spanish",
                      "name": "tentempié"
                    },
                    "fre": {
                      "language": "french",
                      "name": "picar"
                    },
                    "ger": {
                      "language": "german",
                      "name": "picar"
                    },
                    "gre": {
                      "language": "greek",
                      "name": "picar"
                    },
                    "ita": {
                      "language": "italian",
                      "name": "spuntino"
                    },
                    "nld": {
                      "language": "dutch",
                      "name": "picar"
                    },
                    "spa": {
                      "language": "spanish",
                      "name": "tentempié"
                    },
                    "tur": {
                      "language": "turkish",
                      "name": "picar"
                    }
                  }
                }
              ]
            }
          }
        }
      }

    WasteIntakeResponseExample:
      {
        "foodFamily": [
          {
            "id": 8,
            "name": "vegetables/legumes",
            "prob": 0.495849609375
          },
          {
            "id": 1,
            "name": "meat",
            "prob": 0.492919921875
          }
        ],
        "foodType": {
          "id": 1,
          "name": "food"
        },
        "image_id_preconsumption": 1365065,
        "image_id_waste": 1368909,
        "processed_image_size": {"height": 400, "width": 500},
        "model_versions": {
          "drinks": "v1.0",
          "foodType": "v1.0",
          "foodgroups": "v1.0",
          "foodrec": "v1.0",
          "ingredients": "v1.0",
          "ontology": "v1.0",
          "segmentation": "v1.0"
        },
        "occasion": "breakfast",
        "matches_mapping_pre_to_waste": {
          "1": 1,
          "2": 3,
          "3": 2,
          "4": null,
        },
        "segmentation_results": [
          {
            "center": {
              "x": 162,
              "y": 367
            },
            "contained_bbox": {
              "h": 273,
              "w": 245,
              "x": 40,
              "y": 231
            },
            "food_item_position": 1,
            "polygon": [
              92,
              231,
              91,
              232,
              96,
              233,
              96,
              232,
              95,
              231
            ],
            "serving_size": 324.453,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 306,
                "name": "french fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 77
                },
                "prob": 0.3131542097331639,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 11,
                        "name": "fried food"
                      },
                      {
                        "id": 20,
                        "name": "tubers and derivatives"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 2266,
                    "name": "sweet potato fries",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.12463889521299051
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2266,
                "name": "sweet potato fries",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23145949427455853,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 11,
                    "name": "fried food"
                  },
                  {
                    "id": 20,
                    "name": "tubers and derivatives"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 892,
                "name": "chips potatoes",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 63
                },
                "prob": 0.16711932300418259,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 3,
                    "name": "dairy products"
                  },
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 394,
                "name": "poutine",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 59
                },
                "prob": 0.15727056819744548,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  },
                  {
                    "id": 11,
                    "name": "fried food"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 75,
                "name": "onion rings",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1309964047906497,
                "subclasses": [ ]
              }
            ]
          },
          {
            "center": {
              "x": 385,
              "y": 338
            },
            "contained_bbox": {
              "h": 297,
              "w": 251,
              "x": 260,
              "y": 190
            },
            "food_item_position": 2,
            "polygon": [
              430,
              190,
              428,
              191,
              425,
              191,
              458,
              191,
              457,
              190
            ],
            "serving_size": 134.421,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 903,
                "name": "grilled lamb",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.24450516063213096,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 285,
                "name": "grilled entrecote",
                "nutri_score": {
                  "nutri_score_category": "C",
                  "nutri_score_standardized": 66
                },
                "prob": 0.22743939640625688,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 782,
                "name": "grilled vegetables",
                "nutri_score": {
                  "nutri_score_category": "B",
                  "nutri_score_standardized": 70
                },
                "prob": 0.18574178912919906,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.18574178912919906
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 2208,
                "name": "fried vegetables",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.1842937361332224,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 462,
                    "name": "fried green peppers",
                    "nutri_score": {
                      "nutri_score_category": "D",
                      "nutri_score_standardized": 45
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 782,
                    "name": "grilled vegetables",
                    "nutri_score": {
                      "nutri_score_category": "B",
                      "nutri_score_standardized": 70
                    },
                    "prob": 0.6658790144078298
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 615,
                    "name": "sauteed vegetables",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.20307953941806833
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 155,
                    "name": "sauteed spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.20087265196795767
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 266,
                    "name": "sauteed mushrooms",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.3247904184124985
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 16,
                        "name": "nuts"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 552,
                    "name": "catalan spinach",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      },
                      {
                        "id": 11,
                        "name": "fried food"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 642,
                    "name": "stir fried spinach",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.1842937361332224
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 936,
                    "name": "grilled chanterelles",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 88
                    },
                    "prob": 0.3247904184124985
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 1,
                    "name": "meat"
                  }
                ],
                "foodType": {
                  "id": 1,
                  "name": "food"
                },
                "hasNutriScore": true,
                "id": 317,
                "name": "steak",
                "nutri_score": {
                  "nutri_score_category": "D",
                  "nutri_score_standardized": 52
                },
                "prob": 0.15801991769919066,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 1,
                        "name": "meat"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 285,
                    "name": "grilled entrecote",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 66
                    },
                    "prob": 0.8153637467719546
                  }
                ]
              }
            ]
          },
          {
            "center": {
              "x": 273,
              "y": 175
            },
            "contained_bbox": {
              "h": 258,
              "w": 325,
              "x": 111,
              "y": 46
            },
            "food_item_position": 3,
            "polygon": [
              295,
              46,
              293,
              47,
              282,
              47,
              327,
              46
            ],
            "serving_size": 200.213,
            "recognition_results": [
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1226,
                "name": "lettuce",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2678714568000819,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1544,
                    "name": "salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16764951643472586
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1263,
                "name": "rucula",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.23097117134980644,
                "subclasses": [ ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1544,
                "name": "salad",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.2285873816525689,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1196,
                    "name": "endives",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.08377264490371553
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1240,
                    "name": "lamb's lettuce",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 81
                    },
                    "prob": 0.06712171896559911
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1242,
                    "name": "chicory greens",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05445664756346256
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 2,
                      "name": "ingredients"
                    },
                    "hasNutriScore": true,
                    "id": 1263,
                    "name": "rucula",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.16939782461838304
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1208,
                "name": "celery",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 73
                },
                "prob": 0.14628980327441313,
                "subclasses": [
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 31,
                    "name": "celery salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 73
                    },
                    "prob": 0.05766728717840139
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 1476,
                    "name": "cucumber salad",
                    "nutri_score": {
                      "nutri_score_category": "A",
                      "nutri_score_standardized": 77
                    },
                    "prob": 0.05367282166851618
                  },
                  {
                    "foodFamily": [
                      {
                        "id": 8,
                        "name": "vegetables/legumes"
                      }
                    ],
                    "foodType": {
                      "id": 1,
                      "name": "food"
                    },
                    "hasNutriScore": true,
                    "id": 181,
                    "name": "marinated cold cucumber",
                    "nutri_score": {
                      "nutri_score_category": "C",
                      "nutri_score_standardized": 59
                    },
                    "prob": 0.05367282166851618
                  }
                ]
              },
              {
                "foodFamily": [
                  {
                    "id": 8,
                    "name": "vegetables/legumes"
                  }
                ],
                "foodType": {
                  "id": 2,
                  "name": "ingredients"
                },
                "hasNutriScore": true,
                "id": 1183,
                "name": "cardoon",
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 81
                },
                "prob": 0.1262801869231296,
                "subclasses": [ ]
              }
            ]
          }
        ]
      }

    ConfirmTypeResponseExample:
      {
        "foodFamily": [
          {
            "id": 2,
            "name": "postre",
            "prob": 0.9999074339866638
          }
        ],
        "foodType": [
          {
            "id": 1,
            "name": "comida"
          }
        ],
        "imageId": 1257852,
        "model_versions": {
          "foodType": "v0.7",
          "foodgroups": "v0.7",
          "foodrec": "v0.9"
        },
        "recognition_results": [
          {
            "id": 1022,
            "name": "buñuelos de viento",
            "prob": 0.8812140107154847,
            "subclasses": [ ]
          },
          {
            "id": 110,
            "name": "donuts",
            "prob": 0.08308405131101608,
            "subclasses": [ ]
          },
          {
            "id": 193,
            "name": "churros",
            "prob": 0.014977012109011412,
            "subclasses": [ ]
          },
          {
            "id": 2016,
            "name": "disco nasi",
            "prob": 0.005158549454063177,
            "subclasses": [ ]
          },
          {
            "id": 1487,
            "name": "calamares a la romana",
            "prob": 0.0038853646081406625,
            "subclasses": [ ]
          }
        ]
      }

    ConfirmDishResponseExample:
      {
        "recognition_results": [
          {
            "id": 110,
            "name": "donuts",
            "prob": 1.0
          }
        ],
        "source": "logmeal"
      }
    ConfirmFoodGroupResponseExample:
      {
        "recognition_results": [
        {
          "id": 12,
          "name": "meat",
          "prob": 1.0
        }
        ]
      }

    AllModelsResponseExample:
      {
        "models": {
          "v0.7": [
            {
              "id": 36,
              "name": "quantity_recipe"
            },
            {
              "id": 35,
              "name": "multi_track"
            },
            {
              "id": 4,
              "name": "ingredients"
            },
            {
              "id": 24,
              "name": "mixed_sl_ml"
            },
            {
              "id": 30,
              "name": "yolo_highResolution"
            },
            {
              "id": 34,
              "name": "people_track"
            },
            {
              "id": 14,
              "name": "yolo"
            },
            {
              "id": 2,
              "name": "foodType"
            },
            {
              "id": 33,
              "name": "yolo_facemask_basic"
            },
            {
              "id": 7,
              "name": "foodgroups"
            },
            {
              "id": 27,
              "name": "yolo_food_nonfood"
            },
            {
              "id": 25,
              "name": "yolo_group_prediction"
            },
            {
              "id": 6,
              "name": "foodrec",
              "region": 1
            },
            {
              "id": 37,
              "name": "menu_based"
            },
            {
              "id": 29,
              "name": "yolo_ensemble"
            },
            {
              "id": 8,
              "name": "multilabel"
            },
            {
              "id": 26,
              "name": "yolo_general"
            },
            {
              "id": 15,
              "name": "yolo_tray_prediction"
            },
            {
              "id": 70,
              "name": "ingredients_recipe"
            },
            {
              "id": 5,
              "name": "sauces"
            },
            {
              "id": 3,
              "name": "drinks"
            }
          ],
          "v0.8": [
            {
              "id": 19,
              "name": "foodrec_spanish",
              "region": 2
            },
            {
              "id": 10,
              "name": "foodrec",
              "region": 1
            },
            {
              "id": 22,
              "name": "multilabel"
            },
            {
              "id": 11,
              "name": "ingredients"
            },
            {
              "id": 21,
              "name": "foodrec_italian",
              "region": 4
            },
            {
              "id": 23,
              "name": "foodType"
            },
            {
              "id": 20,
              "name": "foodrec_dutch",
              "region": 3
            },
            {
              "id": 12,
              "name": "sauces"
            },
            {
              "id": 13,
              "name": "drinks"
            }
          ],
          "v0.9": [
            {
              "id": 32,
              "name": "foodrec",
              "region": 1
            },
            {
              "id": 31,
              "name": "multilabel"
            }
          ]
        },
        "regions": [
          {
            "id": 1,
            "name": "General"
          },
          {
            "id": 2,
            "name": "Spanish"
          },
          {
            "id": 3,
            "name": "Dutch"
          },
          {
            "id": 4,
            "name": "Italian"
          }
        ]
      }

    WeeklySummaryExample:
      {
        "day_by_day_summary": {
          "friday": {
            "daily_calorie_distribution": {
              "lunch": {
                "calories": 702,
                "percentage": 50
              },
              "breakfast": {
                "calories": 702,
                "percentage": 50
              }
            },
            "daily_energy": {
              "calories": {
                "day_intake": 1404
              },
              "carbs": {
                "day_intake": 208
              },
              "fat": {
                "day_intake": 43
              },
              "protein": {
                "day_intake": 45
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "monday": {
            "daily_calorie_distribution": {
              "lunch": {
                "calories": 176,
                "percentage": 100
              }
            },
            "daily_energy": {
              "calories": {
                "day_intake": 176
              },
              "carbs": {
                "day_intake": 15
              },
              "fat": {
                "day_intake": 13
              },
              "protein": {
                "day_intake": 3
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "saturday": {
            "daily_calorie_distribution": { },
            "daily_energy": {
              "calories": {
                "day_intake": 0
              },
              "carbs": {
                "day_intake": 0
              },
              "fat": {
                "day_intake": 0
              },
              "protein": {
                "day_intake": 0
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "sunday": {
            "daily_calorie_distribution": { },
            "daily_energy": {
              "calories": {
                "day_intake": 0
              },
              "carbs": {
                "day_intake": 0
              },
              "fat": {
                "day_intake": 0
              },
              "protein": {
                "day_intake": 0
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "thursday": {
            "daily_calorie_distribution": {
              "lunch": {
                "calories": 5190,
                "percentage": 90
              },
              "breakfast": {
                "calories": 606,
                "percentage": 10
              }
            },
            "daily_energy": {
              "calories": {
                "day_intake": 5796
              },
              "carbs": {
                "day_intake": 390
              },
              "fat": {
                "day_intake": 396
              },
              "protein": {
                "day_intake": 216
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": true,
                "eaten_portions": 2,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "tuesday": {
            "daily_calorie_distribution": {
              "lunch": {
                "calories": 366,
                "percentage": 100
              }
            },
            "daily_energy": {
              "calories": {
                "day_intake": 366
              },
              "carbs": {
                "day_intake": 65
              },
              "fat": {
                "day_intake": 14
              },
              "protein": {
                "day_intake": 4
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 2,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          },
          "wednesday": {
            "daily_calorie_distribution": { },
            "daily_energy": {
              "calories": {
                "day_intake": 0
              },
              "carbs": {
                "day_intake": 0
              },
              "fat": {
                "day_intake": 0
              },
              "protein": {
                "day_intake": 0
              }
            },
            "daily_portions": {
              "Dairy Products": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 3,
                  "min": 1
                }
              },
              "Fruit": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 3
                }
              },
              "Grains and Tubers": {
                "daily_portions_achieved": true,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": 6,
                  "min": null
                }
              },
              "Vegetables": {
                "daily_portions_achieved": false,
                "eaten_portions": 0,
                "recommended_portions": {
                  "max": null,
                  "min": 2
                }
              }
            }
          }
        },
        "week": "2023/04/17 - 2023/04/23",
        "week_averages": {
          "calories": {
            "achieved_percentage": 94,
            "average": 1935,
            "recommended": 2058
          },
          "carbs": {
            "achieved_percentage": 72,
            "average": 169,
            "recommended": 232
          },
          "fat": {
            "achieved_percentage": 145,
            "average": 116,
            "recommended": 80
          },
          "protein": {
            "achieved_percentage": 65,
            "average": 67,
            "recommended": 103
          }
        },
        "week_occasion_distribution": {
          "lunch": {
            "calories": 6434,
            "percentage": 83
          },
          "breakfast": {
            "calories": 1308,
            "percentage": 16
          }
        },
        "weekly_recommendation_summary": {
          "Egg": {
            "eaten_portions": 0,
            "portion_consumption_color": "green",
            "recommended_portions": {
              "max": 7,
              "min": null
            }
          },
          "Fish": {
            "eaten_portions": 0,
            "portion_consumption_color": "transparent",
            "recommended_portions": {
              "max": 4,
              "min": 2
            }
          },
          "Legumes": {
            "eaten_portions": 0,
            "portion_consumption_color": "transparent",
            "recommended_portions": {
              "max": null,
              "min": 3
            }
          },
          "Meat": {
            "eaten_portions": 0,
            "portion_consumption_color": "green",
            "recommended_portions": {
              "max": 4,
              "min": null
            }
          },
          "Nuts": {
            "eaten_portions": 23,
            "portion_consumption_color": "green",
            "recommended_portions": {
              "max": null,
              "min": 3
            }
          },
          "Red Meat": {
            "eaten_portions": 0,
            "portion_consumption_color": "green",
            "recommended_portions": {
              "max": 2,
              "min": null
            }
          }
        }
      }

    DailySummaryExample:
      {
        "daily_calorie_distribution": {
          "lunch": {
            "calories": 702,
            "percentage": 50
          },
          "breakfast": {
            "calories": 702,
            "percentage": 50
          }
        },
        "daily_energy": {
          "calories": {
            "day_intake": 1404,
            "recommended_value": 2058
          },
          "carbs": {
            "day_intake": 208,
            "recommended_value": 232
          },
          "fat": {
            "day_intake": 43,
            "recommended_value": 80
          },
          "protein": {
            "day_intake": 45,
            "recommended_value": 103
          }
        },
        "daily_portions": {
          "Dairy Products": {
            "daily_portions_achieved": false,
            "eaten_portions": 0,
            "recommended_portions": {
              "max": 3,
              "min": 1
            }
          },
          "Fruit": {
            "daily_portions_achieved": false,
            "eaten_portions": 0,
            "recommended_portions": {
              "max": null,
              "min": 3
            }
          },
          "Grains and Tubers": {
            "daily_portions_achieved": true,
            "eaten_portions": 0,
            "recommended_portions": {
              "max": 6,
              "min": null
            }
          },
          "Vegetables": {
            "daily_portions_achieved": false,
            "eaten_portions": 0,
            "recommended_portions": {
              "max": null,
              "min": 2
            }
          }
        }
      }

    GetIntakesListExample:
      {
        "intakes_list": [
          {
            "favorite_image_id_link": null,
            "foodGroup": [
              "meat",
              "dairy products",
              "noodles/pasta",
              "vegetables/legumes",
              "fried food"
            ],
            "foodName": [
              "canelones de carne",
              "rollitos de primavera",
              "ensalada con ketchup"
            ],
            "hasNutritionalInfo": true,
            "ids": [
              947,
              7,
              null
            ],
            "image_id": 1365065,
            "processed_image_size": {"height": 400, "width": 500},
            "image_nutri_score": {
              "nutri_score_category": "A",
              "nutri_score_standardized": 81
            },
            "image_url": "https://staging.storage1.logmeal.es:6020/apiImages/1365065.jpg?storageToken=.eJyrVkqtKMgsSizJzM-LT0ksSVWyUjIyMDLSNTDVNbAMMTSzMjQGIj1TMzNDMwMlHaWSygKQmqLUxBQgLzM3Pb4gsSQDKKKfWJDpmZuYnlqsb2hsZmpgZqqXVZAOVOMY4Bmfk58MtgKoDsTMUaoFAHUvJBs.T3uWTETTWUzQdx8vVKpGdd8lZdo",
            "is_kiosk_image": false,
            "nutritional_info": {
              "calories": 485.87,
              "totalNutrients": {
                "CA": {
                  "label": "Calcio",
                  "quantity": 106.07000000000001,
                  "unit": "mg"
                },
                "CHOCDF": {
                  "label": "Carbohidratos",
                  "quantity": 27.740000000000002,
                  "unit": "g"
                },
                "CHOLE": {
                  "label": "Colesterol",
                  "quantity": 134.55,
                  "unit": "mg"
                },
                "ENERC_KCAL": {
                  "label": "Energía",
                  "quantity": 485.87,
                  "unit": "kcal"
                },
                "F18D3CN3": {
                  "label": "Ácido alfa-linolénico (ALA)",
                  "quantity": 0.0,
                  "unit": "g"
                },
                "F20D5": {
                  "label": "Ácido eicosapentaenoico (EPA)",
                  "quantity": 0.020999999999999998,
                  "unit": "g"
                },
                "F22D6": {
                  "label": "Ácido docosahexaenoico (DHA)",
                  "quantity": 0.0021,
                  "unit": "g"
                },
                "FAMS": {
                  "label": "Grasas monosaturadas",
                  "quantity": 10.45,
                  "unit": "g"
                },
                "FAPU": {
                  "label": "Poliinsaturada",
                  "quantity": 3.69,
                  "unit": "g"
                },
                "FASAT": {
                  "label": "Saturadas",
                  "quantity": 8.120000000000001,
                  "unit": "g"
                },
                "FAT": {
                  "label": "Grasas",
                  "quantity": 24.86,
                  "unit": "g"
                },
                "FATRN": {
                  "label": "Grasas trans",
                  "quantity": 0.07,
                  "unit": "g"
                },
                "FE": {
                  "label": "Hierro",
                  "quantity": 3.5999999999999996,
                  "unit": "mg"
                },
                "FIBTG": {
                  "label": "Fibra",
                  "quantity": 2.54,
                  "unit": "g"
                },
                "FOLAC": {
                  "label": "Ácido fólico",
                  "quantity": 0.0,
                  "unit": "µg"
                },
                "FOLDFE": {
                  "label": "Folato equivalente (total)",
                  "quantity": 93.97,
                  "unit": "µg"
                },
                "FOLFD": {
                  "label": "Folato (comida)",
                  "quantity": 93.97,
                  "unit": "µg"
                },
                "K": {
                  "label": "Potasio",
                  "quantity": 714.03,
                  "unit": "mg"
                },
                "MG": {
                  "label": "Magnesio",
                  "quantity": 76.93,
                  "unit": "mg"
                },
                "NA": {
                  "label": "Sodio",
                  "quantity": 498.96,
                  "unit": "mg"
                },
                "NIA": {
                  "label": "Niacina (B3)",
                  "quantity": 10.07,
                  "unit": "mg"
                },
                "P": {
                  "label": "Fósforo",
                  "quantity": 357.68,
                  "unit": "mg"
                },
                "PROCNT": {
                  "label": "Proteína",
                  "quantity": 36.73,
                  "unit": "g"
                },
                "RIBF": {
                  "label": "Riboflavina (B2)",
                  "quantity": 0.41000000000000003,
                  "unit": "mg"
                },
                "SUGAR": {
                  "label": "Azúcares",
                  "quantity": 3.15,
                  "unit": "g"
                },
                "SUGAR.added": {
                  "label": "Azucares añadidos",
                  "quantity": 0.54,
                  "unit": "g"
                },
                "THIA": {
                  "label": "Tiamina (B1)",
                  "quantity": 0.32,
                  "unit": "mg"
                },
                "TOCPHA": {
                  "label": "Vitamina E",
                  "quantity": 2.34,
                  "unit": "mg"
                },
                "VITA_RAE": {
                  "label": "Vitamina A",
                  "quantity": 281.34000000000003,
                  "unit": "µg"
                },
                "VITB12": {
                  "label": "Vitamina B12",
                  "quantity": 1.74,
                  "unit": "µg"
                },
                "VITB6A": {
                  "label": "Vitamina B6",
                  "quantity": 0.73,
                  "unit": "mg"
                },
                "VITC": {
                  "label": "Vitamina C",
                  "quantity": 19.74,
                  "unit": "mg"
                },
                "VITD": {
                  "label": "Vitamina D",
                  "quantity": 15.68,
                  "unit": "µg"
                },
                "VITK1": {
                  "label": "Vitamina K",
                  "quantity": 206.15,
                  "unit": "µg"
                },
                "ZN": {
                  "label": "Zinc",
                  "quantity": 4.62,
                  "unit": "mg"
                }
              }
            },
            "nutritional_info_per_item": [
              {
                "food_item_position": 3,
                "hasNutriScore": true,
                "hasNutritionalInfo": true,
                "id": 947,
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 81
                },
                "nutritional_info": {
                  "calories": 276.46,
                  "totalNutrients": {
                    "CA": {
                      "label": "Calcio",
                      "quantity": 106.07000000000001,
                      "unit": "mg"
                    },
                    "CHOCDF": {
                      "label": "Carbohidratos",
                      "quantity": 27.740000000000002,
                      "unit": "g"
                    },
                    "CHOLE": {
                      "label": "Colesterol",
                      "quantity": 134.55,
                      "unit": "mg"
                    },
                    "ENERC_KCAL": {
                      "label": "Energía",
                      "quantity": 485.87,
                      "unit": "kcal"
                    },
                    "F18D3CN3": {
                      "label": "Ácido alfa-linolénico (ALA)",
                      "quantity": 0.0,
                      "unit": "g"
                    },
                    "F20D5": {
                      "label": "Ácido eicosapentaenoico (EPA)",
                      "quantity": 0.020999999999999998,
                      "unit": "g"
                    },
                    "F22D6": {
                      "label": "Ácido docosahexaenoico (DHA)",
                      "quantity": 0.0021,
                      "unit": "g"
                    },
                    "FAMS": {
                      "label": "Grasas monosaturadas",
                      "quantity": 10.45,
                      "unit": "g"
                    },
                    "FAPU": {
                      "label": "Poliinsaturada",
                      "quantity": 3.69,
                      "unit": "g"
                    },
                    "FASAT": {
                      "label": "Saturadas",
                      "quantity": 8.120000000000001,
                      "unit": "g"
                    },
                    "FAT": {
                      "label": "Grasas",
                      "quantity": 24.86,
                      "unit": "g"
                    },
                    "FATRN": {
                      "label": "Grasas trans",
                      "quantity": 0.07,
                      "unit": "g"
                    },
                    "FE": {
                      "label": "Hierro",
                      "quantity": 3.5999999999999996,
                      "unit": "mg"
                    },
                    "FIBTG": {
                      "label": "Fibra",
                      "quantity": 2.54,
                      "unit": "g"
                    },
                    "FOLAC": {
                      "label": "Ácido fólico",
                      "quantity": 0.0,
                      "unit": "µg"
                    },
                    "FOLDFE": {
                      "label": "Folato equivalente (total)",
                      "quantity": 93.97,
                      "unit": "µg"
                    },
                    "FOLFD": {
                      "label": "Folato (comida)",
                      "quantity": 93.97,
                      "unit": "µg"
                    },
                    "K": {
                      "label": "Potasio",
                      "quantity": 714.03,
                      "unit": "mg"
                    },
                    "MG": {
                      "label": "Magnesio",
                      "quantity": 76.93,
                      "unit": "mg"
                    },
                    "NA": {
                      "label": "Sodio",
                      "quantity": 498.96,
                      "unit": "mg"
                    },
                    "NIA": {
                      "label": "Niacina (B3)",
                      "quantity": 10.07,
                      "unit": "mg"
                    },
                    "P": {
                      "label": "Fósforo",
                      "quantity": 357.68,
                      "unit": "mg"
                    },
                    "PROCNT": {
                      "label": "Proteína",
                      "quantity": 36.73,
                      "unit": "g"
                    },
                    "RIBF": {
                      "label": "Riboflavina (B2)",
                      "quantity": 0.41000000000000003,
                      "unit": "mg"
                    },
                    "SUGAR": {
                      "label": "Azúcares",
                      "quantity": 3.15,
                      "unit": "g"
                    },
                    "SUGAR.added": {
                      "label": "Azucares añadidos",
                      "quantity": 0.54,
                      "unit": "g"
                    },
                    "THIA": {
                      "label": "Tiamina (B1)",
                      "quantity": 0.32,
                      "unit": "mg"
                    },
                    "TOCPHA": {
                      "label": "Vitamina E",
                      "quantity": 2.34,
                      "unit": "mg"
                    },
                    "VITA_RAE": {
                      "label": "Vitamina A",
                      "quantity": 281.34000000000003,
                      "unit": "µg"
                    },
                    "VITB12": {
                      "label": "Vitamina B12",
                      "quantity": 1.74,
                      "unit": "µg"
                    },
                    "VITB6A": {
                      "label": "Vitamina B6",
                      "quantity": 0.73,
                      "unit": "mg"
                    },
                    "VITC": {
                      "label": "Vitamina C",
                      "quantity": 19.74,
                      "unit": "mg"
                    },
                    "VITD": {
                      "label": "Vitamina D",
                      "quantity": 15.68,
                      "unit": "µg"
                    },
                    "VITK1": {
                      "label": "Vitamina K",
                      "quantity": 206.15,
                      "unit": "µg"
                    },
                    "ZN": {
                      "label": "Zinc",
                      "quantity": 4.62,
                      "unit": "mg"
                    }
                  }
                },
                "serving_size": 56.70500000000001
              },
              {
                "food_item_position": "ext2",
                "hasNutriScore": true,
                "hasNutritionalInfo": true,
                "id": 7,
                "nutri_score": {
                  "nutri_score_category": "A",
                  "nutri_score_standardized": 77
                },
                "nutritional_info": {
                  "calories": 209.4,
                  "totalNutrients": {
                    "CA": {
                      "label": "Calcio",
                      "quantity": 87.7,
                      "unit": "mg"
                    },
                    "CHOCDF": {
                      "label": "Carbohidratos",
                      "quantity": 27.71,
                      "unit": "g"
                    },
                    "CHOLE": {
                      "label": "Colesterol",
                      "quantity": 24.55,
                      "unit": "mg"
                    },
                    "ENERC_KCAL": {
                      "label": "Energía",
                      "quantity": 209.4,
                      "unit": "kcal"
                    },
                    "F18D3CN3": {
                      "label": "Ácido alfa-linolénico (ALA)",
                      "quantity": 0.0,
                      "unit": "g"
                    },
                    "F20D5": {
                      "label": "Ácido eicosapentaenoico (EPA)",
                      "quantity": 0.020999999999999998,
                      "unit": "g"
                    },
                    "F22D6": {
                      "label": "Ácido docosahexaenoico (DHA)",
                      "quantity": 0.0021,
                      "unit": "g"
                    },
                    "FAMS": {
                      "label": "Grasas monosaturadas",
                      "quantity": 3.57,
                      "unit": "g"
                    },
                    "FAPU": {
                      "label": "Poliinsaturada",
                      "quantity": 1.72,
                      "unit": "g"
                    },
                    "FASAT": {
                      "label": "Saturadas",
                      "quantity": 2.04,
                      "unit": "g"
                    },
                    "FAT": {
                      "label": "Grasas",
                      "quantity": 8.14,
                      "unit": "g"
                    },
                    "FATRN": {
                      "label": "Grasas trans",
                      "quantity": 0.03,
                      "unit": "g"
                    },
                    "FE": {
                      "label": "Hierro",
                      "quantity": 1.91,
                      "unit": "mg"
                    },
                    "FIBTG": {
                      "label": "Fibra",
                      "quantity": 2.54,
                      "unit": "g"
                    },
                    "FOLAC": {
                      "label": "Ácido fólico",
                      "quantity": 0.0,
                      "unit": "µg"
                    },
                    "FOLDFE": {
                      "label": "Folato equivalente (total)",
                      "quantity": 80.36,
                      "unit": "µg"
                    },
                    "FOLFD": {
                      "label": "Folato (comida)",
                      "quantity": 80.36,
                      "unit": "µg"
                    },
                    "K": {
                      "label": "Potasio",
                      "quantity": 394.25,
                      "unit": "mg"
                    },
                    "MG": {
                      "label": "Magnesio",
                      "quantity": 50.17,
                      "unit": "mg"
                    },
                    "NA": {
                      "label": "Sodio",
                      "quantity": 418.45,
                      "unit": "mg"
                    },
                    "NIA": {
                      "label": "Niacina (B3)",
                      "quantity": 1.81,
                      "unit": "mg"
                    },
                    "P": {
                      "label": "Fósforo",
                      "quantity": 129.52,
                      "unit": "mg"
                    },
                    "PROCNT": {
                      "label": "Proteína",
                      "quantity": 7.35,
                      "unit": "g"
                    },
                    "RIBF": {
                      "label": "Riboflavina (B2)",
                      "quantity": 0.15,
                      "unit": "mg"
                    },
                    "SUGAR": {
                      "label": "Azúcares",
                      "quantity": 3.15,
                      "unit": "g"
                    },
                    "SUGAR.added": {
                      "label": "Azucares añadidos",
                      "quantity": 0.54,
                      "unit": "g"
                    },
                    "THIA": {
                      "label": "Tiamina (B1)",
                      "quantity": 0.12,
                      "unit": "mg"
                    },
                    "TOCPHA": {
                      "label": "Vitamina E",
                      "quantity": 2.15,
                      "unit": "mg"
                    },
                    "VITA_RAE": {
                      "label": "Vitamina A",
                      "quantity": 237.55,
                      "unit": "µg"
                    },
                    "VITB12": {
                      "label": "Vitamina B12",
                      "quantity": 0.2,
                      "unit": "µg"
                    },
                    "VITB6A": {
                      "label": "Vitamina B6",
                      "quantity": 0.24,
                      "unit": "mg"
                    },
                    "VITC": {
                      "label": "Vitamina C",
                      "quantity": 19.63,
                      "unit": "mg"
                    },
                    "VITD": {
                      "label": "Vitamina D",
                      "quantity": 0.1,
                      "unit": "µg"
                    },
                    "VITK1": {
                      "label": "Vitamina K",
                      "quantity": 204.74,
                      "unit": "µg"
                    },
                    "ZN": {
                      "label": "Zinc",
                      "quantity": 0.91,
                      "unit": "mg"
                    }
                  }
                },
                "serving_size": 0
              },
              {
                "food_item_position": "ext1",
                "hasNutriScore": false,
                "hasNutritionalInfo": false,
                "id": null,
                "nutritional_info": { },
                "serving_size": null
              }
            ],
            "occasion": "breakfast",
            "occasion_info":
              {
                "id": null,
                "translation": "breakfast"
            },
            "segmentation_data": [
              {
                "center": {
                  "x": 162,
                  "y": 367
                },
                "contained_bbox": {
                  "h": 273,
                  "w": 245,
                  "x": 40,
                  "y": 231
                },
                "food_item_position": 1,
                "polygon": [
                  92,
                  231,
                  91,
                  232,
                  95,
                  231
                ]
              },
              {
                "center": {
                  "x": 385,
                  "y": 338
                },
                "contained_bbox": {
                  "h": 297,
                  "w": 251,
                  "x": 260,
                  "y": 190
                },
                "food_item_position": 2,
                "polygon": [
                  430,
                  190,
                  428,
                  191,
                  425,
                  191,
                  460,
                  191,
                  458,
                  191,
                  457,
                  190
                ]
              },
              {
                "center": {
                  "x": 273,
                  "y": 175
                },
                "contained_bbox": {
                  "h": 258,
                  "w": 325,
                  "x": 111,
                  "y": 46
                },
                "food_item_position": 3,
                "polygon": [
                  295,
                  46,
                  293,
                  47,
                  328,
                  47,
                  327,
                  46
                ]
              }
            ],
            "serving_size": 101.70500000000001,
            "timestamp": "2022/05/09, 09:32:39"
          }
        ],
        "total_result": {
          "CHOCDF": 27.740000000000002,
          "ENERC_KCAL": 485.87,
          "FAT": 24.86,
          "PROCNT": 36.73
        },
        "user_timezone": "CET"
      }

    NutritionalInfoResponseExample:
      {
        "foodName": [
          "canelones de carne",
          "rollitos de primavera",
          "ensalada con ketchup"
        ],
        "hasNutritionalInfo": true,
        "ids": [
          947,
          7,
          null
        ],
        "imageId": 1365065,
        "image_nutri_score": {
          "nutri_score_category": "A",
          "nutri_score_standardized": 81
        },
        "nutritional_info": {
          "calories": 485.87,
          "dailyIntakeReference": {
            "CHOCDF": {
              "label": "Carbohidratos",
              "level": "MEDIUM",
              "percent": 7.752875351401513
            },
            "ENERC_KCAL": {
              "label": "Energía",
              "level": "NONE",
              "percent": 15.276678948661262
            },
            "FASAT": {
              "label": "Saturadas",
              "level": "MEDIUM",
              "percent": 19.89415153748242
            },
            "FAT": {
              "label": "Grasas",
              "level": "HIGH",
              "percent": 20.099463101379094
            },
            "NA": {
              "label": "Sodio",
              "level": "HIGH",
              "percent": 33.263999999999996
            },
            "PROCNT": {
              "label": "Proteína",
              "level": "NONE",
              "percent": 23.09722426922132
            },
            "SUGAR": {
              "label": "Azúcares",
              "level": "MEDIUM",
              "percent": 8.399999999999999
            }
          },
          "totalNutrients": {
            "CA": {
              "label": "Calcio",
              "quantity": 106.07000000000001,
              "unit": "mg"
            },
            "CHOCDF": {
              "label": "Carbohidratos",
              "quantity": 27.740000000000002,
              "unit": "g"
            },
            "CHOLE": {
              "label": "Colesterol",
              "quantity": 134.55,
              "unit": "mg"
            },
            "ENERC_KCAL": {
              "label": "Energía",
              "quantity": 485.87,
              "unit": "kcal"
            },
            "F18D3CN3": {
              "label": "Ácido alfa-linolénico (ALA)",
              "quantity": 0.0,
              "unit": "g"
            },
            "F20D5": {
              "label": "Ácido eicosapentaenoico (EPA)",
              "quantity": 0.020999999999999998,
              "unit": "g"
            },
            "F22D6": {
              "label": "Ácido docosahexaenoico (DHA)",
              "quantity": 0.0021,
              "unit": "g"
            },
            "FAMS": {
              "label": "Grasas monosaturadas",
              "quantity": 10.45,
              "unit": "g"
            },
            "FAPU": {
              "label": "Poliinsaturada",
              "quantity": 3.69,
              "unit": "g"
            },
            "FASAT": {
              "label": "Saturadas",
              "quantity": 8.120000000000001,
              "unit": "g"
            },
            "FAT": {
              "label": "Grasas",
              "quantity": 24.86,
              "unit": "g"
            },
            "FATRN": {
              "label": "Grasas trans",
              "quantity": 0.07,
              "unit": "g"
            },
            "FE": {
              "label": "Hierro",
              "quantity": 3.5999999999999996,
              "unit": "mg"
            },
            "FIBTG": {
              "label": "Fibra",
              "quantity": 2.54,
              "unit": "g"
            },
            "FOLAC": {
              "label": "Ácido fólico",
              "quantity": 0.0,
              "unit": "µg"
            },
            "FOLDFE": {
              "label": "Folato equivalente (total)",
              "quantity": 93.97,
              "unit": "µg"
            },
            "FOLFD": {
              "label": "Folato (comida)",
              "quantity": 93.97,
              "unit": "µg"
            },
            "K": {
              "label": "Potasio",
              "quantity": 714.03,
              "unit": "mg"
            },
            "MG": {
              "label": "Magnesio",
              "quantity": 76.93,
              "unit": "mg"
            },
            "NA": {
              "label": "Sodio",
              "quantity": 498.96,
              "unit": "mg"
            },
            "NIA": {
              "label": "Niacina (B3)",
              "quantity": 10.07,
              "unit": "mg"
            },
            "P": {
              "label": "Fósforo",
              "quantity": 357.68,
              "unit": "mg"
            },
            "PROCNT": {
              "label": "Proteína",
              "quantity": 36.73,
              "unit": "g"
            },
            "RIBF": {
              "label": "Riboflavina (B2)",
              "quantity": 0.41000000000000003,
              "unit": "mg"
            },
            "SUGAR": {
              "label": "Azúcares",
              "quantity": 3.15,
              "unit": "g"
            },
            "SUGAR.added": {
              "label": "Azucares añadidos",
              "quantity": 0.54,
              "unit": "g"
            },
            "THIA": {
              "label": "Tiamina (B1)",
              "quantity": 0.32,
              "unit": "mg"
            },
            "TOCPHA": {
              "label": "Vitamina E",
              "quantity": 2.34,
              "unit": "mg"
            },
            "VITA_RAE": {
              "label": "Vitamina A",
              "quantity": 281.34000000000003,
              "unit": "µg"
            },
            "VITB12": {
              "label": "Vitamina B12",
              "quantity": 1.74,
              "unit": "µg"
            },
            "VITB6A": {
              "label": "Vitamina B6",
              "quantity": 0.73,
              "unit": "mg"
            },
            "VITC": {
              "label": "Vitamina C",
              "quantity": 19.74,
              "unit": "mg"
            },
            "VITD": {
              "label": "Vitamina D",
              "quantity": 15.68,
              "unit": "µg"
            },
            "VITK1": {
              "label": "Vitamina K",
              "quantity": 206.15,
              "unit": "µg"
            },
            "ZN": {
              "label": "Zinc",
              "quantity": 4.62,
              "unit": "mg"
            }
          }
        },
        "nutritional_info_per_item": [
          {
            "food_item_position": 3,
            "hasNutriScore": true,
            "hasNutritionalInfo": true,
            "id": 947,
            "nutri_score": {
              "nutri_score_category": "A",
              "nutri_score_standardized": 81
            },
            "nutritional_info": {
              "calories": 276.46,
              "dailyIntakeReference": {
                "CHOCDF": {
                  "label": "Carbohidratos",
                  "level": "MEDIUM",
                  "percent": 7.752875351401513
                },
                "ENERC_KCAL": {
                  "label": "Energía",
                  "level": "NONE",
                  "percent": 15.276678948661262
                },
                "FASAT": {
                  "label": "Saturadas",
                  "level": "MEDIUM",
                  "percent": 19.89415153748242
                },
                "FAT": {
                  "label": "Grasas",
                  "level": "HIGH",
                  "percent": 20.099463101379094
                },
                "NA": {
                  "label": "Sodio",
                  "level": "HIGH",
                  "percent": 33.263999999999996
                },
                "PROCNT": {
                  "label": "Proteína",
                  "level": "NONE",
                  "percent": 23.09722426922132
                },
                "SUGAR": {
                  "label": "Azúcares",
                  "level": "MEDIUM",
                  "percent": 8.399999999999999
                }
              },
              "totalNutrients": {
                "CA": {
                  "label": "Calcio",
                  "quantity": 106.07000000000001,
                  "unit": "mg"
                },
                "CHOCDF": {
                  "label": "Carbohidratos",
                  "quantity": 27.740000000000002,
                  "unit": "g"
                },
                "CHOLE": {
                  "label": "Colesterol",
                  "quantity": 134.55,
                  "unit": "mg"
                },
                "ENERC_KCAL": {
                  "label": "Energía",
                  "quantity": 485.87,
                  "unit": "kcal"
                },
                "F18D3CN3": {
                  "label": "Ácido alfa-linolénico (ALA)",
                  "quantity": 0.0,
                  "unit": "g"
                },
                "F20D5": {
                  "label": "Ácido eicosapentaenoico (EPA)",
                  "quantity": 0.020999999999999998,
                  "unit": "g"
                },
                "F22D6": {
                  "label": "Ácido docosahexaenoico (DHA)",
                  "quantity": 0.0021,
                  "unit": "g"
                },
                "FAMS": {
                  "label": "Grasas monosaturadas",
                  "quantity": 10.45,
                  "unit": "g"
                },
                "FAPU": {
                  "label": "Poliinsaturada",
                  "quantity": 3.69,
                  "unit": "g"
                },
                "FASAT": {
                  "label": "Saturadas",
                  "quantity": 8.120000000000001,
                  "unit": "g"
                },
                "FAT": {
                  "label": "Grasas",
                  "quantity": 24.86,
                  "unit": "g"
                },
                "FATRN": {
                  "label": "Grasas trans",
                  "quantity": 0.07,
                  "unit": "g"
                },
                "FE": {
                  "label": "Hierro",
                  "quantity": 3.5999999999999996,
                  "unit": "mg"
                },
                "FIBTG": {
                  "label": "Fibra",
                  "quantity": 2.54,
                  "unit": "g"
                },
                "FOLAC": {
                  "label": "Ácido fólico",
                  "quantity": 0.0,
                  "unit": "µg"
                },
                "FOLDFE": {
                  "label": "Folato equivalente (total)",
                  "quantity": 93.97,
                  "unit": "µg"
                },
                "FOLFD": {
                  "label": "Folato (comida)",
                  "quantity": 93.97,
                  "unit": "µg"
                },
                "K": {
                  "label": "Potasio",
                  "quantity": 714.03,
                  "unit": "mg"
                },
                "MG": {
                  "label": "Magnesio",
                  "quantity": 76.93,
                  "unit": "mg"
                },
                "NA": {
                  "label": "Sodio",
                  "quantity": 498.96,
                  "unit": "mg"
                },
                "NIA": {
                  "label": "Niacina (B3)",
                  "quantity": 10.07,
                  "unit": "mg"
                },
                "P": {
                  "label": "Fósforo",
                  "quantity": 357.68,
                  "unit": "mg"
                },
                "PROCNT": {
                  "label": "Proteína",
                  "quantity": 36.73,
                  "unit": "g"
                },
                "RIBF": {
                  "label": "Riboflavina (B2)",
                  "quantity": 0.41000000000000003,
                  "unit": "mg"
                },
                "SUGAR": {
                  "label": "Azúcares",
                  "quantity": 3.15,
                  "unit": "g"
                },
                "SUGAR.added": {
                  "label": "Azucares añadidos",
                  "quantity": 0.54,
                  "unit": "g"
                },
                "THIA": {
                  "label": "Tiamina (B1)",
                  "quantity": 0.32,
                  "unit": "mg"
                },
                "TOCPHA": {
                  "label": "Vitamina E",
                  "quantity": 2.34,
                  "unit": "mg"
                },
                "VITA_RAE": {
                  "label": "Vitamina A",
                  "quantity": 281.34000000000003,
                  "unit": "µg"
                },
                "VITB12": {
                  "label": "Vitamina B12",
                  "quantity": 1.74,
                  "unit": "µg"
                },
                "VITB6A": {
                  "label": "Vitamina B6",
                  "quantity": 0.73,
                  "unit": "mg"
                },
                "VITC": {
                  "label": "Vitamina C",
                  "quantity": 19.74,
                  "unit": "mg"
                },
                "VITD": {
                  "label": "Vitamina D",
                  "quantity": 15.68,
                  "unit": "µg"
                },
                "VITK1": {
                  "label": "Vitamina K",
                  "quantity": 206.15,
                  "unit": "µg"
                },
                "ZN": {
                  "label": "Zinc",
                  "quantity": 4.62,
                  "unit": "mg"
                }
              }
            },
            "serving_size": 56.70500000000001
          },
          {
            "food_item_position": "ext2",
            "hasNutriScore": true,
            "hasNutritionalInfo": true,
            "id": 7,
            "nutri_score": {
              "nutri_score_category": "A",
              "nutri_score_standardized": 77
            },
            "nutritional_info": {
              "calories": 209.4,
              "dailyIntakeReference": {
                "CHOCDF": {
                  "label": "Carbohidratos",
                  "level": "MEDIUM",
                  "percent": 7.744490843090696
                },
                "ENERC_KCAL": {
                  "label": "Energía",
                  "level": "NONE",
                  "percent": 6.583935151068533
                },
                "FASAT": {
                  "label": "Saturadas",
                  "level": "LOW",
                  "percent": 4.998038070993119
                },
                "FAT": {
                  "label": "Grasas",
                  "level": "MEDIUM",
                  "percent": 6.581240130540057
                },
                "NA": {
                  "label": "Sodio",
                  "level": "HIGH",
                  "percent": 27.896666666666665
                },
                "PROCNT": {
                  "label": "Proteína",
                  "level": "NONE",
                  "percent": 4.6219602063375085
                },
                "SUGAR": {
                  "label": "Azúcares",
                  "level": "MEDIUM",
                  "percent": 8.399999999999999
                }
              },
              "totalNutrients": {
                "CA": {
                  "label": "Calcio",
                  "quantity": 87.7,
                  "unit": "mg"
                },
                "CHOCDF": {
                  "label": "Carbohidratos",
                  "quantity": 27.71,
                  "unit": "g"
                },
                "CHOLE": {
                  "label": "Colesterol",
                  "quantity": 24.55,
                  "unit": "mg"
                },
                "ENERC_KCAL": {
                  "label": "Energía",
                  "quantity": 209.4,
                  "unit": "kcal"
                },
                "F18D3CN3": {
                  "label": "Ácido alfa-linolénico (ALA)",
                  "quantity": 0.0,
                  "unit": "g"
                },
                "F20D5": {
                  "label": "Ácido eicosapentaenoico (EPA)",
                  "quantity": 0.020999999999999998,
                  "unit": "g"
                },
                "F22D6": {
                  "label": "Ácido docosahexaenoico (DHA)",
                  "quantity": 0.0021,
                  "unit": "g"
                },
                "FAMS": {
                  "label": "Grasas monosaturadas",
                  "quantity": 3.57,
                  "unit": "g"
                },
                "FAPU": {
                  "label": "Poliinsaturada",
                  "quantity": 1.72,
                  "unit": "g"
                },
                "FASAT": {
                  "label": "Saturadas",
                  "quantity": 2.04,
                  "unit": "g"
                },
                "FAT": {
                  "label": "Grasas",
                  "quantity": 8.14,
                  "unit": "g"
                },
                "FATRN": {
                  "label": "Grasas trans",
                  "quantity": 0.03,
                  "unit": "g"
                },
                "FE": {
                  "label": "Hierro",
                  "quantity": 1.91,
                  "unit": "mg"
                },
                "FIBTG": {
                  "label": "Fibra",
                  "quantity": 2.54,
                  "unit": "g"
                },
                "FOLAC": {
                  "label": "Ácido fólico",
                  "quantity": 0.0,
                  "unit": "µg"
                },
                "FOLDFE": {
                  "label": "Folato equivalente (total)",
                  "quantity": 80.36,
                  "unit": "µg"
                },
                "FOLFD": {
                  "label": "Folato (comida)",
                  "quantity": 80.36,
                  "unit": "µg"
                },
                "K": {
                  "label": "Potasio",
                  "quantity": 394.25,
                  "unit": "mg"
                },
                "MG": {
                  "label": "Magnesio",
                  "quantity": 50.17,
                  "unit": "mg"
                },
                "NA": {
                  "label": "Sodio",
                  "quantity": 418.45,
                  "unit": "mg"
                },
                "NIA": {
                  "label": "Niacina (B3)",
                  "quantity": 1.81,
                  "unit": "mg"
                },
                "P": {
                  "label": "Fósforo",
                  "quantity": 129.52,
                  "unit": "mg"
                },
                "PROCNT": {
                  "label": "Proteína",
                  "quantity": 7.35,
                  "unit": "g"
                },
                "RIBF": {
                  "label": "Riboflavina (B2)",
                  "quantity": 0.15,
                  "unit": "mg"
                },
                "SUGAR": {
                  "label": "Azúcares",
                  "quantity": 3.15,
                  "unit": "g"
                },
                "SUGAR.added": {
                  "label": "Azucares añadidos",
                  "quantity": 0.54,
                  "unit": "g"
                },
                "THIA": {
                  "label": "Tiamina (B1)",
                  "quantity": 0.12,
                  "unit": "mg"
                },
                "TOCPHA": {
                  "label": "Vitamina E",
                  "quantity": 2.15,
                  "unit": "mg"
                },
                "VITA_RAE": {
                  "label": "Vitamina A",
                  "quantity": 237.55,
                  "unit": "µg"
                },
                "VITB12": {
                  "label": "Vitamina B12",
                  "quantity": 0.2,
                  "unit": "µg"
                },
                "VITB6A": {
                  "label": "Vitamina B6",
                  "quantity": 0.24,
                  "unit": "mg"
                },
                "VITC": {
                  "label": "Vitamina C",
                  "quantity": 19.63,
                  "unit": "mg"
                },
                "VITD": {
                  "label": "Vitamina D",
                  "quantity": 0.1,
                  "unit": "µg"
                },
                "VITK1": {
                  "label": "Vitamina K",
                  "quantity": 204.74,
                  "unit": "µg"
                },
                "ZN": {
                  "label": "Zinc",
                  "quantity": 0.91,
                  "unit": "mg"
                }
              }
            },
            "serving_size": 0
          },
          {
            "food_item_position": "ext1",
            "hasNutriScore": false,
            "hasNutritionalInfo": false,
            "id": null,
            "nutritional_info": {
              "dailyIntakeReference": { }
            },
            "serving_size": null
          }
        ],
        "serving_size": 101.70500000000001
      }

  requestBodies:

    ModifyNutritionBody:
      description: Parameters to update an intake nutritional information.
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/ModifyNutritionSchema"
              - $ref: "#/components/schemas/ModifyNutritionBulkSchema"


